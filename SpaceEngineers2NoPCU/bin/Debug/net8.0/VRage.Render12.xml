<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Render12</name>
    </assembly>
    <members>
        <member name="F:Keen.VRage.Render12.ClusteringStage.ClusterStorageSetup.Dimensions">
            <summary>
            Dimensions of the cluster grid. X and Y are the number of tiles, Z is the number of clusters 
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.ClusteringStage.ClusterStorageSetup.TileSize">
            <summary>
            Size of each tile, in pixels
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.ClusteringStage.ClusterStorageSetup.MaxElementsPerTile">
            <summary>
            Maximum number of elements that can be stored in a single tile. Additional elements will be discarded. Note that there is no sorting, so order
            is not deterministic
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.ClusteringStage.ClusterStorageSetup.SpansPerTile">
            <summary>
            Number of spans that can be stored in a single tile. Clusters have a fixed number of spans based on the number of proxy types it needs to
            store
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.CommandLists.ComputeCommandList">
            <summary>
            See Command list API Restrictions in https://docs.microsoft.com/en-us/windows/win32/direct3d12/recording-command-lists-and-bundles
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.CommandLists.CopyCommandList">
            <summary>
            See Command list API Restrictions in https://docs.microsoft.com/en-us/windows/win32/direct3d12/recording-command-lists-and-bundles
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.CommandLists.CopyCommandList.CopySubresource(Keen.VRage.Render12.Resources.Views.ICopyDestinationView,Keen.VRage.Render12.Resources.Views.ICopySourceView,System.Int32)">
            <summary>
            Perform copy of the subresource between texture and buffer.
            </summary>
            <param name="destination">Destination buffer</param>
            <param name="source">Source texture</param>
            <param name="sourceSubresourceOffset"></param>
        </member>
        <member name="M:Keen.VRage.Render12.Core.CommandLists.CopyCommandList.CopyTextureSubresource(Keen.VRage.Render12.Resources.Views.ICopyDestinationView,Keen.VRage.Render12.Resources.Views.ICopySourceView,System.Int32)">
            <summary>
            Perform copy of the subresource between two textures.
            </summary>
            <param name="destination">Destination buffer</param>
            <param name="source">Source texture</param>
            <param name="sourceSubresourceOffset"></param>
        </member>
        <member name="T:Keen.VRage.Render12.Core.CommandLists.DirectCommandList">
            <summary>
            See Command list API Restrictions in https://docs.microsoft.com/en-us/windows/win32/direct3d12/recording-command-lists-and-bundles
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Contracts.ContractsProcessor.ProcessAsyncRCB(Keen.VRage.Render.FrameData.IReplayToken)">
            <summary>
            Processes the render command buffer stored in the token.
            Returns true if all commands where processed.
            False otherwise, and the current state is stored in the token.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Contracts.HandlerType">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.Core.Contracts.HandlerType.Draw">
            <summary>
            Draw command
            Skipped when renderer is falling behind and has to process multiple enqueued frames (only handled in last frame before
            draw)
            Draw sprite
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Contracts.HandlerType.StateChangeOnce">
            <summary>
            State change which can be applied only once, not applied when rendering same frame second time or more
            Add render object, remove render object...
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.CoreSystems.InitializeSyncSystems(Keen.VRage.Core.EngineComponents.ProjectManagerEngineComponent)">
            <summary>
            Initializes systems needed in synchronous communitation between render and game
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.Adapters">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.CommandQueue">
            <summary>
            Representation of the GPU's processing command queue.
            <a href="https://docs.microsoft.com/en-us/windows/win32/direct3d12/user-mode-heap-synchronization">See documentation.</a>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.CommandQueueType">
            <summary>
            Modern GPUs allows limited concurrency of execution. This concurrency is based on GPU's inner command queue.
            This enumeration distinguish those command queues.
            </summary>
            <remarks>CommmandListType is used in D3D12 API in for same purpose, but </remarks>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Device.CommandQueueType.Present">
            <summary>
            Refers to the present gpu command queue
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Device.CommandQueueType.Direct">
            <summary>
            Refers to the direct gpu command queue
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Device.CommandQueueType.Compute">
            <summary>
            Refers to the compute gpu command queue
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Device.CommandQueueType.Copy">
            <summary>
            Refers to the copy gpu command queue
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.DeviceContext">
            <summary>
            DeviceContext serves to access rendering queues, command lists and fences for graphics command queues.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Device.DeviceContext.GetPreciseBufferTotalBytes(System.Int32)">
             <summary>
             Get precise buffer size.
            
             The final formula was computed based on the experiments on NVidia GTX 1660. It is possible that the different vendors or even models
             will have different formula.
             </summary>
             <param name="requestedTotalSize"></param>
             <returns></returns>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.DeviceWrap">
            <summary>
            DeviceWrap is a low level wrapper around D3D12Device responsible for creation of the device and setting up the debug output.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Device.DeviceWrap.Dispose">
            <inheritdoc />
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.DredUtils">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Core.Device.SwapChain">
            <summary>
            Class encapsulates and manages Rendering swapchain.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.RenderLifetime.GetTrackingHandle(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.RenderLifetime.IsExpired(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.RenderLifetime.GetLifetimePolicy(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.CommonResources.CommonResourcesManager.GetInstanceIndexBuffer(System.Int32)">
            <summary>
            Returns a buffer with ordered indices from 0 to requestedSize. It is used to simulate InstanceID that works with
            offset in <see cref="F:Vortice.Direct3D12.DrawIndexedArguments.StartInstanceLocation"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.CommonResources.CommonResourcesManager.Group">
            <summary>
            Encapsulation of the related functionality to the logical groups.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Core#Systems#DebugReadbackMetadata}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.DebugReadbackMetadata.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.DebugReadbackManager">
            <summary>
            Debug readback manager is used to debug state related bugs on GPU. It allows to store any buffer from any point of the pipeline and store it into
            user data with ease. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.DynamicLODManager">
            <summary>
            Dynamically adjusts the object distance multiplier for LODs based on GPU workload
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.DynamicResolutionManager">
            <summary>
            Dynamic Resolution manages the scaling factor applied to render targets
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.FrameDispatcher._sharedCopyCommandList">
            This command list is shared by any upload (e.g. FileTexture data upload) so that we can avoid
            creating a command list every time we need to copy something.
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.FrameDispatcher.FlushAllQueuesAndWaitCpu">
            <summary>
            This function should not be called regularly, it might take stalls.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.FrameSpanManager">
            <summary>
            This class serves to maintain and sync fixed frame window.
            When changing gpu state on CPU timeline one must be careful not to change resources for the frame GPU did not processed
            yet. To prevent that
            this class manages fixed frame window. All system can count on that only small number of frames will be open at one
            time and eg. allocate
            resources for each of such frame in frame window.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Core.Systems.FrameSpanManager.AnimationFrameId">
            <summary>
            Returns the animation frame id of the current frame. Animation frame id should be used for all systems affecting the visual outcome of the
            frame to ensure deterministic results in testing framework. Eg. per frame id switching of temporal filtering sources.
            The animation frame id is reset on ResetContext event (between run of the different tests).
            Therefore there is no guarantee the AnimationFrameId from current frame is higher than AnimationFrameId from previous frame. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Core.Systems.FrameSpanManager.FrameId">
            <summary>
            Frame id of the current frame. FrameId is only ascending, therefore it can be used by internal systems with lifetime
            crossing ResetContext event.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.FrameSpanManager.SynchronizeFrame">
            <summary>
            Frame window on frame end will advance moving window by one frame and waits on CPU side if the next slot is still used by not completed frame.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.FrameUploadManager">
            <summary>
            Frame upload manager serves to limit the amount of data uploaded to the GPU per frame.
            It works only with the data allowing to be uploaded in asynchronously across multiple frames.
            TODO design memory upload budgeting system
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.GPUMonitorBlock">
            <summary>
            Describes a GPU profiler block with a time weight
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.GPUMonitorBlock.GPUBlockName">
            <summary>
            The name of the GPU Profiling block that should be measured by the monitor.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.GPUMonitorBlock.TargetTime">
            <summary>
            The targeted time for this block, to be used as baseline for optimal budget calculation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Core.Systems.GPUMonitorBlock.Weight">
            <summary>
            The weight of this block on the GPU frame time
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.IContinuationQueueOwner">
            <summary>
            Interface IContinuationQueueOwner is used to collect queues during dispose of the render
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.IFinalizeResourcesListener">
            <summary>
            Serves for all the managers who need to finalize deferred resources changes accumulated from processing of render contract messages
            or the <see cref="N:Keen.VRage.Render12.SceneSystem"/>.Tick. Implementation must be order calling order independent. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.IFrameEndDisposalListener">
            <summary>
            Interface is used to interact with system creating per frame resources.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.IGPUMonitor">
            <summary>
            Interface to notify systems about the current available GPU budget.
            Systems should adapt GPU work load based on the budget and confirm the change once ready.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.IGPUMonitor.GetBudget">
            <summary>
            Percentage of the absolute GPU work that should be used to maintain target FPS.
            Ranges from 0.0 to 1.0, where 1.0 means no adjsutment is needed.
            If null is returned, the new optimal budget has not been confirmed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.IGPUMonitor.Confirm(System.Single,System.Int32)">
            <summary>
            Confirm the budget is applied and that new values can be measured.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.IResetContextListener">
            <summary>
            IResetContextListener should be implemented by any system which holds any time persistent context. Serves to put render into a clean state to
            ensure deterministic outcome when running multiple sessions.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.ISceneManagerDisposalListener">
            <summary>
            Interface is used to run component disposal when the scene is destroyed.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.RangeAllocator">
            <summary>
            Virtual allocator of index ranges implementing first fit scheme using LinkedList (O(n) alloc/dealloc).
            If need for more performance arise implementation using interval tree should deliver O(log n) perf.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.RenderCommandBatchManager.OnBatchSubmitted(Keen.VRage.Render.FrameData.RenderCommandBuffer,Keen.VRage.Library.Threading.TaskCompletionSource)">
            <summary>
            Marks a render command batch as submitted by simulation and stores task completion source
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.RenderCommandBatchManager.ProcessMessageQueue">
            <summary>
            Processes render commands from submitted command batches.
            Batches can be suspended if interruption is signaled in token.
            When suspended, progress is saved and resumed on the next frame.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.RenderIdManager">
            <summary>
            Serves to provider render internal unique ids to represent various runtime create resources (<see cref="T:Keen.VRage.Library.Utils.GeneratedResourceHandle"/>).
            Note: DCS DEntity are represented by RenderId as well. It is guaranteed the RenderIds used by DCS system use non zero values in upper 32bits.
            Internal render values have zeros in in upper 32bits.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.ScreenBuffers.GetCurrentFrameRenderTarget">
            <summary>
            Temporal AA needs to accumulate data before displaying the image to the user after a camera jump.
            
            If needed, this method will create/dispose of a placeholder RT and return the correct RT to render this frame to.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.ScreenshotsManager.TakeRequestedScreenshots``1(``0,System.Boolean)">
            <summary>
            Take requested screenshot
            </summary>
            <param name="copySource">render target source</param>
            <param name="withoutUi">is call coming before UI drawing for save game screenshot?</param>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.ShaderAssertsManager">
            <summary>
            Shader Asserts Manager provides support for assertions in Shader programs.
            It keeps track of any triggered asserts per frame, and outputs the errors on console and logs.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Core.Systems.SparseUpdateData">
            <summary>
            Class serves to maintain scene data on GPU. It holds the data buffer which represents current state of the scene elements on gpu and allows
            to schedule updates (whole, or struct parts only). Updates are consumed by <see cref="T:Keen.VRage.Render12.PrepareStage.SparseUpdateJob"/>. The whole elements updates are
            safe - duplicates are removed and only the last update for given element is written. The partial updates (called section updates as whole
            sections are written at once) are used for direct writes from DCS jobs of <see cref="N:Keen.VRage.Render12.SceneSystem"/>. They are not checked for duplicates.
            If duplicates are present it is not defined in which order the update will be written.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.ScheduleUpdate``1(System.Int32,``0)">
            <summary>
            Schedules update of the whole structure.
            The update records are check for duplicities - latest value for given position in data buffer is used. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.ReserveSectionUpdate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reserves continuous space for the updates. It is up to the caller to ensure data does not contain duplicities.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.Deallocate(System.Int32,System.Boolean)">
            <summary>
            Annotates a slot to be free inside gpu scene data entities buffer
            </summary>
            <param name="index">Index of freed slot</param>
            <param name="immediate">If true the slots are released and can be again used immediately, if false the slots are freed after
            the next update data flush. This can be used to leave invalidated entities on the GPU for one rendering cycle.</param>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.Deallocate(Keen.VRage.Render12.Resources.Utilities.BufferRange,System.Boolean)">
            <summary>
            Annotates block of slots to be free inside gpu scene data entities buffer
            </summary>
            <param name="range">Range of freed block</param>
            <param name="immediate">If true the slots are released and can be again used immediately, if false the slots are freed after
            the next update data flush. This can be used to leave invalidated entities on the GPU for one rendering cycle.</param>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.Compact">
            <summary>
            Shrinks the size of the buffer to the needed capacity + space defined in GlobalSetup.BUFFER_EXPAND_RATIO
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.SectionWriteToken.TrimAndWrite``1(System.Int32,``0)">
            <summary>
            Section of input is written.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Core.Systems.SparseUpdateData.SectionWriteToken.Write``1(System.Int32,``0)">
            <summary>
            Whole input is written. Expected to be trimmed already.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Core.Systems.Time.AnimationFrameTime">
            <summary>
            AnimationFrame time of the current frame. AnimationFrame time is reset on ResetContext event (between run of the different tests).
            Animation frame id should be used for all systems affecting the visual outcome of the
            frame to ensure deterministic results in testing framework. Eg. water animation
            Therefore there is no guarantee the AnimationFrameTime from current frame is higher than FrameTime from previous frame. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.DebugStage.DebugPassJob.DrawTextures(Keen.VRage.Render12.Core.CommandLists.DirectCommandList,System.Collections.Generic.IEnumerable{Keen.VRage.Render12.Resources.Views.ITexture2DView},System.Nullable{Keen.VRage.Render12.PostProcessStage.CopyJob.PostProcess},Keen.VRage.Render12.PostProcessStage.CopyJob.Channel)">
            <summary>
            Queues rendering of multiple textures to the screen. The textures are placed in a single line along the center of the screen, with a height
            of 256 pixels
            </summary>
            <param name="commandList"></param>
            <param name="textures"></param>
            <param name="preprocess">Type of preprocessing to apply to the image</param>
            <param name="channelFlags">Which channels to show</param>
        </member>
        <member name="T:Keen.VRage.Render12.DebugStage.DebugPassJob.CommonJobSnapshot">
            <summary>
            Common debug pass is used for debugging all shared main view resources (gbuffer, cascades ...), cannot be used with borrowed resources.
            There is <see cref="M:Keen.VRage.Render12.DebugStage.DebugPassJob.CreateSimpleDebugOutput(Keen.VRage.Render12.Core.CommandLists.DirectCommandList,Keen.VRage.Render12.Resources.Views.ITexture2DView,Keen.VRage.Render12.DebugStage.SimpleDebugPassType,System.Nullable{Keen.VRage.Render12.DebugStage.DebugPassSetup})"/> for that.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.DebugStage.DebugPassSetup">
            <summary>
            Parameters affecting the visualization of the debug pass.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.EngineComponents.Render12EngineComponent">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.MessageProcessingSupported">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.SharedData">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.FrameTime">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.InitRenderOptions(Keen.VRage.Core.Render.AdapterInfo@,System.Nullable{Keen.VRage.Render.EngineComponents.ForcedSettings}@)">
            <summary>
            Loads the render options from the storage or creates new one with default values
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.DisposeInternal">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.CreateDevice(System.Nullable{Keen.VRage.Core.Render.RenderDisplaySettings},Keen.VRage.Core.Render.RenderDisplayStrategy,Keen.VRage.Core.Render.IPlatformRender,Keen.VRage.Core.Platform.IPlatformWindows,System.Collections.Immutable.ImmutableArray{Keen.VRage.Core.Render.AdapterInfo}@,Keen.VRage.Core.Render.AdapterInfo@)">
            <summary>
            </summary>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.GetFont(Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Core.Render.FontAsset})">
            <summary>
            Return font handle with the connection to the render font representation
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.IsTextureLoaded(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.Draw(System.Boolean)">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.IRender_Present(Keen.VRage.Render.Device.PresentStats@)">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.AfterUpdate(System.Boolean)">
            <summary>
            </summary>
            <param name="enableOverflowGate"></param>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.Keen#VRage#Render#Device#IRender#CreateShaderCompiler">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.Keen#VRage#Render#Device#IRender#AllocateRenderEntity">
            <summary>
            Allocates entity on the render side and return its unique id
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.Keen#VRage#Render#Device#IRender#BorrowRenderCommandBuffer">
            <summary>
            Allocates new borrowed render command buffer on render side. Used for parallel render batches.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.EngineComponents.Render12EngineComponent.Keen#VRage#Render#Device#IRender#GetCrashState">
            <summary>
            </summary>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.EngineComponents.Render12ObjectBuilder">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Extensions.EngineBuilderExtensions">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.GeometryStage.Passes.HologramPassJob">
            <summary>
            Job used to render holograms
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.GeometryStage.Passes.IndirectEnvironmentPassJob">
            <summary>
            Geometry pass for rendering environment probes 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.AtmosphereConstants.Equals(Keen.VRage.Render12.LightingStage.AtmosphereConstants)">
            <summary>
            Test to see if two atmosphere constants structs are equal
            </summary>
            <param name="other">The other AtmosphereConstants struct</param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.Cascade.GetCascadeSetupRelativeToView(Keen.VRage.Library.Mathematics.MatrixD@)">
            <summary>
            Returns information necessary for sampling shadow map of this cascade, relative to some view. 
            </summary>
            <param name="invViewD">Transformation of the camera used for the rendering.</param>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.Cascade.GetUpdateInfo">
            <summary>
            Returns information necessary for rendering the view of this cascade's shadow map.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.CascadeShadowsMergeJob">
            <summary>
            Cascade shadows merge job is used to copy the content of the more detailed shadow map into the less detailed shadow map.
            Such technique brings more performance as less objects are rendered into further cascades.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.CubeTextureMipMapGenerationJob">
            <summary>
            Generates mip map for the target face of the mip map from the top mip
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.EnvironmentProbeManager">
            <summary>
            Manager for environment probes rooted to the camera. Probes are lazily created in Update when the Enable flag is true.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.EnvironmentProbeManager.PrepareProbes">
            <summary>
            Fills the update requests for environment probes
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.GPUCascadeSetup">
            <summary>
            Data for single cascade sent to the GPU and used for the sampling of shadow maps. For example in <see cref="T:Keen.VRage.Render12.LightingStage.DirectionalLightShadowJob"/>
            and forward passes.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.IndirectAtmosphereJob">
            <summary>
            Used to render atmosphere and skybox into the environment probe
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.TryStreamOutShadowMap">
            <summary>
            Notifies handle it should be streamed out. If it is possible, starts fading out and releasing procedure
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.RefreshShadowMap">
            <summary>
            Notifies handle it should be streamed in. Reverts any fading out.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.RefreshShadowMask">
            <summary>
            Notifies handle it should be streamed in. Reverts any fading out.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.TryReleaseShadowMap(System.Boolean)">
            <summary>
            Tries to remove the streamed resources. Returns true if the release was performed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.TryAttachShadowMapDepthTexture(System.Boolean)">
            <summary>
            Tries to attach depth texture for shadow map. Return false if the depth texture slots are depleted.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.TryAttachShadowMaskDepthTexture(System.Boolean)">
            <summary>
            Tries to attach depth texture. Return false if the depth texture slots are depleted.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.PrepareShadowMapUpdate">
            <summary>
            Marks the handle as eligible for current frame update
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.CollectScheduledUpdateRequests(Keen.VRage.Library.Memory.Buffer{Keen.VRage.Render12.LightingStage.LocalLightsManager.DepthUpdateRequest}@)">
            <summary>
            Appends the information necessary for rendering shadow maps of the handle
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.LightingStage.LocalShadowStreamHandleBase.CollectScheduledUpdateRequests(Keen.VRage.Library.Memory.Buffer{Keen.VRage.Render12.LightingStage.LocalLightsManager.ShadowMaskUpdateRequest}@)">
            <summary>
            Appends the information necessary for rendering shadow mask of the handle
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.LightingStage.MipMapPreFilterJob.SampleQuality">
            <summary>
            Sample count that will be used for pre filtering.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.NamespaceDoc">
            <summary>
            Evolution of today's GPUs and graphics APIs have gone to the point where the rich programmability aspect of GPUs is allowing them to feed
            themselves. Thus, instead of CPU preparing the individual draw commands or instance lists for GPU, the GPU can execute the whole culling,
            instancing and rendering pipeline by itself. The GPU driven pipeline is the centerpiece of the new VRage3 renderer.
            New renderer is also designed to be more flexible in terms of data provided, allowing users to create their own runtime generated meshes and
            materials with custom data and shaders.
            The game will communicate with the render over the data oriented messaging pipe, allowing us to decouple its data processing from the game.
            See <see href="https://docs.google.com/document/u/1/d/1OoKpRKZLyZRn8EwmCzk6Kj3_aZV9xCF40X0116BhUHk/edit">Render12 Overview document</see>
            for more information
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.CopyJob">
            <summary>
            Job that copies from one texture to another, optionally preprocessing the data to be able to perform operations like texture normalization
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.DisplayHDRIntensity">
            <summary>
            Job for displaying hdr intensity with heat map 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.EnvironmentProbeBlending">
            <summary>
            Blend last update env probe with current env probe into final texture 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.FXAAJob">
            <summary>
            Runs FXAA. Important, requires luma in alpha chanel(RGBL) from previous pass
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.ScreenSpaceReflection.ScreenSpaceReflections.DynamicResources">
            <summary>
            Resources that depend on resolution
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.ScreenSpaceReflection.ScreenSpaceReflections.StaticResources">
            <summary>
            Resources that are always the same format, size, etc.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.FSR3_1Context.Native.FfxApiFloatCoords2D">
            A structure encapsulating a 2-dimensional set of floating point coordinates.
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.FSR3_1Resources.FfxApiSurfaceFormat">
            An enumeration of surface formats.
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.FSR3_1Resources.FfxApiResorceUsage">
            An enumeration of resource usage.
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.FSR3_1Resources.FfxApiResourceState">
            An enumeration of resource states.
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.FSR3_1Resources.FfxApiResourceDimension">
            An enumeration of surface dimensions.
        </member>
        <member name="T:Keen.VRage.Render12.PostProcessStage.Upsampling.FSR3.MaximumBias">
            <summary>
            Constants from FSR3 source code
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.CulledGeometrySortJob">
            <summary>
            Culling pass performs culling of the objects into one view
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.CullingGeometryJob">
            <summary>
            Culling pass performs culling of the objects into one view
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.DrawCommandsGenerationJob">
            <summary>
            Generates indirect draw commands and entity instance data for rendering of instanced model entities
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.FoliageCreateInstanceGenCommandsJob">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.FoliageRendering">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.GeometryContext.UpdateRanges(System.Boolean)">
            <summary>
            Updates the expected range of commands for each PSO.
            It reads counters from previous finished frame and based on that it estimates needed range for the future frame.   
            </summary>
            <param name="instanced">Whether or not the geometry context is used for instanced rendering</param>
        </member>
        <member name="F:Keen.VRage.Render12.PrepareStage.ImpostorBakingManager._meshBakingJobs">
            <summary>
            For each material state that is instanced and ray traced we have one mesh baking job.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent">
            <summary>
            Creates impostor meshes and manages their lifetimes. The generated meshes are assigned to the associated <see cref="T:Keen.VRage.Render12.SceneSystem.Components.ImpostorComponent"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.Register(Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent)">
            <summary>
            Track the given root entity component. Calling it multiple times for the same RootEntityComponent has no effect
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.Unregister(Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent)">
            <summary>
            Stops tracking the given root entity component
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.MarkDirty(Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent)">
            <summary>
            Marks the given entity as dirty, meaning that the impostor mesh will be regenerated eventually. <see cref="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.Register(Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent)"/> must be called before
            this method
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.MarkAllRegisteredAsDirty">
            <summary>
            Mark all registered entities as dirty
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.EnableImpostorSwitching">
            <summary>
            Enable impostor switching for all ImpostorComponents, this means impostors will be switched to when the swap criteria is met
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.DisableImpostorSwitching">
            <summary>
            Disable impostor switching for all ImpostorComponents, this means only the original model will be rendered
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.ForceUpdateDistances">
            <summary>
            Force a recalculation of ImpostorComponents' distances. This is useful when the impostor swap distance is changed
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.ImpostorManagerComponent.GenerateBoundingBoxMesh(Keen.VRage.Render.Data.RuntimeMeshData{Keen.VRage.Render.Data.VertexFormat.VertexFormatPositionUV0Packed,Keen.VRage.Render.Data.VertexFormat.VertexFormatNormalTangentPacked,Keen.VRage.Render.Data.VertexFormat.VertexFormatNull}@,Keen.VRage.Library.Mathematics.BoundingBox)">
            <summary>
            Generates a placeholder impostor mesh for the given bounding box
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.ImpostorMesh">
            <summary>
            Impostor is simple 3D model that is used as a replacement for complex model when it is far from the camera or when rendered in raytracing.
            Vertices encodes the PBR material properties and use format <see cref="T:Keen.VRage.Render.Data.VertexFormat.VertexFormatBakedImpostor"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.SparseUpdateJob">
            <summary>
            SparseUpdateJob performs update of the data buffers of all the <see cref="T:Keen.VRage.Render12.Core.Systems.SparseUpdateData"/>s registered in <see cref="T:Keen.VRage.Render12.Core.Systems.SparseUpdateDataManager"/>.
            The update is sparse, only selected elements (or only section of elements) are written.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.PrepareStage.SparseUpdateJob.PrintTracking">
            <summary>
            Conditionally print tracking data. Must be called before DoWork
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.PrepareStage.VertexTransferJob">
            <summary>
            Vertex transfer job serves to bake a vertex buffer for single model entity. Can be used for preparing a vertex buffer for BLAS generation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Primitives.Frame.CameraSettings">
            <summary>
            Setting of the camera relative rendering. This settings assumes the camera is in the origin and all objects have transformations to camera space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings._defaultFovTan">
            <summary>
            Default FOV used for scaling LOD distances.
            Uses 1.22 radian (70 degrees) as it is the default value in TinTin.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.ViewAt0">
            <summary>
            View transformation of the camera it origin. Translation vector is zero, only rotation matrix is used. It rotates the directions
            (normals, light directions) from world space to camera space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.InvViewAt0">
            <summary>
            Inverse view transformation of the camera it origin. Translation vector is zero, only rotation matrix is used. It rotates the directions
            (normals, light directions) from camera space to world space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.Projection">
            <summary>
            Projection matrix of the camera.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.MainViewCameraPos">
            <summary>
            Position of Main View Camera in local view space. Used to get main camera position from shadow views. For main view it would be zero.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.LocalViewToMainViewClip">
            <summary>
            Transforms a point from the local camera view space to main view camera clip space. For main view it's the same as its projection matrix.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.PositionDelta">
            <summary>
            Position delta in comparison with the last frame
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.CameraSpeed">
            <summary>
            Position change in comparison with the last frame
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.DetailLevel">
            <summary>
            The level of detail needed to render using this camera. Hints render systems if they can reduce quality.
            The lowest detail level is 0.0 and the maximum detail level is 1.0
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.FOVScaleFactor">
            <summary>
            Factor based on current FOV setting to scale LOD distances.
            Formula for scale factor is: tan(default_fov / 2.0) / tan(current_fov / 2.0)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.CameraSettings.CameraFlags">
            <summary>
            Various for the camera, including:
            - LastUpdateWasSmooth: Determines if the camera position was updated smoothly during the last update.
            Rests eye adaptation in case camera transition was not smooth
            - CompositeRenderView: Used for shadow masks, when we have to apply a different view matrix during rendering than in culling,
            as for point lights the culling is done with a matrix that contains all of the faces, but for rendering we need the face's matrix
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Primitives.Frame.CameraSettings.op_Explicit(Keen.VRage.Render12.Primitives.Frame.CameraSettings@)~Keen.VRage.Render12.Primitives.Frame.TrackedCameraSettings">
            <summary>
            Creates TrackedCameraSettings from CameraSettings with default screen settings
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Primitives.Frame.PreviousCameraSettings">
            <summary>
            Setting of the camera relative rendering. This settings assumes the camera is in the origin and all objects have transformations to camera space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.PreviousCameraSettings.ViewTransform">
            <summary>
            Previous View transformation of the camera. Used for calculating motion vectors.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.PreviousCameraSettings.InvViewTransform">
            <summary>
            Previous inverted View transformation of the camera (camera position transformation). Used for calculating motion vectors.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Primitives.Frame.TrackedCameraSettings">
            <summary>
            Setting of the camera relative rendering. This settings assumes the camera is in the origin and all objects have transformations to camera space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.TrackedCameraSettings.Camera">
            <summary>
            Information about current frame camera settings
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.TrackedCameraSettings.PreviousCamera">
            <summary>
            Information about previous frame camera settings (used for calculating motion vectors)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Primitives.Frame.TrackedCameraSettings.Screen">
            <summary>
            Resolution and other screen settings for the camera
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Primitives.RenderView">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.Primitives.RenderView.CreateProjectionMatrix(System.Boolean,System.Single)">
            <summary>
            Create a projection matrix that matches this render view
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Primitives.RenderView.CreateJitteredProjectionMatrix(Keen.VRage.Library.Mathematics.Matrix)">
            <summary>
            Creates a jittered projection matrix from the given projection matrix
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Primitives.RenderViewSlim">
            <summary>
            Slim representation of the render view.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.BindableTextures.ResizableRWRenderTargetTexture.Resize(Keen.VRage.Render12.Core.CommandLists.CopyCommandList,Keen.VRage.Library.Mathematics.Vector2I)">
            <summary>
            Resize the texture to a smaller resolution. This is only meant to be used for temporary downscaling (like DRS), recreate the resource otherwise
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.BindableTextures.RWTexture2DArray.Slice">
            <summary>
            Describes one SRV slice of the array. SRVs can cover the entire mip chain of a single texture
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.BindableTextures.RWTexture2DArray.RWSlice">
            <summary>
            Describes one UAV slice AND mip level of the array. UAVs can only cover one mip slice at a time
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.D3DHeapManager.Heap.UnsafeReturnRange_NoUsageOnGPU(Keen.VRage.Render12.Resources.Utilities.BufferRange)">
            <summary>
            The calling is tricky, because it is expected that the resource is not even used on GPU.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.D3DHeapManager.Heap.TryDispose">
            <summary>
            Disposes this heap if all ranges have been returned
            </summary>
        </member>
        <member name="E:Keen.VRage.Render12.Resources.ManagedResources.FileTexture.OnTextureChanged">
            <summary>
            Called when the texture is changed (loaded or mipmap was changed). It is guaranteed to be called from the render thread.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.ManagedResources.ManagedROBufferManager.REQUIRED_ALIGNMENT">
            <summary>
            The alignment of the buffer size.
            It needs to be power of 2.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.ManagedResources.ManagedROBufferManager.MicroBuffer.Free">
            <summary>
            Actual resource dispose.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.ManagedResources.ManagedROBufferManager.MicroChunk.Free">
            <summary>
            Actual resource dispose.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Models.AssetModel">
            <summary>
            Asset model serves to handle logic and store data of models loaded from files. It supports multiple lods.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Models.LOD">
            <summary>
            LOD class represents single level of detail of the model. Each lod has unique vertex and index buffers.
            LOD can be divided into several <see cref="T:Keen.VRage.Render12.Resources.Models.SubPart"/>, each with own material.   
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.LOD.VertexStream0">
            <summary>
            Index of the bindless vertex buffer for Vertex stream 0.
            Vertex stream 0 is used for position and optionally other necessary attributes for depth - texture coordinates and bones 
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.LOD.VertexStream1">
            <summary>
            Index of the bindless vertex buffer for Vertex stream 1.
            Vertex stream 1 is used for normals,tangents and optionally second pair of texture cooordinates
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.LOD.VertexStream2">
            <summary>
            Index of the bindless vertex buffer for Vertex stream 2.
            Vertex stream 2 is used for color information
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.LOD.Bones">
            <summary>
            Skeleton of the LOD. Used for animating the model. TODO: move skeleton to the shared stub
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.Model.Bones">
            <summary>
            Skeleton of the LOD. Used for animating the model.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Models.Model.GetLODIndexForDistance(System.Single)">
            <summary>
            Return LOD for given distance
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Models.Model.Handle">
            <summary>
            Serves to track the usage (for preventing removal of used model)
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Models.ModelManager">
            <summary>
            Model manager serves to provide asset and runtime models, owns them and offers group actions like reloading. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Models.ModelManager.MinLoadingLOD">
            <summary>
            Used to skip loading of the most detailed model LODs for lower game graphics settings
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.PipelineStates.ComputePSO.FreeResources">
            <summary>
            Frees DirectX resources. For internal use only.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.PipelineStates.GraphicsPSO.FreeResources">
            <summary>
            Frees DirectX resources. For internal use only.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.PipelineStates.RayTracingPSO.FreeResources">
            <summary>
            Frees DirectX resources. For internal use only.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.GlobalShaderVariants.GetAllInternalVariants(Keen.VRage.Render12.Resources.Shaders.ShaderDescription)">
            <summary>
            Returns all the variants of the shaders used for internal logic of the render
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Resources#Shaders#ShaderCacheMetadata}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderCacheMetadata.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderCommon">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderCompiler">
            <summary>
            Implementation of <see cref="T:Keen.VRage.Render.Utils.IShaderCompiler"/> used by ShaderBuilder. Provides functionality for compiling particular shaders. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCompiler.CompileAsync(Keen.VRage.Render.Materials.MaterialStateDefinition,System.Boolean,System.Boolean)">
            <summary>
            Compiles all shader variants for the given material state. Variants are created from the options specified in the material state, pass types,
            tessellation on/off, and global material states
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderCompiler.CompileAsync(Keen.VRage.Render.Utils.ShaderFileHandle,System.Boolean)">
            <summary>
            Compiles all shader variants for the given shader program. The variants are created from combinations of the @define and @defineMandatory
            definitions in the shader file
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.EntryFunctionAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderModel}#Set(System.Object,Vortice.Dxc.DxcShaderModel@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderModel}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderModel}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderModel}#Set(System.Byte@,Vortice.Dxc.DxcShaderModel@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@,Vortice.Dxc.DxcShaderModel@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions.TypeInfoHolder.ShaderModelAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Resources#Shaders#ShaderDescription}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Set(System.Object,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Set(System.Byte@,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._handleAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Set(System.Object,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Set(System.Byte@,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._definesAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Set(System.Object,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Set(System.Byte@,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder._customOptionsAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Set(System.Object,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Utils#ShaderFileHandle}#Set(System.Byte@,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Render.Utils.ShaderFileHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.HandleAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Set(System.Object,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render#Data#ShaderDefine[]}#Set(System.Byte@,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,Keen.VRage.Render.Data.ShaderDefine[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.DefinesAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Set(System.Object,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription#CompilationOptions?}#Set(System.Byte@,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@,System.Nullable{Keen.VRage.Render12.Resources.Shaders.ShaderDescription.CompilationOptions}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderDescription.TypeInfoHolder.CustomOptionsAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderFileCacheManager.ShaderFileCacheDisposal">
            <summary>
            Manages correct lifetime of includes on tasks and the user recompilation request.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderHandles">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderManager">
            <summary>
            Safe-thread shader manager, that might require to cleanup shader cache whenever the shader option for compilation has been changed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderManager.GetBytecodeAsyncRaw(Keen.VRage.Render12.Resources.Shaders.ShaderDescription,Vortice.Dxc.DxcShaderStage,System.Boolean)">
            <summary>
            Should only be used internally by the <see cref="T:Keen.VRage.Render.Utils.IShaderCompiler"/>. Otherwise, use <see cref="M:Keen.VRage.Render12.Resources.Shaders.ShaderManager.GetBytecodeAsync(Keen.VRage.Render12.Resources.Shaders.ShaderDescription,Vortice.Dxc.DxcShaderStage,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderManager.BuildValidationFileData(Keen.VRage.Render.Utils.ShaderFileHandle@,Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="builder"></param>
            <returns>Error message.</returns>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderManager.Key">
             <summary>
             Key to the shader cache.
            
             If the shader file is generated, shader description is not good
             distinguisher of redundancy. In this case, description is ignored
             and the generated source is used instead.
             </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderManager.Key.AlmostEquals(Keen.VRage.Render12.Resources.Shaders.ShaderManager.Key)">
            <summary>
            Check whether keys are equal except UserHandlesError.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderModelSerializer">
            <summary>
            Serializes <see cref="T:Vortice.Dxc.DxcShaderModel"/>. Used in <see cref="T:Keen.VRage.Render12.Resources.Shaders.ValidationData"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Resources#Shaders#ShaderPBDMetadata}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ShaderPBDMetadata.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Render12#Resources#Shaders#ValidationData}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.MagicAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription}#Set(System.Object,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Render12#Resources#Shaders#ShaderDescription}#Set(System.Byte@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,Keen.VRage.Render12.Resources.Shaders.ShaderDescription@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.DescriptionAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderStage}#Set(System.Object,Vortice.Dxc.DxcShaderStage@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderStage}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderStage}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Vortice#Dxc#DxcShaderStage}#Set(System.Byte@,Vortice.Dxc.DxcShaderStage@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,Vortice.Dxc.DxcShaderStage@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.StageAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ContentAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IsSoftwareAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.EnableShaderOptimizationsAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Byte[]}#Set(System.Object,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Byte[]}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Byte[]}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Byte[]}#Set(System.Byte@,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.ShaderChecksumAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Render#Utils#ShaderFileHandle}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.Render.Utils.ShaderFileHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Render#Utils#ShaderFileHandle}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Render#Utils#ShaderFileHandle}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Render#Utils#ShaderFileHandle}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.Render.Utils.ShaderFileHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.Collections.Generic.List{Keen.VRage.Render.Utils.ShaderFileHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#Byte[]}}#Set(System.Object,System.Collections.Generic.List{System.Byte[]}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#Byte[]}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#Byte[]}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#Byte[]}}#Set(System.Byte@,System.Collections.Generic.List{System.Byte[]}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Set(Keen.VRage.Render12.Resources.Shaders.ValidationData@,System.Collections.Generic.List{System.Byte[]}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Shaders.ValidationData.TypeInfoHolder.IncludesChecksumsAccessor.Get(Keen.VRage.Render12.Resources.Shaders.ValidationData@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.Resources.StateResolver.AutoResourceState.RequestState(Keen.VRage.Render12.Core.Device.CommandQueueType,System.UInt64,Vortice.Direct3D12.ResourceStates,System.Int32,System.Int32,Vortice.Direct3D12.ResourceStates@)">
            <summary>
            
            </summary>
            <param name="commandQueueType"></param>
            <param name="requestId"></param>
            <param name="stateAfter"></param>
            <param name="replayedCommandListIndex"></param>
            <param name="globalReplayedActionIndex"></param>
            <param name="stateBefore"></param>
            <returns>Resource state change is needed. The user is responsible to call D3D12 for the transition.</returns>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Textures.CubeTextureUtils">
            <summary>
            Helpers for cube textures
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Textures.CubeTextureUtils.GenerateCubeMapView(Keen.VRage.Render12.Primitives.RenderViewSlim@,System.Int32)">
            <summary>
            Creates a view for a cube map face
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Textures.CubeTextureUtils.GenerateCubeMapViewAtPosition(Keen.VRage.Library.Mathematics.Vector3D,System.Int32)">
            <summary>
            Generates cube map view matrix at given position
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Textures.DDSBodyLoader">
             <summary>
             Helper object with loading of the body of the dds format.
            
             DDSHelper contains most of the general use functionality, while this class contains the functionality dependent on DX12.
             </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Textures.DDSBodyLoader.Is3DArray(Keen.VRage.Render.Textures.DXGIImageHeader)">
            <summary>
            Check if the given ImageHeader is a 3D array. Used for sanity checking
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Textures.ImageBody">
            <summary>
            Raw memory split to slices (texture faces in cube map and individual mipmaps).
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Textures.ImageSharp">
             <summary>
             Image loader from png and jpg file format.
            
             The user needs to specify file handle that contains picture data.
             The file data is loaded in async way and if they are successfully loaded,
             the processed data are provided to the user in the ImageSharp instance.
             D3D12 friendly data are provided together with the description in the instance.
             </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Utilities.BufferRange.Start">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Utilities.BufferRange.Count">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Utilities.ClearableUavBuffer`1">
            <summary>
            Class serves to wrap UAV buffer together with reset and readback functionality.  
            </summary>
            <typeparam name="T">Type of elements in UAV buffer</typeparam>
        </member>
        <member name="T:Keen.VRage.Render12.Resources.Utilities.ExpandableUploadTexture">
            <summary>
            Expandable texture is upload type texture with fixed columns and varying number of rows.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Resources.Utilities.ResourceObjectPool.PumpDispose">
             <summary>
             Dispose all resources that should be disposed.
            
             Beware, this call should be called only during the renderer disposal, when it is clear
             that no gpu resources are used anymore. Otherwise, it might lead to gpu crashes.
             </summary>
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Utilities.ResourceObjectPool.PoolHelper`1.Allocator.IsDisposable">
            The dispose is used non-standard way in Render12 resource, therefore ignore it.
        </member>
        <member name="P:Keen.VRage.Render12.Resources.Utilities.SimpleObjectPool.PoolHelper`1.Allocator.IsDisposable">
            The dispose is used non-standard way in Render12 resource, therefore ignore it.
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Utilities.StatManager.PrecisionData.VSyncMode">
            <summary>
            VSync mode.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Utilities.StatManager.PrecisionData.IsDeveloperModeEnabled">
             <summary>
             Is developer mode enabled?
            
             If it is not set, the stable power state is not set.
             </summary>
        </member>
        <member name="F:Keen.VRage.Render12.Resources.Utilities.StatManager.PrecisionData.IsSetStablePowerState">
             <summary>
             Is stable power state set?
            
             If it is set, the gpu profiling is much more reliable, but GPU is slower overall.
             Stat is not reliable.
             </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Builders.CompositeBuilder">
            <summary>
            Base class for all EntityComposite builders with thread-safe entity building.
            To implement specific EntityComposite builder the custom Build function ,filling the object builder array, must be implemented.  
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.AreaLightEntityComponent.Touch">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.CapsuleLightEntityComponent.Touch">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ChildBoundsComponent">
            <summary>
            ChildBoundsComponent is responsible for tracking the entity bounds and notifying the root about the changes.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ChildComponent">
            <summary>
            This component serves as connection to scene two-level hierarchy.
            It registers itself into parent and has local newRoot-relative transformation. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ChildResourceStreamingComponent">
            <summary>
            This component serves as a proxy between the entity and the ResourceStreamingComponent, as it notifies the root
            entity of any changes to the child's resources, so root-level resource streaming can be handled correctly.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.CullCapacityTrackingComponent">
            <summary>
            Cull capacity group tracking component is used to track material states and entity proxies used by all the children of the root entity.
            Child entities' <see cref="T:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent"/> and <see cref="T:Keen.VRage.Render12.SceneSystem.Components.EntityProxyTrackingComponent"/> are used to track the usage per
            entity and reporting it to the <see cref="T:Keen.VRage.Render12.SceneSystem.Components.CullCapacityTrackingComponent"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.AddDecal(Keen.VRage.Library.Utils.RenderId,System.String,Keen.VRage.Core.RelativeTransform,Keen.VRage.Render.Materials.Decals.DecalMaterialDefinition,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Utils.RenderId,Keen.VRage.Render.Materials.DecalFalloff,System.Nullable{System.Int32})">
            <summary>
            Add a decal to the scene. If budgetIndex is null, the decal will be considered persistent and it is up to the user to remove it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.DestroyDecal(Keen.VRage.Library.Utils.RenderId)">
            <summary>
            Removes _and untracks_ the given decal
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.Tick">
            <summary>
            Destroy any decals that have faded out
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.TrackDecal(System.Int32,Keen.VRage.Library.Utils.RenderId)">
            <summary>
            Place a decal into a budget
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.UntrackDecal(Keen.VRage.Library.Utils.RenderId)">
            <summary>
            Remove a decal from its budget. Fails if the given decal is not in any budget
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.DecalSystemComponent.Budget">
            <summary>
            Container for decals within a budget
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent">
            <summary>
            DistanceTagManagerComponent is responsible for assigning a tag based on the distance from the camera.
            The tag is implemented by using the SetData DCS call, so that the distance tier can be used in job's annotation
            to control the execution of a job through the data contract system that our DCS provides.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.Distances.ToMainCamera">
            <summary>
            Distance to main camera in meters.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.OnUpdateRootEntityStreamingTag(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Core.WorldTransform,Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent.LocalBoundsData,Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.Distances,Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Render12.SceneSystem.Components.ResourceStreamingComponent.StreamingTag})">
            <summary>
            Runs over all RootEntity that should manage the StreamingTag based on distance for it and it's children.
            Thanks to which we calculate streaming priorities on child-level only when the root is close enough to the camera
            and otherwise gather all of the resources used by the children and calculate a single priority on the root.
            </summary>
            <param name="ent">The root entity</param>
            <param name="worldTransform">Root entity's transform</param>
            <param name="boundsData">Bounds data of the root entity</param>
            <param name="distances">Distances to Observers</param>
            <param name="streamingTag">Control streaming resource priorities calculation</param>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.OnUpdateRaytracingTag(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Core.WorldTransform,Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent.LocalBoundsData,Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.Distances,Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Render12.SceneSystem.Components.RootRaytracingComponent.UpdateRaytracingNearTag},Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Render12.SceneSystem.Components.RootRaytracingComponent.UpdateRaytracingFarTag})">
            <summary>
            Runs over all RootEntity that should manage the UpdateRaytracingTag of its children and disables it if the root entity is further than the Scene Far Distance setting.
            </summary>
            <param name="ent">The root entity</param>
            <param name="worldTransform">Root entity's transform</param>
            <param name="boundsData">Bounds data of the root entity</param>
            <param name="distances">Distances to Observers</param>
            <param name="raytracingNearTag">Control raytracing rendering in children that should render only when nearer than near distance</param>
            <param name="raytracingFarTag">Control raytracing rendering in children that should render when nearer than far distance</param>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.DistanceTagManagerComponent.SwapDistanceTag``2(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.EntityData{``0},Keen.VRage.DCS.Accessors.EntityData{``1},System.Single,System.Single)">
            <summary>
            Swaps between two tags based on distance, making sure there is always one, and only one, of them present.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.EntityDebugDrawManagerComponent">
            <summary>
            Manager responsible for switching debug draw globally on all the entities based on the <see cref="T:Keen.VRage.Render.Data.DebugSettings"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent">
            <summary>
            EntityMaterialsComponent is responsible for managing materials of an entity.
            It stores the user changes for entity materials, material state overrides. It schedules the updates of <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUMaterialProxy"/>
            data for entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent.OnMaterialSetChanged">
            <summary>
            Callback called when the materials are reloaded - new session, in editor during reprocessing or when shaders are reloaded
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent.Keen#VRage#Library#Utils#INamedEventListener{Keen#VRage#Render12#Resources#Models#Model#ModelChangeEventSource}#OnEvent">
            <summary>
            Callback called when model is loaded or reloaded  
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent.OnMaterialsChanged">
            <summary>
            Signal sent when the materials has changed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent.OnMaterialRangeChanged">
            <summary>
            Signal sent when the range of needed material proxies has changed - for example when the model is reloaded.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent.ModelMaterialData">
            <summary>
            Material data used by current model, the lenght of the buffers is equal to the number of material slots of the model.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.FadeComponent">
            <summary>
            Component allows user to animate opacity of the <see cref="T:Keen.VRage.Render.Contracts.ModelEntity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent">
            <summary>
            Interface providing the <see cref="T:Keen.VRage.Render12.LightingStage.LocalLightsManager"/> - <see cref="N:Keen.VRage.Render12.SceneSystem.Components"/> communication.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.PrimaryView">
            <summary>
            Returns primary view definition of the shadow. For spot and area its the projection view of the shadow map, for point and capsule light its
            the view in forward direction of the cube map. The projection matrix is shared for all the cube map sides.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.ShadowMaskCullingView">
            <summary>
            Projection matrix used to cull the entities for shadow mask. For point lights, it's an orthographic projection that covers all faces
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.RootEntityId">
            <summary>
            Id of the root this light is attached to. Used to only consider entities that are attached to the same root during culling.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.NeedShadowMapUpdate">
            <summary>
            Returns true whether the surroundings around the light changed => whether new shadow map needs to be generated 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.NeedShadowMaskUpdate">
            <summary>
            Returns true whether the surroundings around the light changed => whether new shadow mask needs to be generated 
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.PrepareShadowMapUpdate">
            <summary>
            Performs necessary steps to update the shadow map this frame.
            Must be called inside scene tick during <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.RenderUpdateOrder.ShadowStreaming"/>>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.PrepareShadowMaskUpdate">
            <summary>
            Performs necessary steps to update the shadow map this frame.
            Must be called inside scene tick during <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.RenderUpdateOrder.ShadowStreaming"/>>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.SetShadowMapDepthTexture(System.Int32)">
            <summary>
            Attaches shadow map depth texture to the light, if the index == <see cref="F:Keen.VRage.Render12.SceneSystem.GPU.GPUSceneManager.INVALID_GPU_INDEX"/> the depth texture is removed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.SetShadowMaskDepthTexture(System.Int32)">
            <summary>
            Attaches shadow map depth texture to the light, if the index == <see cref="F:Keen.VRage.Render12.SceneSystem.GPU.GPUSceneManager.INVALID_GPU_INDEX"/> the depth texture is removed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.FadeInShadowMap(System.TimeSpan)">
            <summary>
            Starts fade in animation of the shadow map
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.FadeOutShadowMap(System.TimeSpan)">
            <summary>
            Starts fade out animation of the shadow map
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.FadeInShadowMask(System.TimeSpan)">
            <summary>
            Starts fade in animation of the shadow map
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.ILocalShadowComponent.FadeOutShadowMask(System.TimeSpan)">
            <summary>
            Starts fade out animation of the shadow map
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ImpostorComponent">
            <summary>
            Holds an impostor mesh and switches to it when the camera's distance is far enough. The original mesh is hidden when the impostor is visible.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ImpostorComponent.ImpostorDistanceControlTag">
            <summary>
            Tag to signal that this component should receive Near and Far tags
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ImpostorComponent.NearDistanceTag">
            <summary>
            The camera's distance is "near". The normal mesh will be rendered
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ImpostorComponent.FarDistanceTag">
            <summary>
            The camera's distance is "far". The impostor mesh will be rendered
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.LightEntityComponent.Touch">
            <summary>
            Forces the light reupload
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.PointLightEntityComponent.Touch">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.Components.ResourcePinEntityComponent.ImageType.Bitmap">
            <summary> Image is a bitmap of any of the supported types -> .png, .dds </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.Components.ResourcePinEntityComponent.ImageType.Vector">
            <summary> Image is a vector in the native slug format -> .slug </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ResourceStreamingComponent.FastDistanceData">
            <summary>
            The structure for faster access to the data in <see cref="T:Keen.VRage.Render12.SceneSystem.Components.ResourceStreamingComponent.DistanceData"/>.
            There is clear difference in the measurements between iterating over raw pointers and buffers.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.ResourceStreamingComponent.StreamingTag">
            <summary>
            Tag added to entities that should calculate the streaming priorities of the resources that they use.
            This tag can be added or removed from entity if the streaming priorities are handled elsewhere,
            for example in the root entity (happens when the root entity is far away from the camera
            and it'd be wasteful to calculate the streaming priorities on child level)
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent.UpdateTransform(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Core.WorldTransform@)">
            <summary>
            Update transform method is implementation of IRootEntity interface and as a such it is exposed through RenderContracts to a game.
            The static notation informs the DCS system that this method should be called in data oriented way - OPTIMIZATION hack - it disallows
            usage of signals
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.RootResourceStreamingComponent">
            <summary>
            This component is used on the RootEntity to control the granularity at which resource streaming priorities
            are handled. Further from the camera, resources are prioritized (priority is calculated based on distance)
            on the root entity level and on child level when the camera gets close to the root.
            This system relies on the DistanceTagManagerComponent (CoreSystems.ChildLevelStreamingTagManager), that based on
            distance assigns or removes the ChildLevelStreamingTag that indicates that streaming should be handled on child level.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.Components.RootResourceStreamingComponent.RootStreamingDistance">
            <summary>
            Distance after which we switch streaming to happen on root level
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.RootResourceStreamingComponent.ProcessResourceUpdates">
            <summary>
            Processes resource updates done this frame and update the ResourceStreamingComponent with new data
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.RootShadowsObserverComponent.NotifyShadowsNeedUpdate">
            <summary>
            Called from the child entity when the visual appearance of an entity has changed.
            Addition/removal is handled by this component by listening to add/remove child callback from the root,
            but any visual changes to the geometry (deformation etc) need to routed to this component by the child.  
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Components.SkinnableComponent">
            <summary>
            Skinnable component allows user to sent absolute bone transforms for an animated model.
            Skeleton is automatically taken from a model.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Components.SpotLightEntityComponent.Touch">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUEntityFlags">
            <summary>
            Flags of the GPU Object used to control behaviour of instancing and culling algorithms
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUEntityProxy.PreviousTransform">
            <summary>
            Transformation of the object relative to the parent <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUEntityProxy.ProxyInfo">
            <summary>
            Composition of GPUEntityFlags(16bits) and GPUEntityProxyType (4bits). The rest (12bits) is available for future use. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUFlare.GPUSubGlare">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUFoliage.ModelId">
            <summary>
            Index of the model used for foliage instance generation. <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModel" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUFoliage.Opacity">
            <summary>
            Opacity of the component />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUFoliage.LODMultiplier">
            <summary>
            LOD based multiplier used to skip instances that are further away from the camera />
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity">
            <summary>
            Represents render entity <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity" /> that supports model instancing.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.ModelId">
            <summary>
            Index of the model used for rendering. <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModel" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.ObjectMaterialsStart">
            <summary>
            Index to the material buffer where consecutive block of materials for this object starts. Multiple objects (instances using same mesh)
            can share same material block.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.EntityCustomDataId">
            <summary>
            Index of custom entity data
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.InstanceBufferIndex">
            <summary>
            Index to the instance buffer where consecutive block of instance data for this object starts.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.InstanceCount">
            <summary>
            The total number of instances that should be rendered per draw. Should match with instance buffer size.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.RenderState">
            <summary>
            Rendering flags altering culling and instancing behaviour of the object + Opacity
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.LastVisibleFrame">
            <summary>
            Frame number when the model entity was visible for the last time by the main camera.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.LODdingState">
            <summary>
            Composed lodding state of the entity in order: CurrentLOD (4bits), TransitionLOD (4bits), TransitionProgress (12bits)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.BBCenter">
            <summary>
            The center position of the bounding box containing all instances.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUInstancedModelEntity.GPU_RW_STATE_START">
            <summary>
            GPUModelEntity is divided into two sections, first section is readonly on GPU
            and the second one is read-write and reserved for entity's state updated on GPU. This value marks the start of the second part.
            Note: correctness of this value is checked by unit test VRage.Render12.Tests.LayoutTests.cs
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUMaterialProxy">
            <summary>
            GPUMaterialProxy serves to provide information about GpuObject's materials during culling and instancing step.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUMaterialProxy.ParametersId">
            <summary>
            Index into Material States's <see cref="F:Keen.VRage.Render12.SceneSystem.GPU.GPUMaterialProxy.MaterialStateId" /> material parameters buffer.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUMeshSection">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModel">
            <summary>
            GpuModel represents sets of meshes divided into multiple level of details. The GpuModel has volume (represented as bounding box),
            which is used in culling step.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModel.LODs">
            <summary>
            Each LOD's submeshes are located in consecutive block inside Submeshes buffer.
            LODs contains ranges for each of Mesh LOD's block of submeshes as well as information when to use particular LOD
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModel.BBMin">
            <summary>
            Bounding box minimum. Volume is shared for all the LODs and is mainly used for culling operations.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModel.BBMax">
            <summary>
            Bounding box maximum. <see cref="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModel.BBMin" />
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity">
            <summary>
            Gpu Object represents entity which is renderable - meaning it has mesh, materials, volume (based on the mesh) and transform
            (relative to the <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity" />).
            It is basic entity used for the culling step, each gpu thread is computing one such gpu object.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.ParentId">
            <summary>
            Index of the parent <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.ModelId">
            <summary>
            Index of the model used for rendering. <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModel" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.ObjectMaterialsStart">
            <summary>
            Index to the material buffer where consecutive block of materials for this object starts. Multiple objects (instances using same mesh)
            can share same material block.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.RenderState">
            <summary>
            Rendering flags altering culling and instancing behaviour of the object + Opacity
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.PreviousTransform">
            <summary>
            Transformation of the object relative to the parent <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.Transform">
            <summary>
            Transformation of the object relative to the parent <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.EntityCustomDataId">
            <summary>
            Index to entity custom data. <see cref="T:Keen.VRage.Render.Materials.EntityCustomData"/>.
            Can be GPU_INVALID_INDEX if no custom data are present.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.BoneTransformsStart">
            <summary>
            Index of the first bone transform of the model entity. All entity's bone transforms are in consecutive block.
            Can be GPU_INVALID_INDEX if no bones are attached to the model entity.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.PreviousBoneTransformsStart">
            <summary>
            Same as BoneTransformsStart, but the previous frame's values <see cref="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.BoneTransformsStart"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.LastVisibleFrame">
            <summary>
            Frame number when the model entity was visible for the last time by the main camera.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.LODdingState">
            <summary>
            Composed lodding state of the entity in order: CurrentLOD (4bits), TransitionLOD (4bits), TransitionProgress (12bits)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity.GPU_RW_STATE_START">
            <summary>
            GPUModelEntity is divided into two sections, first section is readonly on GPU
            and the second one is read-write and reserved for entity's state updated on GPU. This value marks the start of the second part.
            Note: correctness of this value is checked by unit test VRage.Render12.Tests.LayoutTests.cs
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModelSections">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity">
            <summary>
            Gpu Parent represents non renderable entity which serves to group and transform objects <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity" />. GpuParent in oppose to
            GpuObject
            has double precision transformation. To properly support wast distances the gpuObjects should be attached to the GpuParent.
            There is default GPUParent created upon game start with origin at zero and no rotation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity.Transform">
            <summary>
            Double precision transformation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity.PreviousTransform">
            <summary>
            Double precision transformation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPURootEntity.RenderState">
            <summary>
            Rendering flags altering culling and instancing behaviour of the root children
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUSceneManager">
            <summary>
            GPUSceneManager serves to manage GPU living scene structures, their creation, conversion from cpu living structures
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.GPUSubPart">
            <summary>
            GPUSubMesh represents one individually renderable mesh. It contains references to the vertex and index buffers along with information about material
            used.
            Each <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModel" /> can have multiple subMeshes splitted into up to 4 LODs.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUSubPart.ObjectMaterialId">
            <summary>
            ObjectMaterialId is the offset to the range of the <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUMaterialProxy" /> buffer block allocated and used by the
            <see cref="T:Keen.VRage.Render12.SceneSystem.GPU.GPUModelEntity" />
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.BBMin">
            <summary>
            Bounding box minimum. In world space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.OctreeChildDataBufferIndex">
            <summary>
            Index of the octree children array used for rendering.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.BBMax">
            <summary>
            Bounding box maximum. In world space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.OctreeRenderDataBufferIndex">
            <summary>
            Index of the octree render data array used for rendering.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.OctreeNodeCount">
            <summary>
            The number of nodes in the octree.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.PlanetCenter">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.PlanetRadius">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.SpherizationStart">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.SpherizationRange">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.SpherizationScale">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.Transform">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.GPU.GPUWaterRenderEntity.Scale">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.GPU.IndirectFoliageInstanceGenCommand">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Jobs.FrameDistributedJobAttribute">
            <summary>
            Used to annotate a job that would be ran with <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.FrameDistributedJobContext"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Jobs.FrameDistributedJobContext">
            <summary>
            Job context providing a spread of work across multiple frames. Each bucket is processed every N frames.
            It is not guaranteed that job will run on each entity every N frames as entities can move between buckets.
            The context is used by annotation a job with <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.FrameDistributedJobAttribute"/>. Each job has own context instance.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Jobs.SectionUpdateJobContext">
            <summary>
            SectionUpdateJobContext allows render entities with it's GPU counterparts to directly writes to the update buffer.
            For each warp of the job the space in update buffer of <see cref="T:Keen.VRage.Render12.Core.Systems.SparseUpdateData"/> is reserved and each invocation of the job can directly
            write the content.
            The instance of this context is determined by <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.SectionUpdateJobAttribute"/> attached to the Job method in <see cref="T:Keen.VRage.Render12.SceneSystem.Jobs.SceneJobContextBuilder"/>.  
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.CullCapacityTrackingManagerComponent">
            <summary>
            Manager tracks the usage of the material states and entity proxies by main view.
            The usage is tracked using entity components <see cref="T:Keen.VRage.Render12.SceneSystem.Components.EntityMaterialsComponent"/>, <see cref="T:Keen.VRage.Render12.SceneSystem.Components.EntityProxyTrackingComponent"/>
            and <see cref="T:Keen.VRage.Render12.SceneSystem.Components.CullCapacityTrackingComponent"/>.
            The information is used to drive the capacity of the culling output for the main view.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.Materials.InstanceInfo.MaterialDataIndex">
            <summary>
            Index into a buffer of the material parameters data
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialsManager.ReUploadMaterial``1(``0)">
            <summary>
            Updates the parameters of the existing material. Useful when some parameters
            are calculated at runtime (e.g. parallax step size depending on quality settings).
            This allows us to keep the same index for the material and not call <see cref="F:Keen.VRage.Render12.SceneSystem.Materials.MaterialsManager.OnMaterialsChange"/>
            like <see cref="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialsManager.ChangeMaterial``1(``0)"/> does. 
            </summary>
            <param name="materialInstance"></param>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialsManager.GetMaterialInstance(System.Guid,Keen.VRage.Render12.Resources.Models.Model,System.Type,System.Type,Keen.VRage.Library.Memory.MapReference{System.Guid,System.Guid})">
            <summary>
            Returns the renderable material instance records for given material instance definition. If the material instance is not compatible the
            error material is returned. In case no error material for given model is available, the null is returned a the geometry cannot be rendered.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateHandle">
            <summary>
            Handle allowing to work with the <see cref="T:Keen.VRage.Render.Materials.MaterialStateDefinition"/>>.
            It's main purpose is to encompass compilation and compilation results info for multiple <see cref="T:Keen.VRage.Render12.SceneSystem.Materials.MaterialStatePassHandle"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateHandle.ResetCachedInfo">
            <summary>
            Resets cached info to properly react on recompilation
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateModifiers">
            <summary>
            Internal structure that holds all the modifiers that can change the state of the material.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.MaterialStatePassHandle">
            <summary>
            MaterialStatePassHandle manages the compilation of the pso variants for a specific pass of the <seealso cref="T:Keen.VRage.Render.Materials.MaterialStateDefinition"/>.
            Handle manages compilation of several PSOs, based on the <seealso cref="T:Keen.VRage.Render.Materials.MaterialStateDefinition"/>'s
            <see cref="T:Keen.VRage.Render.Materials.MaterialStateOptionsDefinition"/> and <see cref="T:Keen.VRage.Render.Materials.MaterialDebugViewDefinition"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateVariants">
            <summary>
            Helper static class providing logic of generating shader program variants and pso variants for materialState.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateVariants.GetDefaultModifiers(Keen.VRage.Render.Materials.MaterialStateDefinition)">
            <summary>
            Returns the set of modifiers used in the common rendering paths
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateVariants.GetShaderProgram(Keen.VRage.Render.Materials.MaterialStateDefinition,Keen.VRage.Render12.SceneSystem.PassType,Keen.VRage.Render12.SceneSystem.Materials.MaterialStateModifiers)">
            <summary>
            Verifies that the given combination of parameters is valid and creates a material state from it
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateVariants.GetShaderDefines(Keen.VRage.Render.Materials.MaterialStateDefinition,Keen.VRage.Render12.SceneSystem.PassType,Keen.VRage.Render12.SceneSystem.Materials.MaterialStateModifiers)">
            <summary>
            Creates the expected array of shader defines. Make sure to use the method overload for raytracing shaders
            </summary>
            <param name="materialState"></param>
            <param name="passType"></param>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.Materials.MaterialStateVariants.IterateOptions(Keen.VRage.Render.Materials.MaterialStateDefinition)">
            <summary>
            Iterates over all possible combinations of options for the given material state. Always returns the "nothing" combination, even if there are no options.
            </summary>
            <returns>an array where each element at index i corresponds to a variant of the option at materialState.Options[i]</returns>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.Materials.PSOVariant">
            <summary>
            Wrapper for pipeline state of one material PSO variant.
            Will be updated once resource system is finished - SE2-2209
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.PassType">
            <summary>
            Type of the target pass. <see cref="T:Keen.VRage.Render12.SceneSystem.PassGroupType"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.FixedRayTracingInstanceDescription">
            <summary>
            DXR structure for ray tracing indices
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingAssertInfo">
            <summary>
            Scene size parameters for ray tracing.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingBLASManager">
            <summary>
            Management of BLAS objects
            </summary>
            <remarks>
            Scene contains default root. All the "child" entities are initially attached to this root.
            </remarks>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingBLASManager._pendingModelEntityLODsForBLASCreation">
            <summary>
            List of LODs for which we are creating BLAS in current frame. In the next frame UAV barrier will be set on all of them and this list reseted.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingBLASManager._pendingBakedImpostorsForBLASCreation">
            <summary>
            Instanced model entity's LOD that need BLAS creation. These will be created in one of the following frames
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingBLASManager.DoBLASJobForModelEntities(Keen.VRage.Render12.Core.CommandLists.ComputeCommandList,System.Int32@)">
            <summary>
            Finalizes BLAS object for each LOD (all sub-parts) that were scheduled in the previous frame.
            It just sets UAV barrier on all of them.
            </summary>
            <param name="commandList"></param>
            <param name="allowedCount">How many instances can be created in this frame</param>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingInstanceData">
            <summary>
            RayTracingInstanceData contains 
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingInstancedModelEntity">
            <summary>
            Ray tracing version of model entity
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingModelEntity">
            <summary>
            Ray tracing version of model entity
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingPointLight">
            <summary>
            Ray tracing version of point
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager">
            <summary>
            Ray tracing representation of the scene. 
            </summary>
            <remarks>
            Scene contains default root. All the "child" entities are initially attached to this root.
            </remarks>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager._modelEntities">
            <summary>
            Ray tracing model entities used for creation of TLAS instance descriptions (that has appropriate LOD/BLAS selected)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager._instancedModelEntities">
            <summary>
            Ray tracing instanced model entities used for creation of TLAS instance descriptions. In initialization step, a custom mesh will be generated for it.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager._pointLightEntities">
            <summary>
            Ray tracing point lights used to generate point light imposters and add them to TLAS instance descriptions. In initialization step, a custom mesh will be generated for it.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager._spotLightEntities">
            <summary>
            Ray tracing spot lights used to generate spot light imposters and add them to TLAS instance descriptions. In initialization step, a custom mesh will be generated for it.
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager._tlasBuffers">
            <summary>
            Collection of buffers for each frame.
            Since uploading (instance) buffer can be in flight between frames we'll use multi-buffering.
            Scratch and Result buffers don't have to be multi-buffered but it can happen that we need to
            resize them from time to time so we'll keep them multi-buffered too.
            TODO SE2-12184 remove multibuffering of scratch and result buffers
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneManager.ReusableBuffer">
            <summary>
            Wraps buffers of raytracing data to allow reusing between frames. Data is kept in between frames and reused if possible. Supports tracking of
            models and baked impostors.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSceneParameters">
            <summary>
            Scene size parameters for ray tracing.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.RayTracing.RayTracingSpotLight">
            <summary>
            Ray tracing version of spot
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.SceneSystem.SceneManager">
            <summary>
            Cpu representation of the scene. Game entity types are split into ECS component composites. Components itself are responsible of updating
            gpu scene representation.
            </summary>
            <remarks>
            Scene contains default root. All the "child" entities are initially attached to this root.
            </remarks>
        </member>
        <member name="M:Keen.VRage.Render12.SceneSystem.SceneManager.AllocateNewEntity">
            <summary>
            This method is called from simulation!
            It's safe to allocate DEntity in Scene concurrently, but DoSync needs to be exclusive => the lock
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.TransparentStage.ParticleEmitterProcessingJob">
            <summary>
            Generates indirect draw commands and entity instance data for rendering of instanced model entities
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.TransparentStage.ParticleGPUEncoding">
            <summary>
            Helper functions for encoding of the GPU Particles data
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack">
            <summary>
            Stores stack of scissor rectangles where top rectangle has already
            been cut using all the rectangles below it, so that only one
            rectangle is checked during scissor test.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack.Empty">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack.Push(Keen.VRage.Library.Mathematics.BoundingBox2I)">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack.Pop">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack.Peek">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.BatchBase.UIBatcherScissorStack.Cut(Keen.VRage.Library.Mathematics.BoundingBox2@,Keen.VRage.Library.Mathematics.BoundingBox2@)">
            <summary>
            Cuts the destination rectangle using top of the scissor stack.
            Source rectangle is modified using scaled change of destination
            as well.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase">
            <summary>
            Font library (xml format converted via BMFont, see 3rd/Fonts folder) supporting loading of font definitions and measuring text size
            (for UI positioning)  
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.REPLACEMENT_CHARACTER">
            <summary>
            Replacement character shown when we don't have something in our texture.
            Normally, this would be \uFFFD, but BMFontGen refuses to generate it, so I put its glyph at \u25A1 (empty square)
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.ELLIPSIS">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.Spacing">
            <summary>
            This is artificial spacing in between two characters (in pixels).
            Using it we can make spaces wider or narrower
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernEnabled">
            <summary>
            Enable / disable kerning of adjacent character pairs.
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.Ascent">
            <summary>
            Returned Ascent is not precise. Glyph info does not contain information about actual height of the characters.
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.AverageLineHeight">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.AverageFontLineOffset">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.BaselinePx">
            <summary>
            Distance from top of font to the baseline
            </summary>
        </member>
        <member name="P:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LineHeightPx">
            <summary>
            Distance from top to bottom of the font
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase._bitmapInfoByID">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase._glyphInfoByChar">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase._kernByPair">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase._replacementCharInfo">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.TryGetGlyphInfo(System.Char,Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo@)">
            <summary>
            </summary>
            <param name="c"></param>
            <param name="info"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.ComputeScaledAdvanceWithKern(System.Char,System.Char,System.Single)">
            <summary>
            </summary>
            <param name="c"></param>
            <param name="cLast"></param>
            <param name="scale"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.ComputeScaledAdvanceWithKern(System.Char,Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo,System.Char,System.Single)">
            <summary>
            </summary>
            <param name="c"></param>
            <param name="ginfo"></param>
            <param name="cLast"></param>
            <param name="scale"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.CanUseReplacementCharacter(System.Char)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.CalcKern(System.Char,System.Char)">
            <summary>
            </summary>
            <param name="chLeft"></param>
            <param name="chRight"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LoadFontXml(System.Xml.XmlNodeList)">
            <summary>
            Load the font data from an XML font descriptor file
            </summary>
            <param name="xnl">XML node list containing the entire font descriptor file</param>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LoadFontXML_font(System.Xml.XmlNodeList)">
            <summary>
            Load the data from the "font" node
            </summary>
            <param name="xnl">XML node list containing the "font" node's children</param>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LoadFontXML_bitmaps(System.Xml.XmlNodeList)">
            <summary>
            Load the data from the "bitmaps" node
            </summary>
            <param name="xnl">XML node list containing the "bitmaps" node's children</param>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LoadFontXML_glyphs(System.Xml.XmlNodeList)">
            <summary>
            Load the data from the "glyphs" node
            </summary>
            <param name="xnl">XML node list containing the "glyphs" node's children</param>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.LoadFontXML_kernpairs(System.Xml.XmlNodeList)">
            <summary>
            Load the data from the "kernpairs" node
            </summary>
            <param name="xnl">XML node list containing the "kernpairs" node's children</param>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GetXmlAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Get the XML attribute value
            </summary>
            <param name="n">XML node</param>
            <param name="strAttr">Attribute name</param>
            <returns>Attribute value, or the empty string if the attribute doesn't exist</returns>
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo">
            <summary>
            Info for each glyph in the font - where to find the glyph image and other properties
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.NBitmapID">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxLocX">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxLocY">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxWidth">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxHeight">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxAdvanceWidth">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxLeftSideBearing">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.GlyphInfo.PxHeightOffset">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.BitmapInfo">
            <summary>
            Info for each font bitmap
            </summary>
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.BitmapInfo.StrFilename">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.BitmapInfo.NX">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.BitmapInfo.NY">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair.Left">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair.Right">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair.#ctor(System.Char,System.Char)">
            <summary>
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <autogeneratedoc />
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPairComparer">
            <summary>
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPairComparer.Compare(Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair,Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair)">
            <inheritdoc />
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPairComparer.Equals(Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair,Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair)">
            <inheritdoc />
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPairComparer.GetHashCode(Keen.VRage.Render12.UIStage.Sprites.BitmapFontBase.KernPair)">
            <summary>
            </summary>
            <param name="x"></param>
            <returns></returns>
            <autogeneratedoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Sprites.SpriteFont.DrawString(Keen.VRage.Render12.UIStage.BatchBase.UIBatcher,Keen.VRage.Library.Mathematics.Vector2,Keen.VRage.Library.Mathematics.ColorSRGB,System.String,System.Single,System.Boolean,System.Nullable{System.Single})">
            <summary>
            Draw the given string at vOrigin using the specified color
            </summary>
            <param name="batcher"></param>
            <param name="position">Direction on the baseline. Text will advance from this position.</param>
            <param name="color"></param>
            <param name="text"></param>
            <param name="scale"></param>
            <param name="ignoreBounds"></param>
            <param name="maxTextWidth">
            Maximum width of the text. Texts wider than this will be truncated and they will end with an
            ellipsis.
            </param>
        </member>
        <member name="T:Keen.VRage.Render12.UIStage.Vectors.GradientHelpers">
            <summary>
            Helper methods to render <see cref="T:Keen.VRage.Render.Data.GradientFillData"/> to <see cref="T:Keen.VRage.Slug.Terathon.Slug.FillData"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Vectors.VectorBatchHelper.ApproximateBoundingBox(System.ReadOnlySpan{Keen.VRage.Library.Mathematics.QuadraticBezier2D})">
            <summary>
            Calculates approximation of geometry bounding box. Only endpoints of splines are taken into account.
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Vectors.VectorFont.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Vectors.VectorFont.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Render12.UIStage.Vectors.VectorFont.LoadFontHeader(System.IO.Stream)">
            <summary>
            Performs synchronous loading of the font
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_FAILURE" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_INVALID_ARGS" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_OUT_OF_MEMORY" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_MISSING_D3D_DLL" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_LEGACY_DRIVER" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_NO_AMD_DRIVER_INSTALLED" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_EXTENSION_NOT_SUPPORTED" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_ADL_FAILURE" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_DX_FAILURE" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSReturnCode.AGS_D3DDEVICE_NOT_CREATED" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSDriverVersionResult.AGS_SOFTWAREVERSIONCHECK_OK" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSDriverVersionResult.AGS_SOFTWAREVERSIONCHECK_OLDER" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Render12.Utils.AGS.Native.AGSDriverVersionResult.AGS_SOFTWAREVERSIONCHECK_UNDEFINED" -->
        <member name="T:Keen.VRage.Render12.Utils.BoxedValue`1">
             <summary>
             Boxed value type wrapped by a class.
            
             This is alternative to the <see cref="T:Keen.VRage.Library.Memory.Boxed`1" /> struct but with class capabilities.
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.ConcurrentDictionaryWithLazyInit`2">
            <summary>
            Concurrent dictionary with solved problems of the multiple initialization of the same key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.Keen#VRage#Core#Render#IMeshBuilderFactory#CreateMeshBuilder(Keen.VRage.Core.Render.MeshBuilder.Type,System.Int64,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.Keen#VRage#Core#Render#IMeshBuilderFactory#CreateMeshBuilder2D(Keen.VRage.Core.Render.MeshBuilder2D.Type,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.Keen#VRage#Render#Utils#IRenderMeshBuilderFactory#CreateMeshBuilder(Keen.VRage.Core.Render.MeshBuilder.Type,System.Nullable{Keen.VRage.Render.Contracts.RootEntity},System.Int32,System.String,Keen.VRage.Render.Materials.MaterialBaseDefinition[],Keen.VRage.Render.Contracts.Font[])">
            <inheritdoc/>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.CreateMeshBuilder(Keen.VRage.Core.Render.MeshBuilder.Type,Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent,System.Int32,System.String,Keen.VRage.Render.Materials.MaterialBaseDefinition[],Keen.VRage.Render.UI.FontDefinition[])">
            <inheritdoc/>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.CreateMeshBuilder2D(Keen.VRage.Core.Render.MeshBuilder2D.Type,System.Int32,System.String,Keen.VRage.Render.Materials.MaterialBaseDefinition[])">
            <inheritdoc/>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.CreateMaterialsOverrides(Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition)">
            <summary>
            Will create array of override materials. Later can be used in <see cref="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.CreateMeshBuilder(Keen.VRage.Core.Render.MeshBuilder.Type,Keen.VRage.Render12.SceneSystem.Components.RootEntityComponent,System.Int32,System.String,Keen.VRage.Render.Materials.MaterialBaseDefinition[],Keen.VRage.Render.UI.FontDefinition[])"/> in materialOverrides parameter
            </summary>
            <param name="triangle">Material for solid triangle rendering without depth buffer.</param>
            <param name="triangleOpaque">Material for solid triangle rendering without depth buffer without alpha.</param>
            <param name="triangleDepth">Material for solid triangle rendering using depth buffer.</param>
            <param name="triangleDepthOpaque">Material for solid triangle rendering using depth buffer without alpha.</param>
            <param name="line">Material for line rendering without depth buffer.</param>
            <param name="lineOpaque">Material for line rendering without depth buffer without alpha.</param>
            <param name="lineDepth">Material for line rendering using depth buffer.</param>
            <param name="lineDepthOpaque">Material for line rendering using depth buffer without alpha.</param>
            <returns>Array of override materials</returns>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshBuilderFactory.CreateMaterialsOverrides2D(Keen.VRage.Render.Materials.MaterialBaseDefinition,Keen.VRage.Render.Materials.MaterialBaseDefinition)">
            <summary>
            
            </summary>
            <param name="triangle"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.DirectRenderMeshConsumer">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.DirectRenderMeshConsumer.CommitBatch(Keen.VRage.Core.Render.MeshBuilderData,Keen.VRage.Library.Collections.PooledList{Keen.VRage.Core.RelativeTransform},Keen.VRage.Core.Render.IMeshConsumer.BatchTypes,System.Int64,Keen.VRage.Core.WorldTransform,System.Int32,System.Object)">
            <summary>
            </summary>
            <param name="meshBuilderData"></param>
            <param name="instances"></param>
            <param name="batchType"></param>
            <param name="parentId"></param>
            <param name="parentTransform"></param>
            <param name="overwriteBatchId"></param>
            <param name="customData"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.DirectRenderMeshConsumer.BatchEntities">
            <summary>
            Wrapper around render entities used in the batch. Used for removal of entities
            </summary>
        </member>
        <member name="M:Keen.VRage.Render12.Utils.IJobSnapshot`1.TryUpdateSettings(`0@)">
             <summary>
             Try to update snapshot with the new settings.
            
             If the snapshot cannot can be used with the settings, new snapshot will be initialized.
             </summary>
             <param name="newSettings"></param>
             <returns>Is the snapshot valid after the setting is applied.</returns>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.MaterialStateDefinitionValidation">
            <summary>
            Validates Flags of the <see cref="T:Keen.VRage.Render.Materials.MaterialStateDefinition"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.ProfilerPriorities">
            <summary>
            Constants for thread priorities.
            </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.ResourceSpaces">
             <summary>
             Resource spaces used by the shaders.
            
             Keep the file in sync with ResourceSpaces.hlsli and any resource in Shaders/Common/Resources
             </summary>
        </member>
        <member name="T:Keen.VRage.Render12.Utils.StructGPUDataConvertor`1">
            <summary>
            Converts and stores struct
            </summary>
            <typeparam name="TResult">Target result struct</typeparam>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Integer2D">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Point2D">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Box2D">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.QuadraticBezier2D">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Color4U">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.FontHeader">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.IconData">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.GeometryBuffer">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.TextureBuffer">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.AlbumHeader">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.ColorData">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.LayoutData">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.FillData">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.StrokeData">
            <summary/>
        </member>
        <member name="T:Keen.VRage.Slug.Terathon.Slug.FontDesc">
            <summary/>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Method builder for AsyncVoid methods.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
            Create the method builder.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
            Start the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Set the boxed state machine, unused.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>
            Notify about an exception while executing the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>
            Signal that the state machine has completed.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
    </members>
</doc>
