<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.ContentPipeline</name>
    </assembly>
    <members>
        <member name="T:Keen.VRage.ContentPipeline.AccessHelpers.FileSystemHelpers">
            <summary>
            Various helper methods that provide content pipeline with some additional functionality that's internal to VRage.Library.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.AccessHelpers.FileSystemHelpers.GenerateFileHandle(Keen.VRage.Library.Filesystem.RootPath,System.String)">
            <summary>
            Creates a file handle for the purpose of serializing with the ContentPipeline.
            It can be created even before FileSystem is initialized, but attempting IO will throw Exceptions.
            </summary>
            <param name="rootPath"> Root file system to base the handle on to. </param>
            <param name="relativePath"> Relative path from the base of the root file system. </param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.AccessHelpers.FileSystemHelpers.CreateLocalFileReader(System.String)">
            <summary>
            Creates a file reader based on the provided native path.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.AccessHelpers.FileSystemHelpers.CreateLocalFileSystem(System.String)">
            <summary>
            Creates a file reader based on the provided native path.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.AccessHelpers.JsonAccessHelpers">
            <summary>
            Access helper for editor-only json definitions
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.AccessHelpers.LogSeverityExtensions">
            <summary>
            Extension methods for <see cref="T:Keen.VRage.Library.Diagnostics.LogSeverity"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.AccessHelpers.LogSeverityExtensions.GetLevel(Keen.VRage.Library.Diagnostics.LogSeverity)">
            <summary>
            Get a <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> from <see cref="T:Keen.VRage.Library.Diagnostics.LogSeverity"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.AvaloniaPump">
            <summary>
            <see cref="T:Keen.VRage.Library.Threading.ICustomQueuePump"/> usable by engine implemented by using Avalonia dispatcher.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.BinaryExecutionResult">
            <summary>
            Struct returned after the binary has finished the execution
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.BinaryExecutionResult.HasRan">
            <summary>
            Whether the executable has been started (false if process could not be started)
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.BinaryExecutionResult.ExitCode">
            <summary>
            The exit code if the executable has run
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.BinaryExecutionResult.StandardOutput">
            <summary>
            Captured standard output if the process has run.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.BinaryExecutionResult.StandardError">
            <summary>
            Captured standard error output if the process has run.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.BinaryExecutableRunner">
            <summary>
            Helper class that can be used to execute an external binary program.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.BinaryExecutableRunner.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the executable.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.ChildProcessTracker">
            <summary>
            Allows processes to be automatically killed if this parent process unexpectedly quits.
            This feature requires Windows 8 or greater. On Windows 7, nothing is done.
            </summary>
            <remarks>
             Source:
             https://stackoverflow.com/a/37034966
             References:
             https://stackoverflow.com/a/4657392/386091
             https://stackoverflow.com/a/9164742/386091
             </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.ChildProcessTracker.AddProcess(System.Diagnostics.Process)">
            <summary>
            Add the process to be tracked. If our current process is killed, the child processes
            that we are tracking will be automatically killed, too. If the child process terminates
            first, that's fine, too.</summary>
            <param name="process"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetInfo">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.SourceCombinedHash">
            <summary>
            Combined hash of Asset Source file and the Asset file.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#AssetInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Library#Utils#ResourceHandle}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.Library.Utils.ResourceHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Library#Utils#ResourceHandle}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Library#Utils#ResourceHandle}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Library#Utils#ResourceHandle}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.Library.Utils.ResourceHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.Collections.Generic.List{Keen.VRage.Library.Utils.ResourceHandle}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetSourcesAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.AssetFileHashAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#String}}#Set(System.Object,System.Collections.Generic.List{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#String}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#String}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{System#String}}#Set(System.Byte@,System.Collections.Generic.List{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.Collections.Generic.List{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ContentFilesHashesAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessingSuccessfulAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Object,System.Collections.Generic.HashSet{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Byte@,System.Collections.Generic.HashSet{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.Collections.Generic.HashSet{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.DependenciesHashesAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Set(System.Object,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Set(System.Byte@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.ProcessorInfoAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetInfo.TypeInfoHolder.SourceCombinedHashAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetInfo@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetLoggingScope">
            <summary>
            Asset logging scope.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetLoggingExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetLoggingExtensions.BeginAssetScope(Microsoft.Extensions.Logging.ILogger,System.Guid,System.String)">
            <summary>
            Begin scope for an asset.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetLoggingExtensions.BeginAssetScope(Microsoft.Extensions.Logging.ILogger,Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Begin scope for an asset.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetSourceInfo">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetSourceInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#AssetSourceInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetSourceInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo">
            <summary>
            Definition info
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#AssetTemplate#DefinitionInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.EntityAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.GuidAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo.TypeInfoHolder.PathAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.AssetTemplate@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#AssetTemplate}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{System#String}}#Set(System.Object,System.Collections.Generic.HashSet{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{System#String}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{System#String}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{System#String}}#Set(System.Byte@,System.Collections.Generic.HashSet{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate@,System.Collections.Generic.HashSet{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.AssetCollapsedMembersAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,System#Boolean}}}#Set(System.Object,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,System#Boolean}}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,System#Boolean}}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,System#Boolean}}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionsToCreateAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Common#AssetTemplate#DefinitionInfo}}}#Set(System.Object,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Common#AssetTemplate#DefinitionInfo}}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Common#AssetTemplate#DefinitionInfo}}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Common#AssetTemplate#DefinitionInfo}}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Common.AssetTemplate.DefinitionInfo}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.EntityDefinitionInfosAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.TemplatePathAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Set(Keen.VRage.ContentPipeline.Common.AssetTemplate@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.AssetTemplate.TypeInfoHolder.DescriptionAccessor.Get(Keen.VRage.ContentPipeline.Common.AssetTemplate@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.FileExtensions">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.VRAGE_PROJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.VRAGE_PROJECT_WITH_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.FBX">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.FBX_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.META">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.META_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.BACKUP">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.BACKUP_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.TMP">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.TMP_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.IGNORE">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.IGNORE_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.HKT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.HKT_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.GLTF">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.GLTF_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.DEFINITION">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.DEFINITION_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.PARTIAL_DEFINITION">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.PARTIAL_DEFINITION_DOT">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.CONTROLLER">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileExtensions.CONTROLLER_DOT">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileExtensions.HasExtension(System.String,System.String)">
            <param name="path">Path of the file</param>
            <param name="extension">Extension with leading '.' dot</param>
            <returns>Whether the file has the specified extension, ignoring case</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.FileHelper">
            <summary>
            Methods to extend File functionality.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.OpenRead(System.String)">
            <summary>
            Open file for read operations.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.OpenWrite(System.String)">
            <summary>
            Open file for write operations.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.DeleteFile(System.String,System.Boolean)">
            <summary>
            Deletes the file permanently
            </summary>
            <param name="filepath">Full path of the file to remove</param>
            <param name="unlock">Whether read-only flag should be removed before deleting</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file
            </summary>
            <param name="oldFilepath">Old file path</param>
            <param name="newFilepath">New file path, where the file should be moved</param>
            <param name="overwrite">Whether to overwrite the destination file if it exists</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file
            </summary>
            <param name="originalFilepath">Original file path</param>
            <param name="newFilepath">New file path, where the file will be copied</param>
            <param name="overwrite">Whether to overwrite the destination file if it exists</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.ReplaceFile(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.IO.File.Replace(System.String,System.String,System.String)"/>. This method properly locks all 3 files and removes read-only flag.
            </summary>
            <param name="originalFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="backupFilePath"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.DeleteFolder(System.String,System.Boolean)">
            <summary>
            Deletes the directory, removes read-only flag before doing so.
            
            Does not lock any files/folders
            </summary>
            <param name="folderFullPath"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.RemoveReadOnlyAttributeFromFile(System.String)">
            <summary>
            Removes the readonly flag from a file, but preserving any others attributes
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.RemoveDirectoryReadOnlyAttribute(System.String)">
            <summary>
            Removes read only attribute in Directory, subfiles and subdirectories
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.RemoveDirectoryReadOnlyAttribute(System.IO.DirectoryInfo)">
            <summary>
            Removes read only attribute in Directory, subfiles and subdirectories
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.GetMultipleLocksInSafeOrder(System.String[])">
            <summary>
            Returns multiple locks in a specific order safe for entering without causing deadlock.
            Always enter the returned locks from the start, e.g. first, second, etc.
            </summary>
            <param name="filepaths">The filenames for which locks should be returned.
            The order in which they are specified in this parameter does not matter.</param>
            <returns>Array of specially sorted locks for the given paths.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileHelper.GetMultipleLocksKeysInSafeOrder(System.String[])">
            <summary>
            Similarly as <see cref="M:Keen.VRage.ContentPipeline.Common.FileHelper.GetMultipleLocksInSafeOrder(System.String[])"/> except in this case the paths are returned instead of the locks
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.FileHelper.IWrappedFileStream">
            <summary>
            Utility file stream interface that exposes the underlying stream and IDisposable interface.
            Usually this object is used to implement extended functionality to the stream, for example locking
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.FileHelper.IWrappedFileStream.Stream">
            <summary>
            Gets the Stream instance that is used to manipulate with the file, or <see langword="null"/> if the file cannot be opened
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.FileNameUtils">
            <summary>
            Utility methods for common asset naming conventions in the project
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.FileNameUtils.FOLDER_DEFAULT_NAME">
            <summary>
            What the newly created directory is named, before applying the naming rules in <see cref="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetNewFolderName(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetNewAssetName(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Picks a unique name for an asset.
            </summary>
            <param name="defaultName">The base name of the item that should be used when creating unique name</param>
            <param name="assetExtension">Extension the asset should have, including preceding period "."</param>
            <param name="targetFolder">The folder that the new item should be used in. Used to check for files with same name that already exist</param>
            <param name="logger"></param>
            <returns>Unique name that can be used, or <see langword="null"/> if no name can be used</returns>
            <remarks><code>New <paramref name="defaultName"/>.txt | New <paramref name="defaultName"/> (2).txt</code></remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetNewFolderName(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Picks a unique name for an asset
            </summary>
            <param name="targetFolder">The folder that the new folder should be used in. Used to check for files with same name that already exist</param>
            <param name="logger"></param>
            <returns>Unique name that can be used, or <see langword="null"/> if no name can be used</returns>
            <remarks><code>New Folder | New Folder (2)</code></remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetAssetName(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)">
            <remarks><code><paramref name="defaultName"/>.txt | <paramref name="defaultName"/> (2).txt</code></remarks>
            <inheritdoc cref="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetAssetName(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)"/>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetFolderName(System.String,Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)">
            <remarks><code><paramref name="name"/> | <paramref name="name"/> (2)</code></remarks>
            <inheritdoc cref="M:Keen.VRage.ContentPipeline.Common.FileNameUtils.GetNewFolderName(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Microsoft.Extensions.Logging.ILogger)"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.GuidHashPair">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#GuidHashPair}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Set(Keen.VRage.ContentPipeline.Common.GuidHashPair@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.GuidAccessor.Get(Keen.VRage.ContentPipeline.Common.GuidHashPair@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Set(Keen.VRage.ContentPipeline.Common.GuidHashPair@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.GuidHashPair.TypeInfoHolder.HashAccessor.Get(Keen.VRage.ContentPipeline.Common.GuidHashPair@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.IObservableValue`1">
            <summary>
            Defines a provider for push-based notification that uses behavior subject internally and contains a value at all times
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.IObservableValue`1.Value">
            <summary>
            Current value of the observable
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.MetafileUtils">
            <summary>
            Utility methods for MetaData files
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.MetafileUtils.Save(Keen.VRage.ContentPipeline.Metafiles.MetaData,System.String,Keen.VRage.Library.Serialization.CustomSerializationContext[])">
            <summary>
            </summary>    
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.MetafileUtils.Save(Keen.VRage.ContentPipeline.Metafiles.MetaData,System.IO.Stream,Keen.VRage.Library.Serialization.CustomSerializationContext[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.MetafileUtils.Load(System.String,Keen.VRage.Library.Serialization.CustomSerializationContext[])">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1">
            <summary>
            Base class, do not inherit.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.ResultBase">
            <summary>
            Base class for results.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.SuccessBase">
            <summary>
            Operation completed without problems.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.SuccessWithProblemsBase">
            <summary>
            The operation completed, but with problems.
            </summary>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.SuccessWithProblemsBase.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            The operation completed, but with problems.
            </summary>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.SuccessWithProblemsBase.Problems">
            <summary>Problems that occured during the operation</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.Failure">
            <summary>
            The operation could not complete.
            </summary>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.Failure.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            The operation could not complete.
            </summary>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.Failure.Problems">
            <summary>Problems that occured during the operation</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.IProblemsOwner">
            <summary>
            Interface that <see cref="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.ResultBase"/> inheritors should implement if they contain problems.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.IProblemsOwner.Problems">
            <summary>
            Problems that occured during the operation.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultBase`2">
            <summary>
            Base class, do not inherit.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResultNoData`2">
            <summary>
            Base class for operation results that can contain only success without any attached data, or failure with problems.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResult`3">
            <summary>
            Base class for enum-like result of an operation.
            </summary>
            <remarks>
            <see cref="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.SuccessWithProblems"/> derives from <see cref="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.Success"/>, meaning if you want to get result of completed operation regardless
            of the problems that occured, pattern-matching <see cref="P:Keen.VRage.ContentPipeline.Common.OperationResultBase`1.Result"/> for <see cref="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.Success"/> will suffice.
            </remarks>
            <example>
            <para>To use the method, the operation should declare derived type from this class and use it as a return value of the operation method.</para>
            <code>
            record ModelLoadResult : OperationResult&lt;ModelData, ProcessingProblem, ModelLoadResult&gt; {}
            ...
            ModelLoadResult LoadModel(string filename) {
                ...
                return ModelLoadResult.GetSuccess(modelData);
            </code>
            </example>
            <typeparam name="TData">Type of data that the operation result contains in case it completed successfully</typeparam>
            <typeparam name="TProblem">Type of problem that could occur during the operation, used to describe to the caller what is wrong</typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.IsSuccess(System.Collections.Generic.List{`1},`0@)">
            <summary>
            Get whether the operation has succeeded.
            </summary>
            <param name="problemsCollector">Problems are added to this collection, regardless of the success state</param>
            <param name="data">Contains the data if the operation was successful</param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.IsSuccess``1(`0@,``0@,Keen.VRage.ContentPipeline.Common.OperationResultBase{`1}[])">
            <summary>
            Get whether the operation has succeeded.
            </summary>
            <remarks>This overload does not return list of problems when the operation succeeded.
            Commonly later one uses <see cref="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.Combine``1(``0,Keen.VRage.ContentPipeline.Common.OperationResultBase{`1}[])"/> with this instance in secondary results parameter</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.Combine``1(``0,Keen.VRage.ContentPipeline.Common.OperationResultBase{`1}[])">
            <summary>
            Compose a result by using other primary operation result as source of result state,
            and secondary results as source of additional problems that occured during operation.
            </summary>
            <param name="primaryResult">Operation result that is determining the state of the returned operation result.</param>
            <param name="secondaryResults">Additional operation results whose problems should be also included.</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.Success">
            <summary>
            The operation completed successfully.
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.Success.#ctor(`0)">
            <summary>
            The operation completed successfully.
            </summary>
            <param name="Data"></param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.OperationResult`3.Success.Data">
            <summary></summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.SuccessWithProblems">
            <summary>
            The operation completed, but with problems.
            </summary>
            <param name="Data"></param>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.OperationResult`3.SuccessWithProblems.#ctor(`0,System.Collections.Generic.List{`1})">
            <summary>
            The operation completed, but with problems.
            </summary>
            <param name="Data"></param>
            <param name="Problems">Problems that occured during the operation</param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.OperationResult`3.SuccessWithProblems.Problems">
            <summary>Problems that occured during the operation</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.OperationResult`3.ProblemsBuilder">
            <summary>
            Builder struct used to collect issues from sources in efficient way and then build result from it.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.ProcessorInfo">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.ContentPipeline.Common.ProcessorInfo@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Set(Keen.VRage.ContentPipeline.Common.ProcessorInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.ProcessorInfo.TypeInfoHolder.IdentifierAccessor.Get(Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.Project.AssetCategory">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.Project.AssetType">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.Project.VRageProjectHelpers">
            <summary>
            Set of helper methods to work with VRageProject and UserData
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.Project.VRageProjectHelpers.Load(System.IO.FileInfo)">
            <summary>
            Proper way of loading VRageProject in the Editor. Uses FileHelper <see cref="M:Keen.VRage.ContentPipeline.Common.FileHelper.OpenRead(System.String)"/> instead just File <see cref="M:System.IO.File.OpenRead(System.String)"/>
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TaskQueueSimple">
            <summary>
            Task queue that simple queues given tasks to be run one at a time.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1">
            <summary>
            Class that ensures that only one task is running at a time, and that all tasks are executed in order.
            Enqueued tasks can be cancelled, in that case next enqueue task will be started.
            Supports running tasks progress reporting.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1.Progress">
            <summary>
            Handler for queue progress updates.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1.RunOrSchedule(`0,System.Threading.CancellationToken)">
            <summary>
            Enqueues the given task to be run in the queue.
            </summary>
            <param name="taskData"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1.TaskInQueue">
            <summary>
            Contains data about enqueued task.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TasksQueueStatus">
            <summary>
            Records current status of the <see cref="T:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1"/>.
            </summary>
            <param name="TotalTasks"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.TasksQueueStatus.#ctor(System.Int32)">
            <summary>
            Records current status of the <see cref="T:Keen.VRage.ContentPipeline.Common.TasksQueueBase`1"/>.
            </summary>
            <param name="TotalTasks"></param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Common.TasksQueueStatus.TotalTasks">
            <summary></summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TemporaryFileUtils">
            <summary>
            Utility methods that help to create files temporarily
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.TemporaryFileUtils.UseTemporaryFile(System.String,System.String@)">
            <summary>
            Use Disposable pattern to control lifetime of a temporary file with given file name.
            </summary>
            <param name="filename">The name of the temporary file that will be used</param>
            <param name="fileFullPath">The path to the file in temporary location.
            Once the returned object is disposed, the access to this path will fail.</param>
            <returns><see cref="T:System.IDisposable"/> object controlling the lifetime of the temporary file</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Common.TemporaryFileUtils.UseTemporaryFolder(System.String@)">
            <summary>
            Use Disposable pattern to control lifetime of a temporary folder.
            </summary>
            <param name="folderFullPath">The path to the temporary folder.
            Once the returned object is disposed, the access to this path will fail.</param>
            <returns><see cref="T:System.IDisposable"/> object controlling the lifetime of the temporary folder</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TemporaryFolder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.TemporaryFiles">
            <summary>
            Object representing one or more files with limited timespan. Usually the user that obtains this object is responsible for calling
            <see cref="M:Keen.VRage.ContentPipeline.Common.TemporaryFiles.Clean"/> method once the work with the temporary files is done.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Common.ValueSubject`1">
            <summary>
            Helper wrapper around <see cref="T:System.Reactive.Subjects.BehaviorSubject`1"/> that also provides current value.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.DCS.Components.EngineCoreScene">
            <summary>
            Scene that contains Engine <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.DCS.Components.EngineCoreScene.GetEntityBuilder">
            <summary>
            Creates <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/> for this scene. 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.DCS.Components.EngineCoreScene.Builder">
            <summary>
            Builder of the Scene to hide construction implementation details
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.DCS.Components.EngineCoreSceneComponent">
            <summary>
            Component used in <see cref="P:Keen.VRage.ContentPipeline.DCS.Components.EngineCoreSceneComponent.EngineCoreScene"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.DCS.DCSProjectSynchronizationContext">
            <summary>
            Synchronization object that moves execution to DCS Scene
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.DefaultProcessorSettingsProvider">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface`1.DefinitionObjectBuilderAssetValidation">
            <summary>
            Validation used to perform limited validation and patching of the OB
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface`1.DefinitionObjectBuilderAssetValidation.#ctor(Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface{`0})">
            <summary>
            Validation used to perform limited validation and patching of the OB
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionObjectBuilderTypeLocator">
            <summary>
            Locate object builder type for <see cref="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface`1"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionObjectBuilderTypeLocator.#ctor(System.Type)">
            <summary>
            Locate object builder type for <see cref="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterface`1"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterfaceCustomContextsProvider">
            <summary>
            Provider that adds serialization contexts for definitions to all asset interface data deserialization procedure
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.DefinitionAssetInterfaceGenerator">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface">
            <summary>
            Generic interface for definition assets
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.AssetID">
            <summary>
            The AssetID of the Asset
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.DefinitionType">
            <summary>
            The type of the definition
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.PartialDefinitions">
            <summary>
            List of partial definition currently loaded that target the asset.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.DefinitionFlags">
            <summary>
            Flags of the definition.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.GetCopy">
            <summary>
            Returns a copy of the object builder object
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.GetDefinitionManipulator">
            <summary>
            Returns the object manipulator for the definition
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface.GetProject">
            <summary>
            Return the project that contains this asset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface`1">
            <summary>
            Base interface for definition assets with generic data
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface`1.Data">
            <summary>
            Generic data of the definition asset
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IPartialOriginDefinitionAssetInterface">
            <summary>
            Generic interface for definition assets that are the base of partial definitions.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IPartialOriginDefinitionAssetInterface.ClearPartialReferencesOfGuid(Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface,System.Guid)">
            <summary>
            <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.ClearReferencesOfGuidInternal(System.Guid)"/> for a child partial definition.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.PartialDefinitionAssetInterface">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.PartialDefinitionAssetValidation">
            <summary>
            Asset validation for <see cref="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionAssetInterface">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionAssetInterface.Context">
            <summary>
            Custom context that must be present when instance of this asset interface is created
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Definitions#AssetInterfaces#UnknownDefinitionInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Set(Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo.TypeInfoHolder.MessageAccessor.Get(Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.UnknownDefinitionInfo@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata">
            <summary>
            Metadata about <see cref="T:Keen.VRage.Library.Definitions.DefinitionFlags"/>. 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Definitions#DefinitionFlagsMetadata}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#DefinitionFlags}#Set(System.Object,Keen.VRage.Library.Definitions.DefinitionFlags@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#DefinitionFlags}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#DefinitionFlags}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#DefinitionFlags}#Set(System.Byte@,Keen.VRage.Library.Definitions.DefinitionFlags@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Set(Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@,Keen.VRage.Library.Definitions.DefinitionFlags@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata.TypeInfoHolder.FlagsAccessor.Get(Keen.VRage.ContentPipeline.Definitions.DefinitionFlagsMetadata@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionImporter">
            <summary>
            Importer for definitions
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionProcessor">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem">
            <summary>
            Contains information about the definition set of a definition or definitions within a folder
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Definitions#DefinitionSetItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Set(Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem.TypeInfoHolder.DefinitionSetNameAccessor.Get(Keen.VRage.ContentPipeline.Definitions.DefinitionSetItem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.DefinitionSets.DefinitionSetCollectionGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.EditorDesignTimeDefinitionLocator">
            <summary>
            Locator used to access definitions during validations
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.Editor.DefinitionGeneratorOptionHelper">
            <summary>
            Helper methods for creating <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOption"/> for creating definitions
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Editor.DefinitionGeneratorOptionHelper.GenerateFromSingleDefinitionOfType``1(System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,System.Func{Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputDelegate},System.Func{System.Type,System.String})">
            <summary>
            Gets generator option that is available when a single definition of given type is selected
            </summary>
            <param name="displayName">Name of the generator option</param>
            <param name="providerArguments">Generator arguments</param>
            <param name="generatorOutputDelegate">Delegate used to create the asset</param>
            <param name="customDefinitionTypeFilter">
            Delegate that additionally checks the type of selected definition. Returned string is used
            as reason for the option to be disabled
            </param>
            <typeparam name="TDefinition">Type that the selected definition must inherit from</typeparam>
            <returns>Generator option used in <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProvider"/></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Editor.DefinitionGeneratorOptionHelper.GenerateFromSingleDefinitionOfAnyType(System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,System.Func{Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputDelegate},System.Collections.Generic.HashSet{System.Type},System.Func{System.Type,System.String})">
            <summary>
            Gets generator option that is available when a single definition of a type from a list of allowed types is selected
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.BaseDefinition">
            <summary>
            The definition or partial definition that this partial definition is based on.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.PriorityOverride">
            <summary>
            Should this partial definition be applied before other partial copies and non-priority overrides?
            Only works with partial overrides
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Definitions#PartialDefinitionDiff}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle}#Set(System.Object,Keen.VRage.Library.Utils.ResourceHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle}#Set(System.Byte@,Keen.VRage.Library.Utils.ResourceHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Utils.ResourceHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.BaseDefinitionHandleAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#PartialDefinitionKind}#Set(System.Object,Keen.VRage.Library.Definitions.PartialDefinitionKind@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#PartialDefinitionKind}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#PartialDefinitionKind}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#PartialDefinitionKind}#Set(System.Byte@,Keen.VRage.Library.Definitions.PartialDefinitionKind@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Definitions.PartialDefinitionKind@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PartialDefinitionKindAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#ObjectManipulator}#Set(System.Object,Keen.VRage.Library.Serialization.ObjectManipulator@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#ObjectManipulator}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#ObjectManipulator}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#ObjectManipulator}#Set(System.Byte@,Keen.VRage.Library.Serialization.ObjectManipulator@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,Keen.VRage.Library.Serialization.ObjectManipulator@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.ManipulatorAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Set(System.Object,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Set(System.Byte@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.DefinitionTypeAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Set(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff.TypeInfoHolder.PriorityOverrideAccessor.Get(Keen.VRage.ContentPipeline.Definitions.PartialDefinitionDiff@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionHelper">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionHelper.ReadBaseGuid(Keen.VRage.Library.Serialization.SerializationContext)">
            <summary>
            Returns the Guid of the BaseDefinition of a partial definition
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionHelper.ReadPartialDiffInfo(System.String)">
            <summary>
            Reads info about a partial definition from a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionHelper.ReadPartialDiffInfo(System.IO.Stream,System.String)">
            <summary>
            Reads info about a partial definition from a file
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionHelper.ReadPartialDiffInfo(Keen.VRage.Library.Serialization.SerializationContext)">
            <summary>
            Reads info about a partial definition from a stream
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionImporter">
            <summary>
            Importer for definitions
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionInfo">
            <summary>
            The information about partial relation
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PartialDefinitionProcessor">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.PassthroughDefinitionSerializationContext">
            <summary>
            Definition serialization context that only creates a placeholder definition when Definition instance is requested
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Definitions.PassthroughDefinitionSerializationContext._explorerAssetFileSnapshotProvider">
            <summary>
            Had to add this because in case of references to abstract definitions we need to know the exact type
            of the referenced
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.ProjectDefinitionSerializationContext">
            <summary>
            Serialization Context for loading definitions in editor
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.ProjectDefinitionSerializationContext.CreateObjectManipulator(System.Guid)">
            <summary>
            Returns the ObjectManipulator for the definition at the given guid
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper">
            <summary>
            Helpers for manipulating definitions and object builders. 
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.CreatePlaceholder(Keen.VRage.Library.Definitions.DefinitionObjectBuilder)">
            <summary>
            Create a placeholder definition instance for a particular object builder.
            </summary>
            <remarks>The placeholder has the correct type and Guid, but all other members are uninitialized.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.CreatePlaceholder(System.Type,System.Guid)">
            <summary>
            Create a placeholder definition instance.
            </summary>
            <remarks>The placeholder has the correct type and Guid, but all other members are uninitialized.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.CreatePlaceholder``1(System.Guid)">
            <summary>
            Create a placeholder definition instance.
            </summary>
            <param name="guid"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>The placeholder has the correct type and Guid, but all other members are uninitialized.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.CreateObjectBuilder``1">
            <summary>
            Create a placeholder definition instance.
            </summary>
            <remarks>The placeholder has the correct type and Guid, but all other members are uninitialized.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.LoadDefinitionBuilder(System.String,Keen.VRage.Library.Definitions.DefinitionSerializationContext)">
            <summary>
            Loads and returns a <see cref="T:Keen.VRage.Library.Definitions.DefinitionObjectBuilder"/>
            </summary>
            <param name="assetPath">The absolute path of the asset</param>
            <param name="definitionSerializationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.LoadDefinitionBuilder``1(System.String,Keen.VRage.Library.Definitions.DefinitionSerializationContext)">
            <summary>
            Loads and returns a <see cref="T:Keen.VRage.Library.Definitions.DefinitionObjectBuilder"/>
            </summary>
            <param name="assetPath">The absolute path of the asset</param>
            <param name="definitionSerializationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.ReadObjectBuilderInfo(System.IO.Stream,System.String)">
            <summary>
            Reads the type and guid of an object builder and resets the stream.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.ReadObjectBuilderInfo(Keen.VRage.Library.Serialization.SerializationContext)">
            <summary>
            Reads the type and guid of an object builder and resets the stream.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.ReadObjectBuilderInfo(System.String)">
            <summary>
            Reads the type and guid of an object builder from a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.GetObjectBuilderType(System.Type)">
            <summary>
            Converts <paramref name="definitionType"/> to its ObjectBuilders type
            </summary>
            <param name="definitionType"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.DefinitionAccessHelper.GetDefinitionType(System.Type)">
            <summary>
            Converts <paramref name="objectBuilderType"/> into its Definition type
            </summary>
            <param name="objectBuilderType"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GeneratePartialDefinitionDiff(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Nullable{System.Guid},Keen.VRage.Library.Definitions.PartialDefinitionKind)">
            <summary>
            Creates a partial definition based on the given base definition asset
            </summary>
            <param name="baseDefinitionAsset">Can be definition or partial definition</param>
            <param name="partialGuid"></param>
            <param name="kind"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetDefinitionAssetsOfType``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Boolean,System.Boolean)">
            <summary>
            Iterates over all definitions of type <typeparamref name="T"/> in the project
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetDefinitionAssetsOfType(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Iterates over all definitions of type <paramref name="targetType"/> in the project
            </summary>
            <param name="project"></param>
            <param name="targetType">The type of the definition (not the ObjectBuilder!)</param>
            <param name="inherit"></param>
            <param name="skipPartials"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetConfigurationAssetOfType``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Returns the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile"/> that contains the configuration of the given type <typeparamref name="T"/>
            </summary>
            <remarks>This can return a partial definition.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetConfigurationAssetOfTypeInProject``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Returns the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile"/> that contains the configuration of the given type <typeparamref name="T"/>
            </summary>
            <remarks>This can return a partial definition.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetOriginalConfigurationAssetOfType``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Returns the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile"/> that contains the original configuration of the given type <typeparamref name="T"/>.
            </summary>
            <remarks>This cannot return a partial definition.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetOrCreateConfigurationAssetOfTypeInProject``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Returns the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile"/> that contains the configuration of the given type <typeparamref name="T"/>. 
            Tries to create the configuration if doesn't exist.
            </summary>
            <remarks>This can return a partial definition.</remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetDefinitionAssetInterface(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Guid)">
            <summary>
            Returns a <see cref="T:Keen.VRage.ContentPipeline.Definitions.AssetInterfaces.IDefinitionAssetInterface"/> for the given <paramref name="guid"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetDefinitionType(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Expects that <paramref name="asset"/> is a definition
            </summary>
            <param name="asset"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetIsDefinition(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Type@)">
            <summary>
            Determine whether the given asset is a definition, and provides the definition type
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetIsDefinition(Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface,System.Type@)">
            <summary>
            Determine whether the given asset is a definition, and provides the definition type
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetIsDefinitionOrPartialDefinition(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Type@,System.Nullable{Keen.VRage.ContentPipeline.Definitions.PartialDefinitionInfo}@)">
            <summary>
            Determine whether the given asset is a definition; as well as checking for partial definition, and provides additional information.
            </summary>
            <remarks>
            The asset must be post-initialized already, otherwise an exception might be thrown
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetDefinitionAssetInterface``1(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Returns a type-specific DefinitionAssetInterface for the given Guid
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.AssertGetDefinitionAssetInterface``1(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Returns a type-specific DefinitionAssetInterface for the given Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetManipulator(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Returns the manipulator for the asset, if asset is definition or partial definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Definitions.Utility.ProjectDefinitionUtility.GetObjectManipulatorForDefinition(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.Library.Definitions.Definition)">
            <summary>
            Gets an ObjectManipulator of the ObjectBuilder of a definition, by looking for the asset
            </summary>
            <param name="project"></param>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.EditorResourceHandle`1">
            <summary>
            Resource handle imitating behavior of the <see cref="T:Keen.VRage.Library.Utils.ResourceHandle`1"/>, but implementing its own validation that do not work with
            engine at all, since the resources referenced by this type are not meant to be registered to engine ever.
            </summary>
            <typeparam name="TAsset"></typeparam>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.EditorResourceHandleSerializer`1">
            <summary>
            <see cref="T:Keen.VRage.ContentPipeline.EditorResourceHandle`1"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Extensions.VRageProjectExtensions">
            <summary>
            Extensions for <see cref="T:Keen.VRage.Core.Project.VRageProject"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.GeneratorAvailability">
            <summary>
            Structure specifying whether the generator can be used on the selected assets, an a reason if not
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.IProcessorSettingsProvider">
            <summary>
            Provider of processor settings.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.IProcessorSettingsProvider.TryGetSettings(System.Type,Keen.VRage.Library.Serialization.ISerializable@)">
            <summary>
            Try get processor setting of given type, if it is available in the provider.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.ISettingsOwner`1">
            <summary>
            Interface to be used by any <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessor"/> that expects a parameters of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of serializable object containing the processor parameters.
            The type must implement parameterless constructor used to create default settings.</typeparam>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.ISettingsOwner`1.Settings">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.ISettingsOwner`1.Keen#VRage#ContentPipeline#ISettingsAcceptor#SetSettings(System.Object)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.ISettingsAcceptor">
            <summary>
            Interface used only when creating asset processor to inject the settings data.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.ISettingsAcceptor.SetSettings(System.Object)">
            <summary>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaData">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.AssetID">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.InternalItems">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.Items">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.AddItem(Keen.VRage.ContentPipeline.Metafiles.MetaDataItem)">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.AddItem``1(``0)">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.SetOrAddItem``1(``0)">
            <summary>
            Add or Overwrite item
            </summary>
            <param name="instance"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.RemoveItem``1">
            <summary>
            Removes an item from the file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TryGetItem``1(``0@)">
            <summary>
            </summary>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.GetOrCreateItem``1">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.ContainsItem``1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.ContainsItem(System.Type)">
            <summary>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Metafiles#MetaData}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaData@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.AssetIDAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaData@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.InternalItemsAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaData@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#IEnumerable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Set(System.Object,System.Collections.Generic.IEnumerable{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#IEnumerable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#IEnumerable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#IEnumerable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}}#Set(System.Byte@,System.Collections.Generic.IEnumerable{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaData@,System.Collections.Generic.IEnumerable{Keen.VRage.ContentPipeline.Metafiles.MetaDataItem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaData.TypeInfoHolder.ItemsAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaData@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem">
            <summary>
            Base abstract class for item blobs of <see cref="T:Keen.VRage.ContentPipeline.Metafiles.MetaData"/>.
            When deriving from this object, you have to also implement <see cref="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.IsSameAs(Keen.VRage.ContentPipeline.Metafiles.MetaDataItem)"/>
            and <see cref="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.DeepCopy"/> methods.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo">
            <summary>
            Contains type and assembly information about a <see cref="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.CompareTo(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo)">
            <summary>
            Comparator that takes assembly version into account
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Equals(System.Type)">
            <summary>
            Equals comparator for types. NOTE: Does not take assembly version into account!
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Metafiles#MetaDataItemInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.NameSpaceAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.TypeNameAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyNameAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.AssemblyVersionAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.ContentPipeline.Metafiles.MetaDataItemInfo@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Migrations.AssetProcessingMetaDataItem_CustomMigrations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Migrations.AssetProcessingMetaDataItem_CustomMigrations.Migration_Asset_Output(System.Object)">
            <summary>
            TypeMigration&lt;List&lt;ContentFileRecord&gt;, AssetOutputs?&gt;
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Migrations.ProjectAssetReference_Migrations">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#ReferenceVerification#ReferenceVerificationMetaDataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.ReferenceVerification.ReferenceVerificationMetaDataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor.FullPath">
            <summary>
            Full path of the asset file on the disk.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor.#ctor(System.String)">
            <summary>
            Accessor for a file that is not part of <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingController">
            <summary>
            Class handling processing of single asset. Tries to keep the asset processed, if possible.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingController.OnReferencesChanged(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType)">
            <summary>
            Invoked when a reference to the asset has been added or removed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingController.TryLockAssetsAndGetProcessingFileProxy(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy@,System.IDisposable@)">
            <summary>
            Try get <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy"/> used to process given asset.
            Fails if any of the dependee assets file version cannot be retreived.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingController.HandleProcessingCompleted(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingAssetData)">
            <summary>
            Handles when the processing of this asset completed.
            This is invoked even when the processing did not run to successful completion or was cancelled.
            </summary>
            <param name="processingResult"></param>
            <param name="processingAssetData">The asset data valid when the processing was started</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingController.SetDetachedStateOverride(System.Boolean)">
            <summary>
            Sets whether the asset should not be considered as detached. The setting is permanent for this asset.
            </summary>
            <returns>Whether the override state has been changed</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper">
            <summary>
            Helper methods to obtain specific useful objects related to asset processing
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper.TryGetProcessingManager(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingManager@)">
            <summary>
            Try get processing manager for the given project. This succeeds when the processing feature is available in the project
            and the project has been loaded.
            </summary>
            <param name="loadedProject"></param>
            <param name="processingManager"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper.TryGetProcessingController(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Guid,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController@)">
            <summary>
            Gets specific asset processing controller for given asset specified by <see cref="T:System.Guid"/>.
            This method should succeed when the processing feature is available in the project,
            the project has been loaded and the asset exists in the project.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper.TryGetProcessingController(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController@)">
            <summary>
            Gets specific asset processing controller for given <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile"/>
            This method should succeed when the processing feature is available in the project,
            the project has been loaded and the asset exists in the project.
            </summary>
            <param name="assetFile"></param>
            <param name="processingController"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper.IsDetachOverrideEnabled(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile)">
            <summary>
            Get whether the asset has detach override enabled.
            </summary>
            <remarks>
            Presence of the processing feature is not required, the state is taken from metadata.
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingFeatureHelper.TryGetContentFiles(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Collections.Immutable.ImmutableArray{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord}@)">
            <summary>
            Gets output file information of the given asset that are produced when the asset is converted into Content file.
            The processing feature must be present in the project, project must be loaded.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.ProcessorInfo">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.ContentFiles">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Problems">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.DependenciesHashes">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.OverrideDetachedState">
            <summary>
            When true, the asset is never considered as detached, even when no definition is referencing it
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetProcessingMetaDataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Set(System.Object,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Common#ProcessorInfo}#Set(System.Byte@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProcessorInfoAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetOutputs?}#Set(System.Object,System.Nullable{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetOutputs?}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetOutputs?}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetOutputs?}#Set(System.Byte@,System.Nullable{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,System.Nullable{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ContentFilesAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingProblem}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingProblem}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingProblem}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingProblem}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.ProblemsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.DependenciesHashesAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.AssetHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.OverrideDetachedStateAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingErrors}#Set(System.Object,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingErrors@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingErrors}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingErrors}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingErrors}#Set(System.Byte@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingErrors@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingErrors@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem.TypeInfoHolder.IgnoredErrorsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingResult">
            <summary>
            Object representing the result of processing an asset
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingResult.Type">
            <summary>
            Result type that the processor can return
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState.Processing">
            <summary>
            The asset is in the process of being processed
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState.Updating">
            <summary>
            The processing finished and Content files are being moved to Content so they can be used in the engine
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState.Processed">
            <summary>
            Correctly processed to output files
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState.Detached">
            <summary>
            Not eligible for processing, not a definition or any definition transitively referencing this asset
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingState.Error">
            <summary>
            Cannot be processed
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities">
            <summary>
            Utility class for Content Pipeline asset processing.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.ProcessorTaskInit">
            <summary>
            When not null, action that is performed prior to invoking asset processor possibly on parallel thread
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.GetProcessorInstance(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.FileExtension,System.String,Keen.VRage.ContentPipeline.IProcessorSettingsProvider,Keen.VRage.ContentPipeline.Common.ProcessorInfo@)">
            <param name="extension">Extension of the asset</param>
            <param name="name">Name of the asset, for debugging purposes</param>
            <param name="contextualSettingsProvider"></param>
            <param name="processorInfo">Returned processor information</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.IsDetached(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Determines whether the given asset is detached, meaning there is no transitive "output" reference from any definition.
            Only assets without custom processor can be considered detached.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.TryPrepareImport(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile)">
            <summary>
            Check for import, determining what dependencies are outdated and what are the new hashes of current dependencies.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PerformImport(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Object,System.Boolean)">
            <summary>
            Performs import used by processable strategy, including checking for dependencies hashes stored in metafile and determining
            which ones are obsolete.
            </summary>
            <param name="assetFile">The asset that should perform the import</param>
            <param name="lifetime"></param>
            <param name="validateOnWorkers">Should the validation run on worker thread instead of current thread.</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.ImportResult">
            <summary>
            Contains result of asset importing procedure
            </summary>
            <param name="PreImportData">
            Result of the pre-import phase where dependencies are collected and their hashes compared
            </param>
            <param name="ImportingResult">
            Result of the import itself, which validates and possibly patches the asset data
            </param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.ImportResult.#ctor(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData,Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult)">
            <summary>
            Contains result of asset importing procedure
            </summary>
            <param name="PreImportData">
            Result of the pre-import phase where dependencies are collected and their hashes compared
            </param>
            <param name="ImportingResult">
            Result of the import itself, which validates and possibly patches the asset data
            </param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.ImportResult.PreImportData">
            <summary>
            Result of the pre-import phase where dependencies are collected and their hashes compared
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.ImportResult.ImportingResult">
            <summary>
            Result of the import itself, which validates and possibly patches the asset data
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData">
            <summary>
            Base class for asset importing result
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Invalid">
            <summary>
            Denotes that the asset is invalid and cannot be imported
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Valid">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Valid.#ctor(Keen.VRage.Library.Collections.Readers.HashSetReader{System.Guid})">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Success">
            <summary>
            Denotes that the pre-import completed successfully
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Success.#ctor(Keen.VRage.Library.Collections.Readers.HashSetReader{System.Guid},Keen.VRage.Library.Collections.Readers.SortedDictionaryReader{System.Guid,System.String},Keen.VRage.Library.Collections.Readers.HashSetReader{System.Guid})">
            <summary>
            Denotes that the pre-import completed successfully
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Failure">
            <summary>
            Denotes that the pre-import failed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingUtilities.PreImportData.Failure.#ctor(Keen.VRage.Library.Collections.Readers.HashSetReader{System.Guid},Keen.VRage.Library.Collections.Readers.HashSetReader{System.Guid})">
            <summary>
            Denotes that the pre-import failed
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessor">
            <summary>
            Abstract base class specifying what constructor is expected in processor implementations.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessorAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessorMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetReadOnlyController">
            <summary>
            Class to handle processing feature information for single asset. This base implementation does not perform any processing on the asset,
            but contains information about processing state.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetReadOnlyController.AssetOutputs">
            <summary>
            Content files that the asset is processed into currently. These files should exist in Content.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetsProcessingFeature">
            <summary>
            Feature that automatically reprocesses asset files to Content counterpart.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AttributeAssetProcessorsProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord">
            <summary>
            Information about the main Content file of an asset
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.AssignedGuid">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.FileHash">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.FileName">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ContentFileRecord}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord.TypeInfoHolder.FileNameAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord">
            <summary>
            Information about additional Content files of an asset
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.FileHash">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.FileName">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.AssignedGuid">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AdditionalContentFileRecord}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.FileNameAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord.TypeInfoHolder.AssignedGuidAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs">
            <summary>
            Information about all outputs in Content of an asset
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AssetOutputs}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ContentFileRecord}#Set(System.Object,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ContentFileRecord}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ContentFileRecord}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ContentFileRecord}#Set(System.Byte@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentFileRecord@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.MainOutputAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AdditionalContentFileRecord}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AdditionalContentFileRecord}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AdditionalContentFileRecord}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#AdditionalContentFileRecord}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@,System.Collections.Immutable.ImmutableArray{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AdditionalContentFileRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs.TypeInfoHolder.AdditionalOutputsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputsExtensions">
            <summary>
            Extension methods for <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentInitialItems">
            <summary>
            Information about multiple <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentItem"/>.
            </summary>
            <seealso cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentItem">
            <summary>
            Information about single content item.
            </summary>
            <seealso cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager">
            <summary>
            Editor wise manager for Content Manipulation
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.LaunchAsync(Keen.VRage.Plugin.Editor.ProjectPluginHelper,Keen.VRage.DCS.Components.Entity,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,Keen.VRage.Library.Content.ProjectOptions})">
            <summary>
            Launches Content Manipulator with initial sets, so that Content changes can be pushed to it.
            </summary>
            <remarks>
            Only "Engine" definition set is pushed, the rest must be pushed using <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.PushOtherDefinitionSets"/>
            </remarks>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.EnqueuedBatchBase">
            <summary>
            Base class for enqueued batch items
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.EnqueuedBatch">
            <summary>
            Enqueued batch of regular (runtime) content changes
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.EnqueuedStartupBatch">
            <summary>
            Enqueued batch of startup content changes
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.EnqueuedStartupBatch.Result">
            <summary>
            Result of batch pushing. Expected to be set only once
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager.ContentManipulatorPushQueue">
            <summary>
            Task queue implementation for <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentManipulatorManager"/>. Supports two types of batches (startup and regular) and
            automatically aggregates batches in queue to optimize number of pushes.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager">
            <summary>
            The interface for manager that handle changes in Content folder of the project, including definitions with sets.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentItemAddedOrModified">
            <summary>
            Observable for when content item with given Guid has been pushed to the engine (either added or engine was notified the asset has been modified)
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.BeforeContentItemRemoved">
            <summary>
            Observable for when the content item with given Guid is going to be unregistered from engine (engine will be notified the asset has been removed)
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentItemRemoved">
            <summary>
            Observable for when the content item with given Guid has been unregistered from engine (engine was notified the asset has been removed)
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.BatchPushed">
            <summary>
            Observable when a batch push has completed, validations might have changed.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentPushStatus">
            <summary>
            Observable for the Content changes pushing status
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.SynchronousPush">
            <summary>
            Whether this manager is set up to push content synchronously. If <see langword="false"/>, the manager will push content asynchronously.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.TryInitializeProject(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Tries to initialize the ContentManager for the given project. Every project that can push its Content should call this method first
            (and only once). 
            </summary>
            <returns>Whether registering to the content succeeded. If <see langword="false"/>, the initialization failed and engine interactions
            might not work properly.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.StartupPushContentItemsAsync(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentInitialItems,System.Threading.CancellationToken,System.String)">
            <summary>
            Pushes multiple items to the engine at once, to be used when project is loaded to push all existing items to the engine at once.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ItemExists(System.Guid)">
            <summary>
            Whether item with <paramref name="itemGuid"/> is currently present in this manager. This does not mean the item is necessarily registered
            in engine (it might not be eligible for being registered in engine due to one of its references being invalid)
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ConflictsWithExistingItem(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs)">
            <summary>
            Determine whether there is a conflict between provided processing outputs and existing item in Content.
            Conflicting outputs cannot be used with <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentAddedOrModified(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs,System.Collections.Generic.IReadOnlySet{System.Guid},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ItemRegistered(System.Guid)">
            <summary>
            Whether item with <paramref name="itemGuid"/> is currently present in this manager and is registered in engine.
            </summary>
            <param name="itemGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ItemAvailable(System.Guid)">
            <summary>
            Whether item with <paramref name="itemGuid"/> is currently present in this manager and has a version registered in engine.
            </summary>
            <param name="itemGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentAddedOrModified(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetOutputs,System.Collections.Generic.IReadOnlySet{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Notifies that the item has been added or modified in the Content.
            </summary>
            <param name="asset">Respective asset of the Content item(s)</param>
            <param name="temporaryProcessingOutputs">Provides the actual files in temporary location after processing</param>
            <param name="assetOutputs">The information about files that are now available or modified in Content.</param>
            <param name="referencedAssets">Guid of other items that are referenced by this item</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ContentRemoved(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Threading.CancellationToken)">
            <summary>
            Notifies that the item has been removed from Content
            </summary>
            <param name="asset">The asset for which all Content items has been removed</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.GetValidationIssues">
            <summary>
            Get all validation issues that are currently known to the manager
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.UpdateStartupCache(System.Guid,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache)">
            <summary>
            Update the startup cache from current state or from an already <paramref name="generated"/> cache.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.SimpleContentManager">
            <summary>
            Content manager that moves everything to Content without any checks, validations or interaction with VRage
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.StartupBatchResults">
            <summary>
            Results of the <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.StartupPushContentItemsAsync(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentInitialItems,System.Threading.CancellationToken,System.String)"/>
            </summary>
            <param name="RejectedAssets">
            Assets that were not accepted by the <see cref="T:Keen.VRage.Library.Content.ContentManipulator"/>.
            </param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.StartupBatchResults.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Guid,Keen.VRage.Library.Content.ContentRejectReason})">
            <summary>
            Results of the <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.StartupPushContentItemsAsync(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.ContentInitialItems,System.Threading.CancellationToken,System.String)"/>
            </summary>
            <param name="RejectedAssets">
            Assets that were not accepted by the <see cref="T:Keen.VRage.Library.Content.ContentManipulator"/>.
            </param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.StartupBatchResults.RejectedAssets">
            <summary>
            Assets that were not accepted by the <see cref="T:Keen.VRage.Library.Content.ContentManipulator"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.CopyAssetProcessor">
            <summary>
            Processor that only copies the source file to output folder
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.FileExtension">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.FileExtension.ToString">
            <summary>
            Returns extension as string with leading period '.' character and all alphabetic letters in lowercase, e.g. '.png',
            or <see cref="F:System.String.Empty"/> if the file had no extension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController">
            <summary>
            Asset processing controller interface for single asset
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.Asset">
            <summary>
            The asset this controller is used for
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.Detached">
            <summary>
            Whether the asset is considered detached, meaning it is not effectively referenced by any definition and thus not processed to Content
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.DetachOverriden">
            <summary>
            Detach override state. When true, the asset is not considered detached even when nothing references it
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.ProcessingState">
            <summary>
            The processing state the asset is currently in
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.AssetOutputs">
            <summary>
            Content files that the asset is processed into currently. These files should exist in Content.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.GetReferencedAssetGuids">
            <summary>
            Obtains <see cref="T:System.Guid"/> of assets that this asset references, for purposes of registering this asset to e.g. engine only if all referenced
            items are also already pushed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetController.GetLastImportTask">
            <summary>
            Get the last task that imported the asset.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessor">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessor.Process(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy,System.String,System.Threading.CancellationToken)">
            <summary>
            Process the given asset to the specified folder
            </summary>
            <param name="sourceAssetProxy"></param>
            <param name="outputFolder">Target output folder that the output files should be created in</param>
            <param name="cancellationToken">Cancellation token indicating that the processing should not continue.
            In that case, return <see cref="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingResult.Cancelled"/> instead of raising exception</param>
            <returns><see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetProcessingResult"/> representing the result of processing, including created files and detected problems</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessor.GetOutputFileNames(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor)">
            <summary>
            Returns list of corresponding file names that are the result of processing the given file.
            </summary>
            <param name="sourceAsset">Asset</param>
            <returns>List of file names (with extensions) that this processor produces</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessorsProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.IAssetProcessorsProvider.GetAssetProcessorTypes">
            <summary>
            
            </summary>
            <returns>Dictionary mapping asset extensions (including leading period, e.g. ".png") to processor metadata</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingAssetData">
            <summary>
            Object consisting of data relevant to the asset at the moment its processing has been started.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingErrors">
            <summary>
            Errors detected by processing validation.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy">
            <summary>
            Class that processors use from parallel environment to access asset files and their dependencies
            </summary>
            <remarks>
            This class is intended to be used from parallel environemnt of asset processing workers
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy.TryAccessAsset(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor@)">
            <summary>
            Try access the given asset file for reading. 
            </summary>
            <param name="assetAccessor">If success, instance of the accessor to the asset</param>
            <returns>If <see langword="true"/>, <paramref name="assetAccessor"/> instance can be used to read from asset and
            the project will prevent any operation on the file until the <paramref name="assetAccessor"/> instance is disposed.
            <para/>
            If <see langword="false"/> is returned, it means that the file is no longer available in original state for processing,
            and processing should immediately be cancelled.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy.TryAccessAssetOrDependee(System.Guid,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.AssetAccessor@)">
            <summary>
            Try access dependee asset file for reading. Dependee is an asset that is referenced by asset using "Asset (Dependency) Input" reference type.
            </summary>
            <param name="dependeeAssetGuid"></param>
            <param name="assetAccessor"></param>
            <returns><see langword="false"/> if the <paramref name="dependeeAssetGuid"/> is not known as dependee,
            or the dependee file change was detected after the processing has started.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy.AccessAssetOrCancel">
            <summary>
            Access the asset file for reading. Throws cancellation exception if the file should no longer be accessed.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown when asset file is outdated and processing should not proceed.</exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy.AccessAssetOrDependeeOrCancel(System.Guid)">
            <summary>
            Access dependee asset file for reading. Dependee is an asset that is referenced by asset using "Asset (Dependency) Input" reference type.
            Throws cancellation exception if the file should no longer be accessed.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown when asset file is outdated and processing should not proceed.</exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingFileProxy.TryAccessPartialBaseDefinition(System.Guid,Keen.VRage.Library.Serialization.ObjectManipulator@)">
            <summary>
            Only relevant for partial definition processor. Returns manipulator for base definition of the partial.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingManager">
            <summary>
            Manager of asset processing for the given <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem">
            <summary>
            Describes asset data problem that occured during processing of the asset. Problem does not neccessarily mean the asset could not be processed,
            however the problem should be resolved before submitting the asset.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Summary">
            <summary>
            Short summary of the problem
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Description">
            <summary>
            More detailed description of the problem including file paths or other actual data causing the problem
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.MemberPath">
            <summary>
            Optional path to the member of the source asset object that caused the problem.
            Relevant only for Editor readable assets.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Severity">
            <inheritdoc cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessingProblem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SummaryAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.DescriptionAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#MemberPath?}#Set(System.Object,System.Nullable{Keen.VRage.Library.Serialization.MemberPath}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#MemberPath?}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#MemberPath?}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Serialization#MemberPath?}#Set(System.Byte@,System.Nullable{Keen.VRage.Library.Serialization.MemberPath}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,System.Nullable{Keen.VRage.Library.Serialization.MemberPath}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.MemberPathAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#Interfaces#Validation#ValidationIssue#IssueSeverity}#Set(System.Object,Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#Interfaces#Validation#ValidationIssue#IssueSeverity}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#Interfaces#Validation#ValidationIssue#IssueSeverity}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#Interfaces#Validation#ValidationIssue#IssueSeverity}#Set(System.Byte@,Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@,Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem.TypeInfoHolder.SeverityAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingProblem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.CancelProcessing(System.Guid)">
            <summary>
            Cancel the processing of the given asset.
            That also includes scheduled repeated reprocessing that would otherwise occur once the current processing logic completes.
            </summary>
            <param name="assetGuid">The asset whose processing should be cancelled</param>
            <returns>Whether the asset was being processed and this call truly cancelled it.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.GetProcessingTask(System.Guid,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingManager,System.Threading.CancellationToken)">
            <summary>
            Only returns that task that will execute the asset processing.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.ProcessingQueueState">
            <summary>
            Define the current state of the queue.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.ProcessingQueueState.Running">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.ProcessingQueueState.OnHold">
            <summary>
            Pause any new scheduling.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.ProcessingQueueState.CancelNewProcessing">
            <summary>
            Directly cancel any new scheduling. 
            Can be used by unit test.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingQueueManager.ProcessingQueueRecord.ReprocessingData">
            <summary>
            If during processing next request to reprocess is registered, this property contains its data.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult">
            <summary>
            Data about results of successful asset processing.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult.Failed">
            <summary>
            Data for <see cref="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Failed"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult.Cancelled">
            <summary>
            Data for <see cref="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Cancelled"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult.ProcessorExceptionThrown">
            <summary>
            Data for <see cref="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.ProcessorException"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResult.Successful">
            <summary>
            Data for <see cref="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Successful"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Successful">
            <summary>
            Processing completed and all expected files were correctly created.
            However it still might mean there were problems were detected during processing.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Cancelled">
            <summary>
            Processing cancellation was issued
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.Failed">
            <summary>
            An issue with the asset file caused that the processing could not be completed
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessingResultType.ProcessorException">
            <summary>
            An unhandled exception occured during processing
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorArgument">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorArgument.DebugName">
            <summary>
            Debug name of the processor (for debugging purposes)
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorArgument.LoggerFactory">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem">
            <summary>
            Metadata item for storing processor settings. These settings are then used for processing of related asset(s).
            </summary>
            <remarks>
            If settings are included in folder metadata, all assets in the folder will use it. If multiple folders in hierarchy have given setting type,
            the closest one is used. This can be used to reset settings to default when set by parent folder.
            by setting the mapping value to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Settings">
            <summary>
            Mapping between a type and settings instance. Mapping to <see langword="null"/> explicitly resets the settings to default.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetProcessing#ProcessorSettingsMetadataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Type,Keen#VRage#Library#Serialization#ISerializable}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Type,Keen.VRage.Library.Serialization.ISerializable}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Type,Keen#VRage#Library#Serialization#ISerializable}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Type,Keen#VRage#Library#Serialization#ISerializable}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Type,Keen#VRage#Library#Serialization#ISerializable}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Type,Keen.VRage.Library.Serialization.ISerializable}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@,System.Collections.Generic.Dictionary{System.Type,Keen.VRage.Library.Serialization.ISerializable}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem.TypeInfoHolder.SettingsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProcessorSettingsMetadataItem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProducedFile">
            <summary>
            A single file record of a result of asset processing
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProjectContextProcessorSettingsProvider">
            <summary>
            Processor settings provider that collects settings from project context.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProjectContextProcessorSettingsProvider.CollectSettingsFromContextLayers(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,Keen.VRage.Library.Serialization.ISerializable}}})">
            <summary>
            Helper method to collect settings from all layers of the context.
            </summary>
            <param name="layers">Layers ordered using descending priority</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs">
            <summary>
            Object for temporary files created during processing. Provides methods for cleaning the items
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.TryClean(System.Exception@)">
            <summary>
            Cleans the items if the instance was not cleaned yet. Reports any exception that occurs 
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.TryMoveAndClean(System.String,System.Exception@)">
            <summary>
            Moves all items and then cleans the temporary location not cleaned yet. Reports any exception that occurs.
            The instance must not have been cleaned prior to calling this.
            </summary>
            <exception cref="T:System.InvalidOperationException">The instance was already cleaned</exception>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder">
            <summary>
            Builder for temporary files used when calling asset processor.
            This builder makes a new temporary folder, offers method to actually create the folder on disk, then the processing should create the
            outputs in that folder, and if successful, build a <see cref="T:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs"/> instance from this, or clean this builder
            if no usable outputs were created.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.FolderFullPath">
            <summary>
            The folder in which the files should be created before calling <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.Build(System.Collections.Generic.ICollection{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProducedFile})"/> method
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.CreateFolder">
            <summary>
            Prepares the folder in which the items should be collected.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.TryCleanIfNeeded(System.Exception@)">
            <summary>
            Cleans the temporary items builder. <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.Build(System.Collections.Generic.ICollection{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProducedFile})"/> method cannot be used after this.
            Only cleans if the <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.Build(System.Collections.Generic.ICollection{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProducedFile})"/> method has not been called (returns success if it was called).
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.Build(System.Collections.Generic.ICollection{Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ProducedFile})">
            <summary>
            Builds the temporary items object.
            It also ensures that the files provided to this method actually exist in the folder <see cref="P:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.TemporaryProcessingOutputs.Builder.FolderFullPath"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.AssetHash">
            <summary>
            Hash of this asset used to detect changes of the asset file itself.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#AssetToAssetSourcesMetaDataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Common#GuidHashPair}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Common.GuidHashPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetSourcesAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem.TypeInfoHolder.AssetHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.AssetToAssetSourcesMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetValidation.AssetValidationController">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetValidation.AssetValidationFeature">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.AssetValidation.AssetValidator">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.EmptyFolderNotification.EmptyFolderNotificationFeature">
            <summary>
            Project feature that tracks and provides notification about empty folders present in the project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.IProjectFeature">
            <summary>
            Interface for all features that are connected to <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject"/>.
            Features are notified about project status and can interact with its items to provide additional functionality.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.IProjectFeature.Name">
            <summary>
            Name of the feature
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.IProjectFeature.OnProjectLoad(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Invoked when project is being loaded. When invoked, initial items are already present in the project,
            but files are not initialized yet. Usually when interacting with files, use <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.ItemToken"/>
            to handle item events.
            </summary>
            <param name="project"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.ProjectFeaturesHelper">
            <summary>
            Helper methods to get specific <see cref="T:Keen.VRage.ContentPipeline.Project.Features.IProjectFeature"/> from <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.ProjectFeaturesHelper.TryGetProjectFeature``1(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,``0@)">
            <summary>
            Get first feature of type <typeparamref name="T"/> from the project.
            </summary>
            <typeparam name="T">Thy type of the project feature</typeparam>
            <returns><see langword="true"/> if the feature was found</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager">
            <summary>
            Manager to handle startup blobs which speed-up pushing project to engine.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Manager to handle startup blobs which speed-up pushing project to engine.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.TryGet(System.Guid,System.Guid,System.String,System.Nullable{System.Collections.Immutable.ImmutableArray{System.Object}}@)">
            <summary>
            Try to get the up-do-date blobs of an asset.
            </summary>
            <returns>True if the blob is found and file hash is still valid.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.Load(System.Guid,System.String)">
            <summary>
            Loads asset blob data from the specified file name.
            </summary>
            <param name="projectId"></param>
            <param name="filename">Default is <see cref="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.STARTUP_CACHE_FILE_PATH"/>.</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.SetOrUpdateFromCache(System.Guid,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache)">
            <summary>
            Update the startup cache from current content cache or from an already <paramref name="generated"/> cache.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.Save(System.Guid,System.String)">
            <summary>
            Saves asset blob data to the specified file name.
            </summary>
            <param name="projectId"></param>
            <param name="filename">Default is <see cref="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobManager.STARTUP_CACHE_FILE_PATH"/>.</param>
            <returns>Full path of the newly create cache file</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache">
            <summary>
            Cache for <see cref="P:Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData.BlobData"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.UpdateAssets(System.Collections.Generic.Dictionary{System.Guid,System.ValueTuple{System.String,System.Boolean}},Keen.VRage.Library.Collections.ListDictionary{System.Guid,System.Object})">
            <summary>
            Remove any entry not present in <paramref name="assetHashes"/> and add or replace entries from <paramref name="assetBlobs"/>.
            </summary>
            <remarks>Keep blob if asset is not <see cref="M:Keen.VRage.ContentPipeline.Project.Features.AssetProcessing.ContentManager.IContentManager.ItemRegistered(System.Guid)"/>, but doesn't add new entry.</remarks>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry">
            <summary>
            Contains info about asset's <see cref="T:Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache#Entry}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.FileHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Object}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Object}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Object}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Object}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@,System.Collections.Immutable.ImmutableArray{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry.TypeInfoHolder.BlobsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache#Entry}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache#Entry}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache#Entry}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Features#Startup#StartupBlobsCache#Entry}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Set(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.Entry}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache.TypeInfoHolder.AssetBlobsAccessor.Get(Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder">
            <summary>
            Builder for <see cref="T:Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder._extractorsByExtension">
            <summary>
            Contains all available extractors for given file extension.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder.Init">
            <summary>
            Initialize <see cref="P:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder.BlobData"/> to contains every blob type mapping to an empty dictionary.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder.Process(System.Collections.Generic.Dictionary{System.String,System.Guid},System.String,System.String)">
            <summary>
            Iterate over all content files to load blobs and create mapping.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.ContentCache.ContentBlobDataBuilder.Build">
            <summary>
            Generate the <see cref="T:Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData"/> and <see cref="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache"/> if requested.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.ContentCache.ContentCacheGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.ContentCache.ContentCacheGenerator.CollectAssets(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read files to generate <see cref="T:Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData"/> and <see cref="T:Keen.VRage.ContentPipeline.Project.Features.Startup.StartupBlobsCache"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.ContentCache.ContentCacheGenerator.SaveCacheFile(Keen.VRage.Library.Filesystem.ContentCache.ContentBlobData,System.String)">
            <summary>
            Saves content blob data to the specified file name.
            </summary>
            <param name="filename">Default is <see cref="F:Keen.VRage.ContentPipeline.Project.ContentCache.ContentCacheGenerator.CONTENT_CACHE_FILE_PATH"/>.</param>
            <param name="contentBlobData"></param>
            <returns>Full path of the newly create cache file</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCache.LoadCacheOrCreate(System.String,System.String,Microsoft.Extensions.Logging.ILoggerFactory,System.Exception@)">
            <summary>
            Loads the cache, either from a file on a specified path, or if it does not exist or is not readable,
            create new empty cache.
            </summary>
            <param name="cacheFileFullPath">Full path of the cache file containing cached items from previous sessions</param>
            <param name="baseProjectPath">Path of the project folder, meaning the folder containing project file</param>
            <param name="loggerFactory"></param>
            <param name="loadException">Exception if any</param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.CachedItems">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#FileSystem#FileHashesCacheModel}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Project#FileSystem#FileHashCacheRecord}}#Set(System.Object,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Project#FileSystem#FileHashCacheRecord}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Project#FileSystem#FileHashCacheRecord}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#ContentPipeline#Project#FileSystem#FileHashCacheRecord}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Set(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@,System.Collections.Generic.Dictionary{System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel.TypeInfoHolder.CachedItemsAccessor.Get(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashesCacheModel@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#FileSystem#FileHashCacheRecord}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Set(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.FileHashAccessor.Get(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Set(System.Object,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Set(System.Byte@,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Set(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.ModificationTimeAccessor.Get(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Set(System.Object,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#DateTime}#Set(System.Byte@,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Set(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord.TypeInfoHolder.CreationTimeAccessor.Get(Keen.VRage.ContentPipeline.Project.FileSystem.FileHashCacheRecord@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileImporter">
            <summary>
            Provides methods for importing new files into the project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileImporterExtensionAttribute">
            <summary>
            Attribute used to target FileImporters
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyException">
            <summary>
            Base exception that can be thrown from <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyRuntimeReadException">
            <summary>
            Exception when after direct manipulation with project items the filesystem was changed accordingly, however
            the results could not be read in order to apply those changed in the project.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeIOOperationException">
            <summary>
            Exception where the safe IO mechanics helping to ensure that operations consisting of multiple files' IO all succeed or fail
            failed during the recovery operations. When this exception is thrown, the files related to the operation remained in 
            inconsistent state, e.g. only some files were moved but not others, some temporary files remained on disk.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyOperationRequestException">
            <summary>
            Exception raised when attempting to perform operation via <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/> that is not expected
            for the actual state of the registered files.
            <br/>
            E.g. trying to create asset on path that already contains file or folder;
            deleting/moving/renaming item that is not registered.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyReadOnlyViolationException">
            <summary>
            Exception caused by attempting to make change to project files when the project is in read-only mode
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter">
            <summary>
            Delegate used to write to target stream. Debug name is also available for convenience purposes.
            </summary>
            <param name="targetStream">The stream to which file content should be written to</param>
            <param name="debugName">The debug name, should be used only for easily debugging issues with writing/serializing</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems">
            <summary>
            Data about items found initially in the project folder.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems.#ctor(Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs[],Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs[],Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset[],Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder[],Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent[],Keen.VRage.ContentPipeline.Project.FileSystem.FolderWithUnreadableParent[],Keen.VRage.ContentPipeline.Project.FileSystem.LooseMetafile[])">
            <summary>
            Data about items found initially in the project folder.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems.UnreadableFolder">
            <summary>
            Folders which could not be properly read, for example metafile could not be read.
            Items inside unreadable folders are listed in <see cref="P:Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems.AssetsWithUnreadableParent"/> and <see cref="P:Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems.FoldersWithUnreadableParent"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset">
            
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset.#ctor(System.String,System.Exception,Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAssetType)">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent">
            
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent.#ctor(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs)">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FolderWithUnreadableParent">
            
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.FolderWithUnreadableParent.#ctor(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs)">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder">
            
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder.#ctor(System.String,System.Exception,Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolderType)">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.LooseMetafile">
            
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.LooseMetafile.#ctor(System.String)">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolderType">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAssetType">
            
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ItemChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.ItemChangedEventArgs.ProjectRelativePath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ContentItemChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ItemRenamedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetModifiedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetModifiedEventArgs.FileChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetModifiedEventArgs.MetadataChange">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FolderModifiedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FolderModifiedEventArgs.MetadataChange">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetFileChangeArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetFileChangeArgs.NewData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetFileChangeArgs.NewHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetFileChangeArgs.NewName">
            <summary>
            New case-sensitive version of the name, if changed
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetMetadataChangeArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetMetadataChangeArgs.NewMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetRemovedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs.MetadataMigrationsContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.FolderRemovedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs.Data">
            <summary>
            Parsed data of the file if an available method for the extension existed
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs.Metadata">
            <summary>
            Metadata if the metafile exists, <see langword="null"/> if metafile does not exist
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs.MetadataMigrationsContext">
            <summary>
            Metadata migrations context that should be preserved in order to preserve bundles info
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs.FileHash">
            <summary>
            Hash of the file, may be obsoleted in the future so it is read asynchronously
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs.Name">
            <summary>
            Case sensitive name of the asset
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.PathPointer">
            <summary>
            Path traversal helper struct
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.PathPointer.IsEnd">
            <summary>
            Whether this is the last path segment and it is no longer possible to descent
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.PathPointer.RemainingDepth">
            <summary>
            How many times it is possible to descend in the path
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.PathPointer.Descend">
            <summary>
            Descent in the path. Only possible if <see cref="P:Keen.VRage.ContentPipeline.Project.FileSystem.PathPointer.IsEnd"/> is <see langword="false"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy">
            <summary>
            </summary>
            <remarks>
            Enabling file watcher is two steps procedure:
            <br/>
            1. Enable file watching
            <br/>
            2. Enable file changes handling
            <para/>
            This setup allows for very good safety of change synchronization during project loading.
            At start, proxy initially read all project files. Immediatelly after that, the filewatcher should start listening
            for any file changes (1), however in the meantime the project is usually not ready to accept and handle these changes
            This is done by not enabling (2) until the project is loaded. In the meantime, all detected file chanegs are only cached
            and once (2) is enabled after project is loaded, all detected file changes during loading are handled.
            <para/>
            File operations can be only performed on valid assets that were found during initial read. Operations can be carried out only partially
            if possible (e.g. when deleting a folder, only assets that could be deleted from file system are removed). Folder/file and its metafile
            are handled as atomic units, it is ensured that they either both or neither of them are transformed as requested. Any temporary items
            are cleared after operation ends (both success or fail), otherwise exception is thrown. Move (and rename) operations are
            conservative, moved item never disappears nor is duplicated. If that is not possible, exception is thrown.
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.OnChangesPendingNotificationNOSYNC">
            <remarks>
            This method can run from a foreign thread!
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ExpandProjectRelativePathsFromDatabaseForDeletion(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            When any of the paths is a folder in file proxy's database, and the folder seems to be deleted on filesystem,
            all files in the folder found recursively are also added to the returned collection.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ExpandProjectRelativePathsFromFileSystemForAddOrModify(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            When any of the paths is a folder in file system, and the folder seems to be newly added to the project,
            all files in the folder found recursively are also added to the returned collection.
            </summary>
            <returns>Collection of project relative paths</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.HasFileContentChanged(Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFileInfo,Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFileInfo@)">
            <summary>
            Checks whether the file content has changed.
            If the file is not found at all, this method returns <see langword="false"/>.
            In out parameter there is the updated file record (or original one if no change was detected
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy._synchronizationContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.#ctor(System.String,System.String[],Microsoft.Extensions.Logging.ILoggerFactory,Keen.VRage.ContentPipeline.Project.Structure.IProjectSynchronizationContext,System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="projectFolder"></param>
            <param name="readFileContentExtensions">Extensions for which teh file content should be read when file is added/modified. Must include leading dot "."</param>
            <param name="filesExtensionsToMaterializeWhitelist">If present only files with corresponding extensions will be materialized</param>
            <param name="loggerFactory"></param>
            <param name="synchronizationContext">Synchronization context used to handle file changes on the main thread. If null, file watcher is disabled.</param>
            <param name="isReadOnly">The project should be read-only, any attempts to write items to the project folder are forbidden.</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Initialize(System.Boolean)">
            <summary>
            </summary>
            <param name="doNotIgnoreAnything">Whether when the project is read, all files including hidden and special extensions should be read</param>
            <returns><see langword="null"/> if the folder could not be found,
            otherwise <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader"/> used to initially read files with progress tracking</returns>
            <exception cref="T:System.InvalidOperationException">THe file proxy has already been initialized</exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryCheckCachedHash(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,System.String,System.Nullable{System.ValueTuple{System.String,System.Byte[],System.String,System.Nullable{System.Guid}}}@,System.Exception@)">
            <summary>
            Validates that the file hash retrieved from hash cache matches the hash stored in metadata, if it does not match try to read the file
            </summary>
            <returns>
            False if the file reading failed. If true, either the hashes were matching, otherwise the file was read and the actual hash is returned.
            If <paramref name="hashMismatchData"/> is not null hashes were not matching.
            </returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryReadFileAndMetafile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File,System.String@,System.Byte[]@,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.Migrations.MigrationsContext@,System.Nullable{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAssetType}@,System.Exception@)">
            <summary>
            This method is called from multiple threads for different <paramref name="file"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryReadFileInternal(System.String,System.String@,System.Byte[]@,System.Exception@,System.Nullable{System.Guid}@)">
            <summary>
            Simply reads file content, determine its hash and try to get asset ID from it. Caching is not used
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryReadFolderAndMetafile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder,Keen.VRage.ContentPipeline.Metafiles.MetaData@,Keen.VRage.Library.Serialization.Migrations.MigrationsContext@,System.Nullable{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolderType}@,System.Exception@)">
            <summary>
            This method is called from multiple threads for different <paramref name="folder"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.WriteAsset(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.CustomSerializationContext[])">
            <summary>
            Writes to an existing file in the project. The method supports writing to file, metafile, both and neither of them.
            </summary>
            <param name="assetProjectRelativePath"></param>
            <param name="streamWriter"></param>
            <param name="metaData"></param>
            <param name="metadataCustomSerializationContexts"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.WriteFolderMetafile(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.CustomSerializationContext[])">
            <summary>
            
            </summary>
            <param name="folderProjectRelativePath"></param>
            <param name="metaData"></param>
            <param name="metadataCustomSerializationContexts"></param>
            <returns></returns>
            <exception cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyOperationRequestException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryWriteFileAndMetafile(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.CustomSerializationContext[],System.String@,System.Byte[]@,System.Exception@)">
            <remarks>
            This method does not manipulate <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>'s databse of items
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryWriteFile(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter,System.String@,System.Byte[]@,System.Exception@)">
            <remarks>
            This method does not manipulate <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>'s databse of items
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryWriteMetafile(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.CustomSerializationContext[],System.Exception@)">
            <remarks>
            This method does not manipulate <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>'s database of items
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.CreateFolder(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="folderProjectRelativePath"></param>
            <param name="reuseExistingFolder">If <see langword="true"/>, if the folder with same name (case insensitive) already exists, instead of
            removing it the folder will be preserved including its content and returned as created. Note that the case-sensitive name of folder
            might not match the one in <paramref name="folderProjectRelativePath"/> in this case. Otherwise, as with any other operation,
            unregistered item occupying the target path will be deleted.</param>
            <returns></returns>
            <exception cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.FileSystemProxyOperationRequestException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ImportFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Imports files to the project. If the file is located outside of the target folder, it is copied to the folder first.
            If project file already exists with same name, it is overwritten by the imported file. Non-project items with same name are
            deleted when importing the file.
            
            If no file existed, metafile is created for it, otherwise it is reused. If metafile for any asset could not be created,
            whole operation fails.
            
            If operations fails, no files are copied to the folder, and no metafile remains created.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.IntroduceAssetWithUnreadableParent(Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent)">
            <summary>
            Used only to introduce item that was originally read as not having valid parent into the project database.
            Meant to be called from <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ProjectItemsResolver"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.IntroduceFolderWithUnreadableParent(Keen.VRage.ContentPipeline.Project.FileSystem.FolderWithUnreadableParent)">
            <inheritdoc cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.IntroduceAssetWithUnreadableParent(Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent)"/>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.GetTrackedFileInfo(System.IO.FileInfo,System.Boolean)">
            <param name="fileInfo"></param>
            <param name="ensureMostRecent">Whether the file info should be first refreshed from OS to be filled with actual data</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.GetTrackedFolderInfo(System.IO.DirectoryInfo,System.Boolean)">
            <param name="folderInfo"></param>
            <param name="ensureMostRecent">Whether the file info should be first refreshed from OS to be filled with actual data</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.GetRefreshedFileSystemInfo``1(``0)">
            <summary>
            Refreshes the provided <paramref name="original"/> to its most recent state from OS.
            This also includes the FullPath if possible.
            </summary>
            <returns>Most recent <see cref="T:System.IO.FileSystemInfo"/> instance.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.TryWriteMetafileStatic(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.CustomSerializationContext[],System.Exception@)">
            <remarks>
            This method does not manipulate <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>'s database of items
            </remarks>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.TotalItems">
            <summary>
            Number of files and folders initially found in the project. The pair file/folder + metafile counts as single item
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.ReadInitialItemsSimple">
            <summary>
            Get items read from the project folder. All readable items returned by this method are considered valid assets and
            proxy will treat them that way (e.g. change on filesystem propagate item was modified).
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.GetInitialItems">
            <summary>
            Get the read initial items.
            This method should be called only after the <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.ReadInitialItemsCoroutine"/> has ran to the completion.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.PrepareInitialReaderFromItems(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy,System.IO.FileSystemInfo[],Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)">
            <summary>
            Prepares <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader"/> instance, compiling the list of all items found in the project into pairs, if possible.
            No files are read, that is done by <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.ReadInitialItemsCoroutine"/> method.
            </summary>
            <param name="proxy"></param>
            <param name="initialFileSystemInfos"></param>
            <param name="loggerFactory"></param>
            <param name="doNotIgnoreAnything">Whether even files that should be normally ignored (special extensions like .tmp) should be included</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.InitialReader.UnreadableItemType">
            <summary>
            The reason why item item on filesystem should not be considered as valid part of the project
            </summary>
        </member>
        <member name="E:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFileSystemWatcher.ChangesPendingNotification">
            <summary>
            Event fired in case there are filesystem item changes pending.
            Use <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFileSystemWatcher.TryGetPendingFileSystemChanges(System.Collections.Generic.HashSet{System.String}@,System.Boolean)"/> to collect the changes.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFileSystemWatcher.TryGetPendingFileSystemChanges(System.Collections.Generic.HashSet{System.String}@,System.Boolean)">
            <summary>
            Try get detected changes if the file watcher is currently idle.
            </summary>
            <param name="changesProjectRelativeStandardizedPaths">Set of changes detected</param>
            <param name="clearChanges">In case the watcher is idle and changes could be retrieved,
            specify whether the internal cache of changes should be cleared. When <see langword="false"/>,
            it effectively only peeks the changes</param>
            <returns>Whether the changes could have been retrieved.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.UpdateFile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File,Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFileInfo)">
            <summary>
            Updates database file record with provided <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.GetTrackedFileInfo(System.IO.FileInfo,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RenameFile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File,System.String)">
            <summary>
            Renames the file in the database. Only name and full path will be changed, it is recommended to call 
            <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RefreshFile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File,System.Boolean,System.Boolean)"/> after calling this using the returned value.
            </summary>
            <param name="oldFile"></param>
            <param name="newFileName"></param>
            <returns><see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File"/> struct from the database after the new name is applied</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RenameFolder(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder,System.String)">
            <summary>
            Renames the folder in the database. Only name and full path will be changed, it is recommended to call 
            <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RefreshFolder(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder,System.Boolean,System.Boolean)"/> after calling this using the returned value.
            </summary>
            <param name="oldFolder"></param>
            <param name="newFolderName"></param>
            <returns><see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder"/> struct from the database after new name is applied</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.MoveFolder(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder,System.String)">
            <summary>
            Moves the folder to different folder. For files, use <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.UnregisterFile(System.String)"/> and <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RegisterFile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File)"/>
            or <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RefreshFile(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.File,System.Boolean,System.Boolean)"/> in case the target was overwritten.
            <br/>
            This method expects that the folder this folder is moved to does not contain item with same name already.
            <br/>
            It is recommended to call <see cref="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.RefreshFolder(Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.Folder,System.Boolean,System.Boolean)"/> after calling this using the returned value.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.UnregisterFolder(System.String)">
            <summary>
            Unregisters folder, it must be empty.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectFolderDatabase.GetItemsInFolder(System.String,System.Boolean)">
            <summary>
            Get registered items that are contained in the given folder directly, nonrecursive.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.ProjectRoot">
            <summary>
            Just like FolderNode, but this one is not derived from <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.MNode"/> since it does not contain metafile
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy.IProxyDatabaseReader">
            <summary>
            Interface used only for reading the state of the proxy database, useful for unit testing
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProxyOperationResult">
            <summary>
            Type representing the result of requested file system operations performed by <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.ProjectFileSystemProxy"/>.
            If the operation allows it, only subset of items that were able to be manipulated are reported as successful operations,
            other report failure.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.OperationFailureDescription">
            <summary>
            Description why the file system operation could not be performed for the given item.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation">
            <summary>
            Utility class that specify multiple operations that should be done on OS file system with following properties:
            <para/>
            <b>Guarantees:</b>
            <br/>- When method completes, either all of the operations completed successfully, or no operations was executed and bulk operation failed
            <br/>- When bulk operation failed, the file system items exist on the same place as before the operation.
            However filesystem attributes such as creation or modification times are not preserved.
            <br/>- When bulk operation failed, the exception that caused the failure is returned.
            <br/>- Any temporary files created for recovery purposes are created in the same folder.
            <br/>- Operations are type-safe, the operation specify whether the target is folder or a file and if that type
            is not found on the target location, operation fails.
            <para/>
            <b>Assumptions:</b>
            <br/>- If item was manipulated with, accessing it again immediately after manipulation will succeed. If this assumption is broken
            during recovery from failure, <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeIOOperationException"/> is thrown.
            <br/>- File system is case-insensitive. (+ other common file system assumptions such as given path can have only single file or single folder)
            <br/>- Temporary files and folders with .tmp extension can be created in the folder and manipulated freely.
            <br/>- Desired operations are considered always destructive, e.g. move operation with target path being existing item
            always replaces the target item with itself. Directory trees are replaced, not combined.
            <br/>- The individual operations performed do not interact with same items.
            <para/>
            The file system operations are performed using <see cref="T:Keen.VRage.ContentPipeline.Common.FileHelper"/> class.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.TryExecute(System.Exception@)">
            <summary>
            
            </summary>
            <param name="failureException"></param>
            <exception cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeIOOperationException">Operation recovery or cleanup procedure could not be completed.</exception>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.IntermediateState.Revert">
            <summary>
            Reverts the operation.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.IntermediateState.Clean">
            <summary>
            Cleans the operation so no temporary files remain.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.UniversalIntermediateState.BackupPathIfNeeded(System.String)">
            <summary>
            Backups the path, moving it to temporary location, leaving the path empty
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.Operation.DoWithBackup(Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.IntermediateState@,System.Exception@)">
            <summary>
            Performs the action, but leaves an option to recover original state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.MoveItemOperation">
            <summary>
            Operation moving an item on file system. Can also be used for renaming items. Source and destination paths can be same,
            in that case if the item name differs in letter-casing, it is properly renamed to target letter-case version of the name.
            If both paths denote the same item, and case-sensitive names are also same, no operation is performed.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.WriteFileOperation">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.CreateFolderOperation">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.DeleteItemOperation">
            <summary>
            Deletes the specified item. If the items does not exist, nothing is done.
            Validates that the deleted item is of specified type.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.DeleteItemOperation.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            </summary>
            <param name="fullPath"></param>
            <param name="isFolder">If not null, validation is performed that if the item exists, it is of correct type.
            If <see langword="true"/>, check that it is folder, otherwise check that path is file.</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SafeFileSystemBulkOperation.OperationResultsEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder">
            <summary>
            Builder for <see cref="T:Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFileInfo.FileProjectRelativePath">
            <summary>
            Lower case, standardized version of the full file path. For tracking case sensitive name, use <see cref="P:Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFileInfo.NameCaseSensitive"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFolderInfo.FolderProjectRelativePath">
            <summary>
            Lower case, standardized version of the full folder path. For tracking case sensitive name, use <see cref="P:Keen.VRage.ContentPipeline.Project.FileSystem.TrackedFolderInfo.NameCaseSensitive"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetCreationArguments">
            <summary>
            Arguments for asset generation, used to have context where the asset should be created to primarily determine new asset name
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetCreationArguments.SelectNewFileNameAsync(System.String,System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.NameSelectionStrategy)">
            <summary>
            Selects a new file name with respect to various strategies.
            </summary>
            <param name="targetFileSummary">
            Simple summary of the asset that should be create, in one or two words.
            Will be used when querying the name to the user in meaningful description</param>
            <param name="extension"></param>
            <param name="suggestedNameWithoutExtension"></param>
            <param name="strategy"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorAttribute">
            <summary>
            Attributes for <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProvider"/> to be automatically indexed
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorGroup">
            <summary>
            Node of asset generator that can contain nested nodes
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorGroup.Nested">
            <summary>
            List of nested nodes that will be displayed as children of this node
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorIndexer">
            <summary>
            Indexer for <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorAttribute"/> that provides access to available <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProvider"/> instances
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorIndexer.InitializeGeneratorProviders">
            <remarks>
            Normally we would do this in <see cref="M:Keen.VRage.Library.Reflection.MetadataIndexerBase.AfterInit"/> method, however there is need to access other metadata indexers
            during this method (AssetGeneratorProvider accesses AssetsIndexer to get file extensions) and in PostInit it causes StackOverflow
            </remarks>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorNode">
            <summary>
            Base type of asset generator nodes.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorNode.Name">
            <summary>
            The name of the node that will be displayed to the user
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOption">
            <summary>
            Asset generator node that does not have any nested nodes but is able to generate assets.
            Can be marked as disabled with additional text that should be displayed to the user - reason why the asset generation is not possible
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOptionHelper">
            <summary>
            Methods to create generator options for common purposes
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOptionHelper.GenerateAssetFromSingleAsset``2(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,System.Action{Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.IO.Stream,System.String},System.Boolean)">
            <summary>
            Gets generator options that creates single asset type out from exactly single asset selected.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOptionHelper.GenerateAssetFromNoAsset``1(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter)">
            <summary>
            Create generator option that is enabled when no asset is selected and creates given asset type
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOptionHelper.GenerateAssetFromNoAsset``1(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,System.Action{Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.IO.Stream,System.String})">
            <summary>
            Create generator option that is enabled when no asset is selected and creates given asset type
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOptionHelper.GenerateFromNoAsset(System.String,System.String,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments,Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputDelegate,System.Boolean)">
            <summary>
            Create generator option that is enabled when no asset is selected
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutput">
            <summary>
            Data about output of the asset generator
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutput.FilesToGenerate">
            <summary>
            List of files that should be generated
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutput.FailureReason">
            <summary>
            If not null, marks that the generation is not possible and contains reason
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutput.AfterFilesCreated">
            <summary>
            Optional action that occurs after the files were successfully created.
            Currently workaround for manipulating CompositeBindingsConfiguration after creating new prefab
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutput.Template">
            <summary>
            If asset is being created from template additional actions may be required
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputDelegate">
            <summary>
            Delegate that provides data about generator output that will be then use to create actual files in the project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputFileInfo">
            <summary>
            Data about single file that should be created as part of asset generation
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputFileInfo.FileWriteAction">
            <summary>
            Delegate used to write to the newly created asset file
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputFileInfo.FileName">
            <summary>
            The file name of the newly generated asset
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOutputFileInfo.Guid">
            <summary>
            Optional Guid that the new asset will use in the project. Used for correct references when generating multiple interconnected assets.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProvider">
            <summary>
            Base class for asset generator providers that they need to inherit from.
            Provider can return multiple generator nodes, node is either a <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorGroup"/> that contains other nested nodes, or
            <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorOption"/> that has can be used to generate asset. 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments">
            <summary>
            Data needed for asset generator provider to determine available generators and their enable status
            </summary>
            <param name="SelectedAssets">The collection of assets that are currently selected and are available to the generator</param>
            <param name="Project">The project as the context for creating the asset</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments.#ctor(System.Collections.Immutable.ImmutableArray{Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile},Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)">
            <summary>
            Data needed for asset generator provider to determine available generators and their enable status
            </summary>
            <param name="SelectedAssets">The collection of assets that are currently selected and are available to the generator</param>
            <param name="Project">The project as the context for creating the asset</param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments.SelectedAssets">
            <summary>The collection of assets that are currently selected and are available to the generator</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.AssetGeneratorProviderArguments.Project">
            <summary>The project as the context for creating the asset</summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.GeneratedNameSelectionResult">
            <summary>
            Struct containing data about selection of new asset name
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.IAssetGeneratorInteractivity">
            <summary>
            Interface for introducing interactivity, for example querying end-user for text input.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.IAssetGeneratorInteractivity.QueryStringAsync(System.String,System.String,System.Func{System.String,System.String},System.String,System.String)">
            <summary>
            Queries for single text value.
            </summary>
            <param name="title">Title of the query</param>
            <param name="description">Description of the query</param>
            <param name="validator"></param>
            <param name="suggestedText">Name that should be offered to the user as possible input</param>
            <param name="hintText">Hint for the user on what string is expected</param>
            <returns>string value that user entered, or <see langword="null"/> if action was cancelled</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.NameSelectionStrategy">
            <summary>
            Strategy used for selecting new name when generating new asset
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.NameSelectionStrategy.UseExact">
            <summary>
            Use exact name provided as suggested name, it must not be null.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.NameSelectionStrategy.UseVariant">
            <summary>
            If suggested name is not specified, it is queried from the user. If the name exists, unique variant (e.g. number appended)
            is selected automatically.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetGenerators.NameSelectionStrategy.Query">
            <summary>
            Always query for a new unique name.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetSourcesResult">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.AssetSourcesResult.SourcesInvalid">
            <summary>
            The source is assigned but was not found in the project, or is not asset source
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetSourcesStatus">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Exceptions.DataTooNewException">
            <summary>
            Exception thrown when project encounters data from version above the current's application version.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile.AssetInterfaceReload">
            <summary>
            Observable for event where the <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile.AssetInterface"/> instance changes
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile.OnChangeUpdateAssetInterface(System.Byte[],System.Boolean,Keen.VRage.ContentPipeline.Metafiles.MetaData)">
            <summary>
            Updates the asset interface, includign checking if the new file content is now unreadable,
            but also opposite way try to recreate asset interface if the previous interface isnt what we want
            </summary>
            <param name="newFileContent"></param>
            <param name="fileChanged">Whether the change  was done to the asset file (fileContent can be null even in this case)</param>
            <param name="newMetaData">New metadata if changed, null if they didnt change</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetsFolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetsFolder.SaveNewMetaData(Keen.VRage.ContentPipeline.Metafiles.MetaData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="metaData"></param>
            <param name="ignoreMigrationContext"></param>
            <returns>Only case where <see langword="null"/> is returned is when the item should not be saved due to being marked for delete, or when saving failed</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetSourceFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetSourcesFolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetSourcesFolder.SaveNewMetaData(Keen.VRage.ContentPipeline.Metafiles.MetaData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="metaData"></param>
            <param name="ignoreMigrationContext"></param>
            <returns>Only case where <see langword="null"/> is returned is when the item should not be saved due to being marked for delete</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.Initialize(System.Byte[])">
            <summary>
            Code called after the batch of files are created in the project structure.
            This method can find the files added in the same batch.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.ParallelPostInitialize(Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider,System.Byte[])">
            <summary>
            Code called after <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.Initialize(System.Byte[])"/> method has completed for all files added to the
            project structure in the batch.
            
            Can be used to execute CPU-heavy post initialization logic that can be executed in parallel with other files
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.PostInitialize(System.Byte[])">
            <summary>
            Code called after <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.ParallelPostInitialize(Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider,System.Byte[])"/> method has completed for all files added to the
            project structure in the batch.
            
            Can be used to search for some files which were registered in the process of the <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.Initialize(System.Byte[])"/> method.
            
            When this method is called all references to this asset should be resolved already.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.SaveMetaData(System.Boolean)">
            <summary>
            
            </summary>
            <remarks>
            Method does not return modification event args, sicne it does not make sense to handle them as we saved 
            live metadata instance and therefore no changes will be detected when change is handled.
            </remarks>
            <param name="ignoreMigrationContext"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.SaveNewMetaData(Keen.VRage.ContentPipeline.Metafiles.MetaData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="metaData"></param>
            <param name="ignoreMigrationContext"></param>
            <returns>Only case where <see langword="null"/> is returned is when the item should not be saved due to being marked for delete</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.SaveFileAsync(Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter)">
            <summary>
            Saves the file once it is possible, managed by <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController">
            <summary>
            Responsible for managing access to the file.
            Note that this is instance *not* thread-safe and should be manipulated only from the main project's synchronization context.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController.AcquireReadLock(System.String)">
            <summary>
            Acquires reading lock that causes that theproject will disallow any modification to the asset file,
            such as writing, moving, renaming, deleting on the ContentPipeline Project level.
            </summary>
            <param name="debugName">The debug name of the lock</param>
            <returns>Disposable token that is used to release the lock</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController.SaveFileWhenPossibleAsync(Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter)">
            <summary>
            Writes the files when no lock is acquired on this file.
            If this file has active read lock, the save is postponed, where if more requests to save are requested during waiting,
            only most recent save request is executed once all locks are released.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController.PendingSaveExecutor.UnblockSaves">
            <summary>
            Marks that saves are now possible after they were being blocked.
            </summary>
            <remarks>
            This method cannot be called when saving is not being blocked.
            </remarks>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController.PendingSaveExecutor.BlockSaves">
            <summary>
            Marks that all attempts to save the file should be blocked until <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFile.FileAccessController.PendingSaveExecutor.UnblockSaves"/> is called.
            </summary>
            <remarks>
            This method cannot be used when saving is already being blocked.
            </remarks>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.CreateSubfolder(System.String,System.Boolean)">
            <summary></summary>
            <param name="name"></param>
            <param name="reuseExistingFolder">Whether if unregistered folder with same name exists on disk already, it should be reused.</param>
            <returns>The name of the newly created folder if success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.CreateOrOverwriteFile(System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter,System.Nullable{System.Guid})">
            <summary>
            </summary>
            <param name="filename"></param>
            <param name="fileWriter"></param>
            <param name="newAssetGuid">Changing guids currently not supported</param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.ImportFilesToThisFolder(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load files from outside the editor into the folder.
            </summary>
            <param name="fileFullPaths">File paths of the files</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.GetAllChilds(System.Collections.Generic.IList{Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem})">
            <summary>
            Enumerates all childs and adds them to <paramref name="list"/>. Subfolders are enumerated recursively.
            </summary>
            <param name="list">List to be filled with items.</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleFileCreated(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.Migrations.MigrationsContext,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Handles the file system created event that occured to an item in this folder instance.
            
            The method should only create an appropriate instance
            and attach it to the project tree, the additional logic is handled by the caller of this method
            using the returned instance of the item.
            </summary>
            <param name="name">The name of the newly created file</param>
            <param name="metaData"></param>
            <param name="fileHash"></param>
            <param name="metadataMigrationsContext"></param>
            <param name="logger"></param>
            <returns>The instance of the file that was created and attached to project tree, or <see langword="null"/>
            if no file was created</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleFolderCreated(System.String,Keen.VRage.ContentPipeline.Metafiles.MetaData,Keen.VRage.Library.Serialization.Migrations.MigrationsContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Handles the file system created event for folder that occured to an item in this folder instance.
            
            The method should only create an appropriate instance
            and attach it to the project tree, the additional logic is handled by the caller of this method
            using the returned instance of the item.
            </summary>
            <param name="name">Name of the created folder</param>
            <param name="metaData"></param>
            <param name="metadataMigrationsContext"></param>
            <param name="logger"></param>
            <returns>The instance of the folder that was created and attached to project tree, or <see langword="null"/>
            if no folder was created</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleFolderRemoved(System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="removeReferencesToDeletedAssets"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleAssetChanged(System.String,System.Nullable{Keen.VRage.ContentPipeline.Project.FileSystem.AssetFileChangeArgs},System.Nullable{Keen.VRage.ContentPipeline.Project.FileSystem.AssetMetadataChangeArgs},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Handles the file system changed event for the item that occured to an item in this folder instance.
            
            The method should notify the item about change directly.
            </summary>
            <param name="name"></param>
            <param name="assetFileChange"></param>
            <param name="metadataChange"></param>
            <param name="logger"></param>
            <returns>The instance of a file if the target of the event was a file</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleAssetDeleted(System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Handles the file system deleted event for this item that occured to an item in this folder instance.
            
            The method should notify the item about deletion directly.
            </summary>
            <param name="name"></param>
            <param name="removeReferencesToDeletedAssets"></param>
            <param name="logger"></param>
            <returns>The instance of an item if found, <see langword="null"/> otherwise</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder.HandleItemRenamedEvent(System.String,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Handles the file system renamed event for this item that occured to an item in this folder instance.
            
            The method should notify the item about the change directly.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
            <param name="logger"></param>
            <returns>The instance of an item if found, <see langword="null"/> otherwise</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.MarkForDelete">
            <summary>
            Marks this item as being deleted. Such asset should not e.g. save data to disk or start processing.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.FileSystemRename(Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder,System.String)">
            <summary>
            Renames the item in underlying project container
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.FileSystemMove(System.Collections.Generic.Dictionary{Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder},Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder,System.String)">
            <summary>
            Moves the item to another location in underlying project container
            </summary>\
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.FileSystemCopy(Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder,Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,System.String)">
            <summary>
            Copy the item to target location in underlying project container with a new file name.
            If the target is the same folder as the item is currently in, it has to have different name.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.FileSystemDelete(Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents.Builder)">
            <summary>
            Deletes the item from underlying project container
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.OnRenamed(System.String)">
            <summary>
            Defines the behavior when a change of name is detected from file system
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.OnDeleted">
            <summary>
            Defines the behavior when a file deletion event is received from file system
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem.IsTransitiveChildOf(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder)">
            <summary>
            Method is checking if the item is file/folder in the given folder.
            </summary>
            <param name="folder">Given folder.</param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath">
            <summary>
            Path describing an explorer item relative to a project.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath.ProjectPath">
            <summary>
            Full path to project folder.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath.RelativePath">
            <summary>
            Item path relative to <see cref="F:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath.ProjectPath"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath.FullPath">
            <summary>
            Item full path.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ExplorerPath.ProjectFolderName">
            <summary>
            Name of the project folder.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerProjectFolder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerSubAsset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem">
            <summary>
            <see cref="T:Keen.VRage.ContentPipeline.Metafiles.MetaDataItem"/> used for keeping track of change state. Useful to detect
            if file has been changed after loading project in order to perform any desired actions.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.FileHash">
            <summary>
            Last known hash of a file
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Structure#FileInfoMetaDataItem}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem.TypeInfoHolder.FileHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.FileInfoMetaDataItem@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface.ValuesReloaded">
            <summary>
            Observable event when the content of the file this interface is for is changed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface.OnAssetChangedExternally(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface.OnAssetDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IAssetInterface.GetReferences">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IItemWithMetaData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.IItemWithMetaData.MetaData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IManipulatorProvider">
            <summary>
            An interface that allows getting a manipulator for a given definitionObjectBuilder
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IManipulatorProvider.CreateObjectManipulator(System.Guid)">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetDependenciesContainer">
            <summary>
            Provides access to information what dependencies of the asset are outdated and should be checked during asset patching
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult">
            <summary>
            Contains result of asset importing (validation and patching)
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.UpToDate">
            <summary>
            The asset data is up to date, data was not patched and no issues were found
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated">
            <summary>
            The asset data was outdated but recoverable. See <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated.IsPatched"/> to determine if the data was patched during import. 
            </summary>
            <param name="RecoverableIssues">
            List of recoverable issues that were encountered during import.
            Whether they were recovered from or not can be determined from <paramref name="IsPatched"/>
            </param>
            <param name="IsPatched">
            Gets whether the outdated asset data was patched during import. Patching can only occur for asset that is not read-only.
            </param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated.#ctor(Keen.VRage.Library.Collections.Readers.ListReader{Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue},System.Boolean)">
            <summary>
            The asset data was outdated but recoverable. See <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated.IsPatched"/> to determine if the data was patched during import. 
            </summary>
            <param name="RecoverableIssues">
            List of recoverable issues that were encountered during import.
            Whether they were recovered from or not can be determined from <paramref name="IsPatched"/>
            </param>
            <param name="IsPatched">
            Gets whether the outdated asset data was patched during import. Patching can only occur for asset that is not read-only.
            </param>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated.RecoverableIssues">
            <summary>
            List of recoverable issues that were encountered during import.
            Whether they were recovered from or not can be determined from <paramref name="IsPatched"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Outdated.IsPatched">
            <summary>
            Gets whether the outdated asset data was patched during import. Patching can only occur for asset that is not read-only.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Failed">
            <summary>
            The asset data is invalid, recovery is not possible.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetImportingResult.Failed.#ctor(Keen.VRage.Library.Collections.Readers.ListReader{Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue},Keen.VRage.Library.Collections.Readers.ListReader{Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue},System.Boolean)">
            <summary>
            The asset data is invalid, recovery is not possible.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.ParallelInitialize(Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider,System.Byte[])">
            <summary>
            Called from multiple threads. Can be used for CPU-heavy logic that is safe to execute in parallel to other assets
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.InitializeReferencesFromThisAsset">
            <summary>
            Extracts references from this asset to others, reusing cached info from metadata if possible.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.OnAssetChangedExternally(System.Byte[])">
            <summary>
            Method invoked when the connected asset file has changed (externally).
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.OnMetaDataChangedExternally(Keen.VRage.ContentPipeline.Metafiles.MetaData)">
            <summary>
            Method invoked when the connected asset metadata has changed (externally).
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.OnInterfaceDataModified(System.Boolean)">
            <summary>
            Invoked when the asset interface's data has been modified, e.g. by property inspector
            </summary>
            <param name="forceValuesReload">Whether the values should be reloaded.
            This options should not be used if the modification is not noticeable to user. This also includes user modifying the asset data via UI,
            since the value in UI is already changed and this method is used only to write-through the change</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.GetReferences">
            <summary>
            Returns all references contained in the asset.
            </summary>
            <returns>List of non empty references (this asset referencing other assets)</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.ClearReferencesOfGuidInternal(System.Guid)">
            <summary>
            In the current interface, clears all occurences of <paramref name="guid"/>.
            Effectivelly making it so that this asset is no longer referencing an asset with the given Guid.
            Only internal method, interfaces should implement it to apply the changes to internal data.
            Used by <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.ClearReferencesToAsset(System.Guid)"/>.
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/> of an asset to be no longer referenced from this <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/></param>
            <returns>Number of references removed.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.ClearReferencesToAsset(System.Guid)">
            <summary>
            Use this method to remove references to other asset, and notify about this change to UI.
            </summary>
            <param name="otherAssetGuid">The <see cref="T:System.Guid"/> of an asset to be no longer referenced from this <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/></param>
            <returns>Number of references removed.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.RefreshReferencesFromThisAsset">
            <summary>
            Updates the references in <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager"/> for the corresponding asset.
            The responsibility to update the references is on <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/> only.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.AddDependenciesToList(Keen.VRage.Library.Serialization.ObjectManipulator,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Structure.References.Reference}@)">
            <summary>
            Helper method to obtain all references from the <see cref="T:Keen.VRage.Library.Serialization.IAccessible"/> instance
            </summary>
            <param name="manipulator"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.AddDependenciesToList(Keen.VRage.Library.Serialization.IAccessible,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Structure.References.Reference}@)">
            <summary>
            Helper method to obtain all references from the <see cref="T:Keen.VRage.Library.Serialization.IAccessible"/> instance
            </summary>
            <param name="model"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.RemoveAllReferencesToGuidFromObjectManipulator(Keen.VRage.Library.Serialization.ObjectManipulator,System.Guid)">
            <summary>
            Clear all <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/> members and also <see cref="T:Keen.VRage.Library.Definitions.Definition"/> members in object manipulator that reference asset with <paramref name="guid"/>
            </summary>
            <param name="manipulator"></param>
            <param name="guid"></param>
            <returns>Number of referenced actually removed from the accessible</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.BuildInterfaceForAsset(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Byte[])">
            <summary>
            Automatically find and create an <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/> for the given asset.
            </summary>
            <param name="asset"></param>
            <param name="fileContent"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.BuildInterfaceOfTypeForAsset(Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile,System.Type)">
            <summary>
            Manually create an <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/> of the given type for the given asset.
            </summary>
            <param name="asset"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.AncestorTypeHasAttribute``1(System.Type)">
            <summary>
            Checks if any ancestor type of <paramref name="type"/> has attribute <typeparamref name="TAttr"/>
            </summary>
            <param name="type"></param>
            <typeparam name="TAttr"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.GetDependencyMembers``1(Keen.VRage.Library.Serialization.ObjectManipulator)">
            <summary>
            Enumerates over all members of type <typeparamref name="T"/>, not considering members of other definitions
            </summary>
            <typeparam name="T"></typeparam>
            <param name="manipulator"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface.AssetSourcesData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterfaceCreationContext">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterfaceCreationContext.Asset">
            <summary>
            Current Asset
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterfaceExtensionAttribute">
            <summary>
            Used to indicate what extensions an AssetInterface can be used for
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.BinaryAssetInterface">
            <summary>
            Base asset inteface class for (usually) binary assets that come from an external software, not from the Editor.
            
            <para>
            The additional parameters for processing that can be modified via the property inspector are stored
            in the corresponding metafile. This interface allows to modify (only) this metadata.
            </para>
            
            The difference from <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorAssetInterface"/> is that when any value is changed, the asset is reprocessed
            immediatelly and the asset file is not touched at all.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomAssetInterfaceGenerator">
            <summary>
            Can be used to modify generation of AssetInterfaces
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializableAssetInterfaceGenerator">
            <summary>
            Can be used to modify generation of AssetInterfaces of serializable assets
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomAssetInterfaceGeneratorAttribute">
            <summary>
            Applying this attribute to a class will mean that a ICustomAssetInterfaceGenerator will be used
            to generate the AssetInterface of the class and its inherited classes.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfo.Content">
            <summary>
            The information content
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfoProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfoProvider.EnabledStatus">
            <summary>
            Whether the custom information is currently available for the asset.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfoProvider.Topic">
            <summary>
            Topic of the custom information this instance provides.
            If multiple informations can be provided by an asset, this is to be used by UI
            to let users select what information they want
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.CustomInfo.CustomInfoProvider.EnableStatus">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.DefaultAssetInterface">
            <summary>
            Default interface for assets without explicitly implemented interface.
            It shows the asset info (including asset sources).
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorAssetInterface">
            <summary>
            Base asset interface class for assets that have their data serialized in the asset file itself.
            
            <para>
            The metadata for these assets only stores general asset information such as asset <see cref="T:System.Guid"/> and hashes.
            These metadata information are not meant to be edited from editor. Instead this interface allows access to asset file data.
            When a change is done via property inspector to the asset file content, it is generally saved directly to the file
            and the asset processor loads them from there during processing.
            </para>
            
            <para>
            The difference from <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.BinaryAssetInterface"/> is that there is no need to save metadata every time the asset
            changes via property inspector, however the processing cannot be immediately triggered.
            </para>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorInterfaceContentException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorInterfaceInitialization">
            <summary>
            Data used when an asset interface failed to initialize.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorInterfaceInitialization.PostInit">
            <summary>
            Does the exception occurred during asset initialization or post initialization.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.EditorInterfaceInitialization.DeleteAsset(System.Boolean)">
            <summary>
            Delete the invalid asset and unregister it.
            </summary>
            <param name="removeReferencesToDeletedAssets"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.HavokColliderAssetInterface">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.IInvalidAssetInterface">
            <summary>
            Marks an AssetInterface as invalid.
            Invalid asset interfaces are used to mark assets that were not able to load properly, and might require a reload 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.InvalidFileExtensionAssetInterface">
            <summary>
            Asset interface when the file extension does not correspond to it's content.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.InvalidFileExtensionAssetInterface.Context">
            <summary>
            Custom message that is read from <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterfaceCreationContext"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.IRequiredForAssetInterface">
            <summary>
            Interface for asset that can be required by other asset that could not exist without this asset. 
            This is stronger than regular dependency, if this asset get deleted, strong dependencies should also be deleted.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.IRequiredForAssetInterface.Asset">
            <summary>
            Current Asset.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.IRequiredForAssetInterface.GetAssetRequiringThis(System.String@)">
            <summary>
            Get the asset that require this asset to exist.
            </summary>
            <param name="customReason">Optional message explaining the requirement.</param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.ISubAssetInteractions">
            <summary>
            Marks an AssetInterface as a subasset of another asset
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.ISubAssetInteractions.MainAssetGuid">
            <summary>
            The AssetID of the asset that this subasset belongs to
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.JsonAssetInterface">
            <summary>
            Interface for Editor-only definition files like composite textures 
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.JsonAssetInterface.#ctor(Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterfaceCreationContext)">
            <summary>
            Interface for Editor-only definition files like composite textures 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.JsonAssetInterface`1">
            <summary>
            Interface for Editor-only definition files like composite textures 
            </summary>
            <typeparam name="T">Type of the object contained in the file</typeparam>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.AssetInterfaceSerializationContextProviderAttribute">
            <summary>
            Attribute that will index all implementations of <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IAssetInterfaceSerializationContextProvider"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.CustomInterfaceSerializationContextProviderIndexer">
            <summary>
            Indexer for all implementations of <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IAssetInterfaceSerializationContextProvider"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IAssetInterfaceSerializationContextProvider">
            <summary>
            Interface used to provide <see cref="T:Keen.VRage.Library.Serialization.CustomSerializationContext"/> when serializing data in all <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/> 
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IAssetInterfaceSerializationContextProvider.GetCustomContexts(Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Get <see cref="T:Keen.VRage.Library.Serialization.CustomSerializationContext"/>s that should be used when deserializing
            contents of files in <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.AssetInterface"/> implementations
            </summary>
            <param name="explorerAssetFileSnapshotProvider">Assets provider</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider">
            <summary>
            Asset files provider
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.IExplorerAssetFileSnapshotProvider.TryGetByGuid(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.AssetFileSnapshot@)">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.SerializationContexts.AssetFileSnapshot">
            <summary>
            Represents a snapshot of asset file state
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.ShaderFileAssetInterface">
            <summary>
            Asset interface for HLSL shader source files, that is able to recognize references to include files contained in it
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.ShaderFileAssetInterface.INCLUDE_REGEX">
            <summary>
            There is difference semantic of the shader include syntax using "" and &gt; &lt;,
            "" allows searching locally in the directory of the current file
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.ShaderFileAssetInterface.SHADER_SOURCES_PATH">
            <summary>
            Base path for all shader source files that the includes are searched for
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.AssetValidation`1">
            <summary>
            Helper class from which all Assets validation can inherit. Provides access to Assets-specific validation context
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.AssetValidationContext">
            <summary>
            Asset-specific validation context for easier access to commonly used data required by the validation
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.AssetValidationContext.#ctor(Keen.VRage.Library.Serialization.Validation.ValidationContext)">
            <summary>
            Asset-specific validation context for easier access to commonly used data required by the validation
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.DefinitionImportValidationListener">
            <summary>
            The validation listener used when importing definitions, for simple warning/error reporting
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.EditorValidationStrategy">
            <summary>
            ValidationStrategy used in editor, provides the project of the asset being validated
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.IssueSeverityHelper">
            <summary>
            Helper for <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ProjectAssetValidationListener">
            <summary>
            Validation listener used on Assets side to validate data of the asset. Collects recoverable and unrecoverable issues separately and only
            allows to recover if the <paramref name="canRecover"/> is enabled.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ProjectAssetValidationListener.#ctor(System.Boolean)">
            <summary>
            Validation listener used on Assets side to validate data of the asset. Collects recoverable and unrecoverable issues separately and only
            allows to recover if the <paramref name="canRecover"/> is enabled.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity">
            <summary>
            Severity of the issue.
            <para><see cref="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Error"/>: The asset is wrong and should be fixed before been used.</para>
            <para><see cref="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Warning"/>: The asset contains issues that should be fixed but is usable.</para>
            <para><see cref="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Info"/>: Indicate that some aspect of the asset may not be correct but don't invalidate the asset.</para>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Info">
            <summary>
            Indicate that some aspect of the asset may not be correct but don't invalidate the asset.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Warning">
            <summary>
            The asset contains issues that should be fixed but is usable.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ValidationIssue.IssueSeverity.Error">
            <summary>
            The asset is wrong and should be fixed before been used.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.MessageValidationIssue">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.MemberValidationIssue">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.Interfaces.Validation.ExceptionValidationIssue">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IOpenable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IPreviewable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IPreviewable.GetImagePath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.IProjectSynchronizationContext">
            <summary>
            The object responsible for synchronizating / scheduling tasks from other thread to the main thread running the project.
            Since project is not thread-safe, other threads must use this synchronization context
            to interact with the corresponding <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IProjectSynchronizationContext.RunAction(System.Action)">
            <summary>
            Run the given action in the project's synchronization context.
            </summary>
            <param name="action">The action to be executed</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.IProjectSynchronizationContext.CheckAccess">
            <summary>
            Checks that the current thread is the main thread for the project
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ISelectable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.Item">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemCreated">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemInitialized">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemPostInitialized">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemRemoved">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemRenamed">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken.ItemModified">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IGuidProjectItemToken">
            <summary>
            Interface for <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemToken"/> that are based only on the item <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IGuidProjectItemToken.ItemGuid">
            <summary>
            The <see cref="T:System.Guid"/> that the item is identified with
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.IProjectItemTokenNotificator">
            <summary>
            This interface allows to raise events for when project item has changed.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.ProjectItemCore">
            <summary>
            Token representing the project item (Guid), and includes events related to changes to that item in project.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.ProjectItemTokenGuid">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.SharedGuidItemTokensProvider">
            <summary>
            Provider of <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.ProjectItemCore"/> instances connected to given <see cref="T:System.Guid"/> among multiple projects in dependency tree.
            This validates that projects only use project item tokens from their own project or dependency projects, restricts
            access to tokens from dependent projects.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ItemToken.SharedGuidItemTokensProvider.TryGetGuidOwner(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.LoadedProject@)">
            <summary>
            Gets the project that owns item with the given <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject">
            <summary>
            Represent the currently loaded project
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.WriteAssetInProject(Keen.VRage.ContentPipeline.Project.Structure.ExplorerFolder,System.String,Keen.VRage.ContentPipeline.Project.FileSystem.FileWriter,System.Nullable{System.Guid})">
            <summary>
            </summary>
            <param name="parentFolder"></param>
            <param name="filename"></param>
            <param name="streamWriter"></param>
            <param name="newAssetGuid">Does currently not support changing asset IDs of existing items</param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.CheckForGuidConflicts(Keen.VRage.ContentPipeline.Project.FileSystem.SimultaneousFileEvents,System.Nullable{System.ValueTuple{System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.ItemChangedEventArgs}},System.Collections.Generic.Dictionary{System.Guid,System.ValueTuple{Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.ItemChangedEventArgs}}}}}@)">
            <returns>Whether there is any Guid conflicts</returns>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.ReferencesCache">
            <summary>
            Optional cache that can be loaded from disk to speed up the initialization of the references
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Unload">
            <summary>
            Unloads the project, cleaning resources
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.GetAvailableFiles">
            <summary>
            Get all files in this project and dependency projects.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.GetProjectFiles">
            <summary>
            Get files only in this project
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.GetProjectItemByProjectPath(System.String)">
            <summary>
            Attempt to find an item by its project relative path.
            </summary>
            <param name="projectRelativePath">Project relative path of the item</param>
            <returns>Returns the item found on that path, or <see langword="null"/> if no item was found</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader">
            <summary>
            Object used for tracking project loading progress
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.Phases">
            <summary>
            All phases that occur during the loading, in correct order. Only instances up to index <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.CurrentPhaseIndex"/>
            must be non-null.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.CurrentPhaseIndex">
            <summary>
            The current phase index of the <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.Phases"/> property. Returns -1 if loading has not started yet.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.AdvancePhase(System.String,System.Int32)">
            <param name="phaseName">Name of the phase</param>
            <param name="totalSteps">Total number of steps this phase has, or -1 if phase is indeterminate</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.TryResolveInitialItems(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems@,System.Nullable{Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult}@)">
            <summary>
            Try to resolve items that were found in the project folder but are not directly valid
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.Loader.CheckForGuidConflicts(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.FileSystem.InitialItems,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.ItemChangedEventArgs}}@)">
            <returns>Whether there are any Guid conflicts in the items</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadingPhase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadingPhase.TotalSteps">
            <summary>
            The total number of steps this phase has. If the phase is indeterminate, returns 0
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadingPhase.CurrentStep">
            <summary>
            The current step. <see langword="null"/> only if no step has been reached yet.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadingPhase.Step">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult.LoadedProject">
            <summary>
            Project if loading was successful, <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult.InitialItems">
            <summary>
            Items that were present at the initialization of the project, including files that could not be read
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult.FailType">
            <summary>
            The failure type in case the loading was not successful
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResult.FailReasons">
            <summary>
            Additional information about why the project loading has failed.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail.InvalidProjectStructure">
            <summary>
            Failure related to inability to properly reconstruct Assets-AssetSources-Content folders
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail.ItemsParentFolderUnknown">
            <summary>
            Failure related to not being able to register items as they should be in a parent folder which is not valid
            (usually means there is folder without valid metadata that contains valid items)
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail.DataTooNew">
            <summary>
            When encountered deserialized data have higher version that the current application
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail.DuplicateGuids">
            <summary>
            Items with duplicate Guid exist in the project
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectResultFail.ResolvingFailed">
            <summary>
            Project items resolver reported failure
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProject.LoadProjectFailureReasons">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoaderOptions">
            <summary>
            Options to be used when loading a project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingOptions">
            <summary>
            Options how the project should be loaded.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectGeneralOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ProjectGeneralOptions.UseFileWatcherOnProjectFolder">
            <summary>
            Whether file watcher should run on the project folder and apply the changes
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ProjectGeneralOptions.IsReadOnly">
            <summary>
            Whether this project should be treated as read-only. Forbids writing any changes to the project folder.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ProjectGeneralOptions.ProjectItemsResolver">
            <summary>
            Handler used when unknown items (loose metafiles, empty folders without metafile) are found in project folder
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG">
            <summary>
            Project DAG (directed acyclic graph) consisting of one root main project and dependency project hierarchy
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader">
            <summary>
            The loader used to load <see cref="T:Keen.VRage.Core.Project.VRageProject"/> hierarchy.
            </summary>
            <remarks>
            Has support to load selectively - first on dependency, later on project that is using the dependency.
            Reuse this instance and call <see cref="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.LoadProjectDAGCoroutine(Keen.VRage.Core.Project.VRageProject)"/> with selected projects to load them, reusing already loaded dependencies
            if possible.
            </remarks>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.ProgressChanged">
            <summary>
            Observable for when change to <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.Progress.LoadingProject"/> or <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.Progress.CurrentPhase"/> has been made.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.#ctor(Keen.VRage.Core.Project.VRageProject,System.Collections.Generic.IReadOnlyDictionary{Keen.VRage.Core.Project.VRageProjectID,Keen.VRage.Core.Project.VRageProject},System.Collections.Generic.IReadOnlySet{System.Guid},System.Func{Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlags,Keen.VRage.ContentPipeline.Project.Structure.ProjectLoaderOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.String[],System.Boolean)">
            <summary>
            Creates instance of the loader for given root <see cref="T:Keen.VRage.Core.Project.VRageProject"/>.
            </summary>
            <param name="rootProject"></param>
            <param name="availableProjects">Dictionary of all available projects, used for resolving dependencies</param>
            <param name="editableProjects">List of projects that should be loaded in editable mode.</param>
            <param name="projectModeOptionsFunc">Function to obtain project loader settings for every loaded project.</param>
            <param name="loggerFactory"></param>
            <param name="filesExtensionsToMaterializeWhitelist"></param>
            <param name="referenceManagerEnabled"></param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.ProjectLoadingResultNode">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.ProjectLoadingResultNode.LoadProjectResult">
            <summary>
            The result of project loading. Null if any of the dependency projects was not loaded successfully.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.ProjectDAGLoadingResult">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG.Loader.Progress">
            <summary>
            Represents information about project graph loading progress
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAGExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAGExtensions.ForEachProject(Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG,System.Action{Keen.VRage.ContentPipeline.Project.Structure.LoadedProject})">
            <summary>
            Invoke the given action for every project in the tree. Top-most projects are handled first, then their dependencies.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectConfiguration">
            <summary>
                This class handles the configuration for a project to be created.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectDAGLoadingResultExtensions">
            <summary>
            Extension methods for working with result of loading <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.LoadedProjectDAG"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectItemReadOnlyState">
            <summary>
            Specifies whether item is read only with additional information
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlags">
            <summary>
            Modes in which projects in project tree can be loaded
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlags.Immutable">
            <summary>
            Forbid any modification to the project. Default value of this enum where no flags are set
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlags.Editable">
            <summary>
            The project can be fully edited
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlags.SkipContentMounting">
            <summary>
            The Contents of assets in this project should not be mounted to engine
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectLoadingFlagsUtils">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ProjectRepository.GetItemWithPath(System.String)">
            <summary>
            
            </summary>
            <param name="projectRelativePath">The project relative path of the item</param>
            <returns>The <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ExplorerItem"/> instance of the file if found, <see langword="null"/>
            if <paramref name="projectRelativePath"/> is null or no such item was found</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ProjectRepository.RepositoryConstructionResult">
            <summary>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ProjectRepository.RepositoryConstructionResult.InvalidProjectStructure">
            <summary>
            The project core structure (Assets, AssetSources, Content) could not be recovered
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ProjectRepository.RepositoryConstructionResult.ItemsInUnknownFolders">
            <summary>
            Some items were meant to be in a folder which is not correct in the project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType">
            <summary>
            Type of the reference that can exist between project assets
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType.Reference">
            <summary>
            Reference to asset
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType.Dependency">
            <summary>
            Dependency on the asset
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType.AssetSourceReference">
            <summary>
            Reference to an asset source
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType.Guid">
            <summary>
            Reference directly by Guid
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceTypeAttribute">
            <summary>
            Specifies what type of references the <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/>
            in the attributed property or field. This attribute may also be used for collection type,
            it then applies for <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/> direct items of the collection.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferenceType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.DefinitionReferenceTypeAttribute">
            <summary>
            Specifies what type of references the <see cref="T:Keen.VRage.Library.Definitions.Definition"/>
            in the attributed property or field. This attribute may also be used for collection type,
            it then applies for <see cref="T:Keen.VRage.Library.Definitions.Definition"/> direct items of the collection.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.DefinitionReferenceType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesCache">
            <summary>
            Cached data about references from the asset to other assets
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.CacheLoadingResult">
            <summary>
            Result of loading asset references cache
            </summary>
            <seealso cref="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesCache.FromCacheFile(System.String)"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.CacheSavingResult">
            <summary>
            Result of saving asset references cache
            </summary>
            <seealso cref="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesCache.SaveCacheForProject(System.String,Keen.VRage.ContentPipeline.Project.Structure.LoadedProject)"/>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData">
            <summary>
            Serializable cache of asset references
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#AssetReferencesData}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#GuidHashPair,Keen#VRage#Library#Collections#ListDictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Structure#References#AssetReferenceType}}}#Set(System.Object,System.Collections.Generic.Dictionary{Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair,Keen.VRage.Library.Collections.ListDictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#GuidHashPair,Keen#VRage#Library#Collections#ListDictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Structure#References#AssetReferenceType}}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#GuidHashPair,Keen#VRage#Library#Collections#ListDictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Structure#References#AssetReferenceType}}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#GuidHashPair,Keen#VRage#Library#Collections#ListDictionary{System#Guid,Keen#VRage#ContentPipeline#Project#Structure#References#AssetReferenceType}}}#Set(System.Byte@,System.Collections.Generic.Dictionary{Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair,Keen.VRage.Library.Collections.ListDictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@,System.Collections.Generic.Dictionary{Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair,Keen.VRage.Library.Collections.ListDictionary{System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData.TypeInfoHolder.AssetReferencesAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.AssetReferencesData@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair">
            <summary>
            Equatable pair of Guid and hash, only equal if both Guid and hash are equal
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.#ctor(System.Guid,System.String)">
            <summary>
            Equatable pair of Guid and hash, only equal if both Guid and hash are equal
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Structure#References#Cache#GuidHashPair}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.GuidAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair.TypeInfoHolder.HashAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.References.Cache.GuidHashPair@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure">
            <summary>
            The core structure of the references tracked between items in the project graph.
            Multiple references between two items of the same type can exist.
            Cycles can exist.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.AddReference(System.Guid,System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType)">
            <summary>
            Adds the reference to the structure
            </summary>
            <param name="from">The item that is referencing other item</param>
            <param name="to">The item that is being referenced</param>
            <param name="type">Type of reference</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.RemoveReference(System.Guid,System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType)">
            <summary>
            Removes the reference from the structure
            </summary>
            <param name="from">The item that was referencing other item</param>
            <param name="to">The item that was being referenced</param>
            <param name="type">The type of the reference</param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.ExistsTransitiveReference(System.Guid,System.Guid,System.Collections.Generic.IReadOnlySet{Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType})">
            <summary>
            Checks whether there exists a transitive reference between the items. The types of references are not taken into account.
            E.g. "->" is binary relation "reference", and A -> B, B -> C, then there exists a transitive reference from A to C
            </summary>
            <param name="from">The item that is checked for transitive reference to other item</param>
            <param name="to">The item that is checked whether it is being (transitively) referenced</param>
            <param name="filter">Filter references based on the specified reference types.
            Meaning when the reference forest is traversed, only specified reference types are considered.
            If null, no filtering is done.</param>
            <returns><see langword="true"/> if the <paramref name="from"/> is transitively references the <paramref name="to"/>,
            <see langword="false"/> otherwise. If <paramref name="from"/> and <paramref name="to"/> are the same item,
            this method returns true iff there is a circular reference.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.GetReferenceTargetsTransitive(System.Guid,System.Collections.Generic.IReadOnlySet{Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType})">
            <summary>
            Get all items that are transitively being referenced by <paramref name="from"/> item
            </summary>
            <param name="from">The item from which there exists at least one transitive reference to the returned items</param>
            <param name="filter">Filter references based on the specified reference types.
            Meaning when the reference forest is traversed, only specified reference types are considered.
            If null, no filtering is done.</param>
            <returns>Set of all items that the <paramref name="from"/> item references.
            The item <paramref name="from"/> is included iff there is a circular reference.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.GetReferenceSourcesTransitive(System.Guid,System.Collections.Generic.IReadOnlySet{Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType})">
            <summary>
            Get all items that are transitively referencing the <paramref name="to"/> item
            </summary>
            <param name="to">The item to which there exist at least one transitive reference from the returned items</param>
            <param name="filter">Filter references based on the specified reference types.
            Meaning when the reference forest is traversed, only specified reference types are considered.
            If null, no filtering is done.</param>
            <returns>Set of all items that are referencing the <paramref name="to"/> item.
            The item <paramref name="to"/> is included iff there is a circular reference.</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.GetDirectReferencesFrom(System.Guid)">
            <summary>
            Get the direct (not transitive) references existing from the <paramref name="from"/> item
            </summary>
            <param name="from">The item that the returned references point from</param>
            <returns>List of direct references (target items and the type of reference)</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.IAssetReferencesStructure.GetDirectReferencesTo(System.Guid)">
            <summary>
            Get the direct (not transitive) references existing to the <paramref name="to"/> item
            </summary>
            <param name="to">The item to which the returned references point to</param>
            <returns>List of direct references (origin items and the type of reference)</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.Reference.#ctor(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType,System.Nullable{Keen.VRage.Library.Serialization.MemberPath})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager">
            <summary>
            Manager responsible for:
            - All assets inform it when the references they contain change (and which ones)
            - They can obtain a ReferenceToken, which holds the reference target information and provides events
                for when the asset target changes
            - All final changes are propagated into individual assets' references status object, which can then
                implement further functionality on the asset file level (when it starts being referenced/stops being referenced)
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager.GetTransitiveReferencesTo(System.Guid,System.Collections.Generic.IReadOnlySet{Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType})">
            <summary>
            Get all transitive references to the given <see cref="T:System.Guid"/>.
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/> to which the transitive references lead to</param>
            <param name="filter">When not <see langword="null"/>, only the given types of references given are considered.</param>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager.ReferencableItemToken">
            <summary>
            Dependable file token, meant to be held by the project asset used to handle the events
            when a reference to asset was added or removed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager.ReferencableItemToken.NotifyReferenceAdded(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType)">
            <summary>
            Triggers the dependency added event, should be only used from the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager.ReferencableItemToken.NotifyReferenceRemoved(System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType)">
            <summary>
            Triggers the dependency removed event, should be only used from the <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.References.ReferencesManager"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.SimpleReferencesStructure._dictionary">
            <summary>
            Dictionary of references in the direction of reference (key is the referencing item, values are referenced items, and type of reference)
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.References.SimpleReferencesStructure._reverseDictionary">
            <summary>
            Auxiliary reversed dictionary (key is the referenced item, values are referencing items and the type of reference).
            Must be always synchronized with <see cref="F:Keen.VRage.ContentPipeline.Project.Structure.References.SimpleReferencesStructure._dictionary"/>, if reference is added to main dictionary,
            the reverse of it must be added to this as well.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.References.SimpleReferencesStructure.TraverseDependencyGraph(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.List{System.ValueTuple{System.Guid,Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType}}},System.Guid,System.Collections.Generic.IReadOnlySet{Keen.VRage.ContentPipeline.Project.Structure.References.AssetReferenceType})">
            <summary>
            Traverses the <paramref name="data"/> references dictionary looking for all items reachable from item <paramref name="from"/>,
            if only considering reference types contained in <paramref name="filter"/> set.
            <para/>
            This method supports cycles in the graph.
            <paramref name="from"/> item is returned as reachable if and only if there is a circular dependency.
            </summary>
            <param name="data"></param>
            <param name="from"></param>
            <param name="filter"></param>
            <returns>Returns all items reachable from item <paramref name="from"/> using only edges of type contained in <paramref name="filter"/>.
            <paramref name="from"/> is included in reachable items iff it was reachable using a cycle in the graph.</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidationResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator.Validate">
            <summary>
            
            </summary>
            <returns>Whether the asset was validated successfuly. Fails cases where the reference target cannot be found in the project</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator.OnInitialize">
            <summary>
            Initialize the validator
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator.OnAssetSourcesReferencesChanged">
            <summary>
            Notify this validator that the the references to sources were added or removed.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator.OnAssetSourceChanged">
            <summary>
            Notify this validator that any of the referenced sources was changed
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.AssetSourceValidator.OnAssetFileChanged">
            <summary>
            Notify this validator that the asset itself has been changed
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.References">
            <summary>
            This list always contain valid items and must be sorted.
            Usually you should never manually manually modify this list, instead use methods of this class instance.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.CheckIntegrity">
            <summary>
            Checks that the data integrity in <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.References"/> is not violated.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Structure#ReferenceValidationInformation}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Structure#GuidHashRVH}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Structure#GuidHashRVH}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Structure#GuidHashRVH}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#ContentPipeline#Project#Structure#GuidHashRVH}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation.TypeInfoHolder.ReferencesAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.ReferenceValidationInformation@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH">
            <summary>
            
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Count">
            <summary>
            How many times the reference to the target exists
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.ReferenceValidationHash">
            <summary>
            Also mentioned as RVH. This hash is computed from ordered list of <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH"/> of the asset.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#ContentPipeline#Project#Structure#GuidHashRVH}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.GuidAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.HashAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.CountAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH.TypeInfoHolder.ReferenceValidationHashAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.GuidHashRVH@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.EmptyFolderResolver">
            <summary>
            Resolver for single empty folder without metafile in the project folder
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.EmptyFolderResolver.Resolution">
            <summary>
            Type of resolution that should be taken for this folder
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.EmptyFolderResolver.Resolution.Ignore">
            <summary>
            Empty folder remains in the project
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.EmptyFolderResolver.Resolution.Delete">
            <summary>
            Folder is deleted from the project
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.EmptyFolderResolver.Resolution.Import">
            <summary>
            Metafile is created for the folder and it becomes part of the project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict">
            <summary>
            Conflict where the change to the project conflicts with asset that already exists in the project. Only the incoming asset change can be modified,
            existing asset in the project cannot change.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.Guid">
            <summary>
            Conflicting Guid in question.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.ExistingItem">
            <summary>
            Project relative path of the item that currently exists in the project and cannot be changed.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.IncomingItems">
            <summary>
            Project relative path of the item whose change is incoming and must be handled.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.Resolution">
            <summary>
            Resolution that should be taken
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.Resolution.RegenerateIncomingGuids">
            <summary>
            Generate new random Guids for all incoming items change, the original item remains unchanged
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.Resolution.DiscardNewItems">
            <summary>
            New items are discarded, meaning not added to the project and removed from file system.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict.Resolution.BackupNewItems">
            <summary>
            New items are backed up, meaning not added to the project but not deleted.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.FailOnUnreadableItemsResolver">
            <summary>
            Resolver that does nothing but report failure when unreadable item (except for missing metafile) is found
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict">
            <summary>
            Conflict where multiple changes to the project are conflicting with each other, but not with any item that already exists in the project.
            </summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict.Guid">
            <summary>
            Conflicting Guid in question.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict._resolutions">
            <summary>
            Resolutions for items specified in <see cref="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict.Items"/>. Valid resolution must leave only up to one item with <see cref="F:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict.ItemResolution.None"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict.ItemResolution">
            <summary>
            What action should be taken for individual items
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure">
            <summary>
            Object containing failure description of project items resolution.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolvingFailType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailureException">
            <summary>
            Exception when <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure.ItemFailure"/> was reported.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ProjectItemsResolver">
            <summary>
            Base class for resolvers for project items. Has raw methods that can modify structs with event data about project items directly.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.Resolution`2">
            <summary>
            Describes a resolution for <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup`1.ItemResolver"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolutionResult">
            <summary>
            Struct containing results of applying <see cref="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.Resolution`2"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup`1">
            <summary>
            Simplified implementation of resolver group where all resolvers contain wrap custom object
            </summary>
            <typeparam name="TObj">The type of custom object contained in every resolver</typeparam>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup`1.ItemResolver">
            <summary>
            Resolver with explicit item name and wrapping custom object
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroupBase`2">
            <summary>
            Base class for resolution models. Can be used to hold information about available items for resolving, resolution options and methods
            to actually apply the resolution. Possible to be used with view model to have interactive resolution anywhere.
            </summary>
            <typeparam name="TResolver"></typeparam>
            <typeparam name="TGroup"></typeparam>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroupBase`2.IsShared">
            <summary>
            true if all items have the same resolution, false otherwise 
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroupBase`2.ItemResolverBase">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver">
            <summary>
            Base class for resolving project items with more easy way how the implementation can choose resolution for certain improper situations,
            at the cost of flexibility.
            Instead of resolving the raw structs with project item event data directly, the problems are separated into categories and corresponding
            abstract methods must be implemented to choose resolution for items in these categories.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryPreprocessInitialItems(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.AssetWithUnreadableParent},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.FolderWithUnreadableParent},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.LooseMetafile},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Override this method to apply custom logic on the initial items before any of resolvers are called.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryHandleLooseMetafiles(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup{Keen.VRage.ContentPipeline.Project.FileSystem.LooseMetafile},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Method that can resolve what should happen with loose metafiles. By default no action is taken.
            </summary>
            <remarks>
            Method is invoked even when no resolving is needed.
            </remarks>
            <param name="loadedProject">The project in which the items were detected</param>
            <param name="looseMetafileResolvers">Resolvers for loose metafiles (no corresponding file or folder) in the project folder</param>
            <param name="resolvingFailure"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryHandleFilesAndFoldersWithoutMetafile(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Method that can resolve what should happen with files and folders without metafiles.
            By default no action is taken.
            </summary>
            <remarks>
            Method is invoked even when no resolving is needed.
            </remarks>
            <param name="loadedProject">The project in which the items were detected</param>
            <param name="filesWithoutMetafileResolvers">Resolvers for files without metafile found in the project folder</param>
            <param name="foldersWithoutMetafileResolvers">Resolvers for folders without metafile found in the project folder</param>
            <param name="resolvingFailure"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryHandleUnreadableFilesAndFolders(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableAsset},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ResolversGroup{Keen.VRage.ContentPipeline.Project.FileSystem.UnreadableFolder},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Method that can resolve what should happen with files and folders that could not be read in the project folder.
            By default not action is taken.
            </summary>
            <remarks>
            Method is invoked even when no resolving is needed.
            </remarks>
            <param name="loadedProject">The project in which the items were detected</param>
            <param name="unreadableFilesResolvers">Resolvers for unreadable files in the project folder</param>
            <param name="unreadableFoldersResolvers">Resolvers for unreadable folders in the project folder</param>
            <param name="resolvingFailure"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryHandleGuidConflicts(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Collections.Generic.IReadOnlyList{Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ExistingItemGuidConflict},System.Collections.Generic.IReadOnlyList{Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.IncomingItemsGuidConflict},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Method handling item Guid conflicts. In order to correctly resolve the situation, the implementation must apply some action for every
            conflict instance passed in parameters.
            Conflicts are separated into two categories: one where there is already an existing asset in the project with the conflicting Guid, and when
            the conflicting Guid is present only in incoming item events.
            </summary>
            <remarks>
            Method is invoked even when no resolving is needed.
            </remarks>
            <param name="project">Project in which the conflict changes happened</param>
            <param name="existingAssetConflicts">Conflicts where the Guid matches one of the already existing items in the project graph</param>
            <param name="incomingAssetConflicts">Conflicts where the Guid does not match any existing item in the project, 
            only multiple new items have conflicting Guid.</param>
            <param name="resolvingFailure"></param>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.SegmentedProjectItemsResolver.TryResolveDuplicateGuidConflicts(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.AssetAddedEventArgs},System.Collections.Generic.List{Keen.VRage.ContentPipeline.Project.FileSystem.FolderAddedEventArgs},System.Collections.Generic.IReadOnlySet{System.Guid},Keen.VRage.ContentPipeline.Project.Structure.ResolutionHandlers.ItemResolvingFailure@)">
            <summary>
            Given lists of files and folders that are about to be introduced to the project, resolve any conflicts of Guids that might be included.
            <paramref name="removedItemsGuids"/> list contains items that are being removed in the same batch and therefore should not be considered
            as part of the project when detecting conflicts.
            Resolved conflicts are applied to the lists, even when they were resolved only partially (others failed to be resolved). 
            </summary>
            <remarks>
            This method can report success even when not all conflicts are resolved.
            Resolutions are applied even when any of them fails.
            Failed attempts of resolutions are collected and the method returns <see langword="false"/>.
            </remarks>
            <param name="project">The project in which the changes are done</param>
            <param name="incomingFiles">Files that are being added to the project</param>
            <param name="incomingFolders">Folders that are being added to the project</param>
            <param name="removedItemsGuids">Guids of items that are being removed from project at the same time as addition.
            For conflict detection these Guids should not be considered as existing items in the project.</param>
            <param name="resolvingFailure"></param>
            <returns><see langword="false"/> if the resolution explicitly failed or when some of the conflicts resolution attempts failed,
            <see langword="true"/> otherwise (even when some conflicts were not resolved)</returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.SubAsset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.NameAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#ExplorerAssetFile}#Set(System.Object,Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#ExplorerAssetFile}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#ExplorerAssetFile}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#ContentPipeline#Project#Structure#ExplorerAssetFile}#Set(System.Byte@,Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@,Keen.VRage.ContentPipeline.Project.Structure.ExplorerAssetFile@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.MasterAssetAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Set(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Structure.SubAsset.TypeInfoHolder.AssetIDAccessor.Get(Keen.VRage.ContentPipeline.Project.Structure.SubAsset@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Structure.UnloadReason">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.AssetInterfaceUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.AssetInterfaceUtils.GetGuid(Keen.VRage.Library.Utils.IResourceHandle)">
            <summary>
            
            </summary>
            <param name="resourceHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.DAGUtils">
            <summary>
            Tree utility methods for data structures representing a directed tree (meaning no directed cycles must be present).
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.DAGTraversingMode">
            <summary>
            Modes of traversing the DAG
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Utils.DAGTraversingMode.TopToBottomBFS">
            <summary>
            DAG is traversed by breath-first search. Nodes having multiple parents are enumerated multiple times.
            </summary>
        </member>
        <member name="F:Keen.VRage.ContentPipeline.Project.Utils.DAGTraversingMode.TopToBottomBFSUnique">
            <summary>
            DAG is traversed by breath-first search, however nodes with multiple parents are enumerated only the first time.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils">
            <summary>
            Utility for creating hashes from files
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils.GetFileHash(System.String)">
            <summary>
            Computes hash of the specified file. If the file does not exist, returns <see langword="null"/>
            </summary>
            <param name="filePath">File for which to compute the hash</param>
            <returns>Stringified hash of the file</returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils.GetHashFromBuffer(System.Byte[])">
            <summary>
            Similar to <see cref="M:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils.GetFileHash(System.String)"/> although this method does not read the file content from file system
            but byte array buffer instead
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils.GetHashFromStream(System.IO.Stream)">
            <summary>
            Similar to <see cref="M:Keen.VRage.ContentPipeline.Project.Utils.FileHashUtils.GetFileHash(System.String)"/> although this method does not read the file content from file system
            but byte array buffer instead
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.FileSerializationHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.FileSerializationHelper.CheckSerializedContentIsFromNewerBundle``1(Keen.VRage.Library.Serialization.SerializationContext)">
            <summary>
            Compares bundle versions from serialization context with actual bundle versions provided by type serializer to detect if
            the serialized file data was serialized using newer application version (and thus cannot be deserialized).
            </summary>
            <returns><see langword="true"/> if the serialized data was serialized using newer bundles than currently available, <see langword="false"/></returns>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.DeserializeFileResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.MinimalProjectBuilder">
            <summary>
                This class is used to create a minimal project.
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.PrintUtils">
            <summary>
            Utilities to convert project items to string in consistent format
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.Project.Utils.ProjectUtility">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.ProjectUtility.GetAssetFileByGuid(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Guid)">
            <summary>
            Returns the asset for the given Guid. Searches project and all its dependencies.
            </summary>
            <param name="project"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.ProjectUtility.GetAssetFileByGuidInProject(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.Guid)">
            <summary>
            Returns the asset for the given Guid. Searches project only.
            </summary>
            <param name="project"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.Project.Utils.ProjectUtility.GetAssetFileByProjectPath(Keen.VRage.ContentPipeline.Project.Structure.LoadedProject,System.String)">
            <summary>
            Returns the asset for the given project Path. Only searches project
            </summary>
        </member>
        <member name="T:Keen.VRage.ContentPipeline.ResourceHandleExtensions">
            <summary>
            Extensions for <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.ResourceHandleExtensions.GetGuidAllowEmpty``1(``0)">
            <summary>
            Get <see cref="T:System.Guid"/> from <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/>, which also allows for <see cref="F:System.Guid.Empty"/>.
            When creating <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/> with <see cref="F:System.Guid.Empty"/>, it becomes invalid and getting <see cref="T:System.Guid"/> out of it fails.
            </summary>
        </member>
        <member name="M:Keen.VRage.ContentPipeline.ResourceHandleExtensions.GetGuidSafe``1(``0)">
            <summary>
            Get <see cref="T:System.Guid"/> from <see cref="T:Keen.VRage.Library.Utils.ResourceHandle"/>, where if <see cref="T:System.Guid"/> is not stored in it,
            return <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Logging.LoggerFactoryExtensions">
            <summary>
            Logger factory extensions.
            </summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Type extensions.
            </summary>
        </member>
    </members>
</doc>
