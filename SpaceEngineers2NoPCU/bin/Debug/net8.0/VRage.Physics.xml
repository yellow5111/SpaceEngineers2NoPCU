<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Physics</name>
    </assembly>
    <members>
        <member name="T:Keen.VRage.Physics.BreakHandler.ICollisionSphereCollector">
            <summary>
            Interface for collecting collision sphere data used for creation of effects.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.ICollisionSphereCollector.AddCollisionSphere(Keen.VRage.Physics.Havok.BreakHandler.CollisionSphereInfo)">
            <summary>
            Called in <see cref="M:Keen.VRage.Physics.Havok.BreakHandler.HavokBreakHandler.AfterSolve(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.BreakableBodyImpulseData},Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Havok.BodyProxy},Keen.VRage.Physics.Havok.HavokSessionComponent)"/> after determining collision contacts groups.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.BreakHandler.IManifoldCollector">
            <summary>
            Collects manifolds to form groups that will set a max impulse to apply between colliding bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.BreakHandler.IManifoldCollector.Enabled">
            <summary>
            Tells if manifold collection should be enabled (and <see cref="M:Keen.VRage.Physics.BreakHandler.IManifoldCollector.CollectManifolds(System.Span{Keen.VRage.Physics.BreakHandler.Manifold},Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator@)"/> should be called).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldCollector.CollectManifolds(System.Span{Keen.VRage.Physics.BreakHandler.Manifold},Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator@)">
            <summary>
            Called in-between simulation steps to form groups of manifolds that can set max impulses.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator">
            <summary>
            Will create groups of manifolds that can clip impulses together,
            and will report clipped impulses in <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.CreateGroupFor(System.Single,System.Object)">
            <summary>
            Allocates a new group that manifolds can use to clip impulses.
            </summary>
            <param name="maxImpulse">A max impulse that is shared for the whole group of manifolds</param>
            <param name="userData">User Data that can be set into the group to be retrieved later when the impulses clip</param>
            <returns>An identifier for the group to be set into manifolds</returns>
            <remarks>The final group will have a consolidated max impulse based on the minimum of the other colliding
            entity max impulse that was set into its own group</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.SetManifoldGroupA(System.Int32,System.Int32)">
            <summary>
            Sets the group for the manifold on the first Entity participating in the collision.
            This means that this manifold will go into a group that is consolidated with the group for the second Entity on this manifold. 
            </summary>
            <param name="manifoldIndex">The manifold that will be assigned to the group</param>
            <param name="group">The identifier for the group this manifold will be assigned to on the side of the first Entity</param>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.SetManifoldGroupB(System.Int32,System.Int32)">
            <summary>
            Sets the group for the manifold on the second Entity participating in the collision.
            This means that this manifold will go into a group that is consolidated with the group for the first Entity on this manifold. 
            </summary>
            <param name="manifoldIndex">The manifold that will be assigned to the group</param>
            <param name="group">The identifier for the group this manifold will be assigned to on the side of the second Entity</param>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.SetUnhandled(System.Int32)">
            <summary>
            Informs that this manifold must not be handled or taken account for this step.
            </summary>
            <param name="manifoldIndex">The manifold that will be ignored for this step</param>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.GetManifoldData(System.Int32)">
            <summary>
            Gets the User Data placed into the manifold group. 
            </summary>
            <param name="group">The identifier for the group to get the User Data</param>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.GetGroupAFor(System.Int32)">
            <summary>
            Gets the group assigned to the first Entity on the manifold.
            </summary>
            <param name="manifoldIndex">The manifold to get its group</param>
            <returns>The group for the first Entity of the manifold</returns>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.GetGroupBFor(System.Int32)">
            <summary>
            Gets the group assigned to the second Entity on the manifold.
            </summary>
            <param name="manifoldIndex">The manifold to get its group</param>
            <returns>The group for the second Entity of the manifold</returns>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.Handled(System.Int32)">
            <summary>
            Tells if both sides of the manifold have been dealt with.
            </summary>
            <param name="manifoldIndex">The manifold to know if the group has been set on both Entity sides</param>
            <returns>True if the manifold has its groups assigned, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.CheckOk(System.Int32,System.Boolean)">
            <summary>
            Checks if a manifold has valid groups assigned.
            </summary>
            <param name="manifoldIndex">The manifold to check its groups</param>
            <param name="checkB">Whether to check if the second group has been assigned or not</param>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.GetManifoldPositionOnA(Keen.VRage.Physics.BreakHandler.Manifold@)">
            <summary>
            Gets the manifold position for the body A in world space.
            </summary>
            <param name="manifold">The manifold to calculate its position on body A</param>
            <returns>A point in the world inside body A in which the manifold was created in</returns>
        </member>
        <member name="M:Keen.VRage.Physics.BreakHandler.IManifoldGroupCreator.GetManifoldPositionOnB(Keen.VRage.Physics.BreakHandler.Manifold@)">
            <summary>
            Gets the manifold position for the body B in world space.
            </summary>
            <param name="manifold">The manifold to calculate its position on body B</param>
            <returns>A point in the world inside body B in which the manifold was created in</returns>
        </member>
        <member name="T:Keen.VRage.Physics.BreakHandler.Manifold">
            <summary>
            A collision that is happening between two sub-colliders on bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.DEntityA">
            <summary>
            The first entity participating on the collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.DEntityB">
            <summary>
            The second entity participating on the collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.InternalPositionOnA">
            <summary>
            A position in world space on body A that is the average of all the contact points for a single manifold that participates on the collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.InternalPositionOnB">
            <summary>
            A position in world space on body B that is the average of all the contact points for a single manifold that participates on the collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.Normal">
            <summary>
            The normal that goes from Entity B to Entity A between the two sub-colliders participating on the collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.SeparationSpeedOnPoints">
            <summary>
            Each component of the vector represents the speed difference at each contact point
            projected onto the contact normal using the motion velocities.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.BodyUserDataA">
            <summary>
            The user data stored on the body A, for internal use and to reference the original (main) entity on motion shared bodies.
            This cannot be obtained from native as static bodies don't have a reference to the main body.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.BodyUserDataB">
            <summary>
            The user data stored on the body B, for internal use and to reference the original (main) entity on motion shared bodies.
            This cannot be obtained from native as static bodies don't have a reference to the main body.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.SubColliderKeyA">
            <summary>
            A key that references the hit sub-collider or triangle that belongs to the collider from Entity A. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.BreakHandler.Manifold.SubColliderKeyB">
            <summary>
            A key that references the hit sub-collider or triangle that belongs to the collider from Entity B. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.BreakHandler.Manifold.IsInvalid">
            <summary>
            Tells if the manifold is valid and needs to be processed and taken account or not.
            This can happen because of the internal structures on Physics.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BoxColliderArgs">
            <summary>
            Initialization arguments for a BoxCollider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs">
            <summary>
            Creates a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fractures">
            <summary>
            A collection of fractures that form the breakable collider.
            Colliders must be simple convex, not composite.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.MaxEdgeDistance">
            <summary>
            Maximum distance connectivity will use to query fractures around their faces.
            For example, a MaxEdgeDistance of 0.2 and two fractures using box colliders will result the box
            querying their surroundings for other fractures with a max distance of 0.2 units per face.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs._edges">
            <summary>
            Edges that connect each fracture. When provided, connectivity will be built from these edges and
            not from querying close fracture colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.#ctor(Keen.VRage.Library.Memory.Buffer{Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture},System.Single)">
            <summary>
            Creates the arguments to build a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/> with a max edge distance,
            meaning that connectivity will be automatically built into the collider and fractures will find nearby fractures
            by using distances between their faces. The max distance lookup can be configured using this constructor.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.#ctor(Keen.VRage.Library.Memory.Buffer{Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture},Keen.VRage.Library.Memory.Buffer{Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge})">
            <summary>
            Creates the arguments to build a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/> with given connectivity,
            meaning that connectivity will be specified by the given edges that decide which fractures are connected.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture">
            <summary>
            A serialized fracture piece used to construct a breakable collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture.Collider">
            <summary>
            A bound collider for the fracture, assumed non-composite.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture.Name">
            <summary>
            Uniquely identifies the fracture.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture.ModelParts">
            <summary>
            A collection of associated names for model parts that can be matched to this fracture.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderArgs.Fracture.#ctor(Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Utils.StringId,Keen.VRage.Library.Memory.Buffer{Keen.VRage.Library.Utils.StringId})">
            Creates a fracture that can be used to build a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/>.
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset">
            <summary>
            Represents a temporary sub-set of shapes from a breakable collider. A collider has not yet been allocated at the time this type is created.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.ColliderCount">
            <summary>
            Tells the amount of colliders this subset contains.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.#ctor(System.IntPtr,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation)">
            <summary>
            Creates a subset.
            </summary>
            <param name="subsetHandle">The handle that represents an unmanaged disjointed set</param>
            <param name="operation">The operation that originated this subset</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.GetModelParts">
            <summary>
            Gets all model parts associated to this subset. This can be model parts for either a single or multiple fractures. 
            </summary>
            <returns>An immutable array containing all model parts for the subset</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.IsBaseCollider">
            <summary>
            Tells if this is the clone of the collider that started the operation.
            </summary>
            <returns>True if the collider associated to this subset is the cloned version of the operated collider</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.CreateSubsetCollider">
            <summary>
            Creates a collider associated with the subset.
            If this subset has a single collider, a convex fracture will be returned.
            If this subset is made of multiple fractures, a child breakable collider will be returned.
            On any case, the user must manually handle and dispose these.
            </summary>
            <returns>An associated collider for the subset, which can be a single convex collider or a breakable collider</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.GetNodes">
            <summary>
            Gets the associated nodes (matched to fractures) for the subset. 
            </summary>
            <returns>The associated nodes that conform the subset</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset.GetFractures(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.BreakableCollider.FractureId})">
            <summary>
            Gets the associated fractures for the subset. 
            </summary>
            <returns>The associated fractures that conform the subset</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm">
            <summary>
            Calls methods on an <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation"/> using distance-based querying of fractures.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.BreakOffBehaviour">
            <summary>
            An object that decides, once fractures have been selected for disjointing, how their connections are removed and how they are grouped together.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.Collider">
            <summary>
            The collider that is broken by the operation once <see cref="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.Process(Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs)"/> is called.
            Note that the operation is non-destructive and this collider is not actually being affected, only its clone.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.Operation">
            <summary>
            The operation that is used to disjoint nodes on the affected collider.
            Note that this is non-destructive and the collider is not actually being affected, only its clone.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.FractureDeletionThreshold">
            <summary>
            The distance percent to the queried volume in which fractures should be deleted completely.
            Fractures that are inside the volume but outside this threshold are processed by the <see cref="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.BreakOffBehaviour"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.DestroyedNodes">
            <summary>
            A collection of nodes that were inside the queried volume and their distance to it was below
            the value of <see cref="P:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.FractureDeletionThreshold"/>, so they were disjointed and destroyed.
            The usage is to find if the node was destroyed by index.  
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.#ctor(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOffBehaviour,System.Single)">
            <summary>
            Creates an algorithm that will operate on breakable colliders, deciding when to destroy and disjoint nodes. 
            </summary>
            <param name="physicsColliders">The collider API to perform queries for fractures</param>
            <param name="behaviour">A strategy that knows how to form groups of fractures and disjoint their edges
            once they have been marked for grouping but not destroyed</param>
            <param name="fractureDeletionThreshold">A percent that is used to decide, for marked fractures, which ones are destroyed and which are disjointed</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.Process(Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs)">
            <summary>
            Uses the operation to form groups of disjointed sets, based on the point, impulse and normal.
            Fractures that are close to the impact are deleted with a threshold and added to the DestroyedFractures field.
            Fractures that are close but not close enough to be deleted are disjointed.
            </summary>
            <param name="impactArguments">Arguments from the impact that contain info about the collider, the break operation, and the impact itself</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs">
            <summary>
            Arguments to make the algorithm perform an operation on a breakable collider based on an impact.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs.Collider">
            <summary>
            The breakable collider to operate. Note that this collider will not be modified by the algorithm,
            but will be cloned and this new collider will be affected by the operation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs.Operation">
            <summary>
            The operation to disjoint nodes and edges on the collider. It will be created if it is not provided.
            Disposing it should be handled by the user. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs.PointOfImpactInLocalSpace">
            <summary>
            The point of impact to decide which fractures are destroyed, disjointed or left alone.
            Fractures closer to the point of impact have a higher chance of being affected.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs.Impulse">
            <summary>
            The impulse received that is used by the algorithm to decide which parts are broken.
            Higher impulse means more fractures are broken.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm.ImpactArgs.#ctor(Keen.VRage.Library.Mathematics.Vector3,System.Single,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation)">
            <summary>
            Creates arguments to classify and disjoint fractures on the breakable collider based on an impact.
            </summary>
            <param name="pointOfImpactInLocalSpace">The point of impact to classify fractures</param>
            <param name="impulse">The impulse that was applied to the impact</param>
            <param name="collider">A collider to be operated on. Note that it will not be modified, it will be cloned and the operation will happen on its clone</param>
            <param name="operation">The operation to disjoint nodes an edges. It will be created if it is not provided</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.ConnectedBreakOffBehaviour">
            <summary>
            Forms disjointed groups on an operation based on connectivity between them. Disjointed nodes are grouped together if connected.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.ConnectedGrouper">
            <summary>
            Forms disjointed groups on an operation based on connectivity between them. Disjointed nodes are grouped together if connected.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId">
            <summary>
            Stable unique identifier of fracture within <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Colliders#BreakableCollider#FractureId}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Set(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IdAccessor.Get(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Set(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId.TypeInfoHolder.IsValidAccessor.Get(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider">
            <summary>
            A breakable collider which can be the root or derived from an operation.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.ColliderCount">
            <summary>
            Tells the amount of colliders that conform this object.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Graph">
            <summary>
            The associated connectivity graph which can be disjointed or not depending on the origin of the collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Root">
            <summary>
            The original collider that originated this instance.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fractures">
            <summary>
            Fractures in this collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.CreateBreakOperation">
            <summary>
            Creates a non-destructive <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation"/> that disjoints a cloned breakable collider.
            </summary>
            <returns>An operation to disjoint a breakable collider and get the results</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.GetNodeFromSubCollider(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Gets a node from a sub collider key.
            Keys can be mapped to composite collider instances, which correspond to graph nodes and fractures.
            </summary>
            <param name="key">The sub collider key to gets its associated node</param>
            <returns>A node index for the sub collider key</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.MakePiece(System.Span{Keen.VRage.Physics.Colliders.BreakableCollider.FractureId})">
            <summary>
            Makes a Breakable Collider piece from a given collection of Fracture Ids.
            If a single Fracture Id is passed, then the method returns the associated Fracture Collider with increased ref count.
            If more than a single Fracture Id is passed, the associated nodes must come from a subset or as a result of an operation.
            All provided fractures (if more than one) must be connected to another fracture in the group, or else the next operation on this piece will disjoint isolated nodes.
            Note that disposing is on the caller side.
            </summary>
            <param name="fractures">A span containing Fracture Ids to create a derived Collider</param>
            <returns>A created Collider that can be either a Convex or a Breakable Compound and that is made from the given fractures</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.MakePieceComplement(System.Span{Keen.VRage.Physics.Colliders.BreakableCollider.FractureId})">
            <summary>
            Makes a Breakable Collider piece from the complementary fractures from the given collection of Fracture Ids.
            This means that if the Breakable Collider is made from fractures A-B-C-D-E and the caller passes B, the resulting
            Breakable Collider will be A-C-D-E if they are connected.
            If every Fracture Id except one is passed, then the method returns the complementary Fracture Collider with increased ref count.
            Note that disposing is on the caller side.
            </summary>
            <param name="fractures">A span containing Fracture Ids to exclude when creating a derived complementary Collider</param>
            <returns>A created Collider that can be either a Convex or a Breakable Compound and that is made from all the Fractures except the ones that were passed</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.GetNodeFromFracture(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId)">
            <summary>
            Gets the associated node to a fracture Id. Fractures and nodes have the same indices but fracture Ids
            are a user-friendly way to recognize them reliably.
            </summary>
            <param name="fractureId">The fracture Id to get its associated node</param>
            <returns>A node that matches the given fracture Id</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.TryGetNodeFromFracture(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId,System.UInt16@)">
            <summary>
            Tries to get the associated node to a fracture Id. Fractures and nodes have the same indices but fracture Ids
            are a user-friendly way to recognize them reliably.
            The node could be missing because the Breakable Collider changed after some time, or with serialization.
            </summary>
            <param name="fractureId">The fracture Id to get its associated node</param>
            <param name="node">A node that matches the given fracture Id, valid if the method returns true</param>
            <returns>True if the node could be found for the given fracture Id, false otherwise</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture">
            <summary>
            A fracture piece that conforms a breakable collider.
            Connectivity graph edges are matched to fractures.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture.ModelParts">
            <summary>
            A collection of associated names for model parts that can be matched to this fracture.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture.Collider">
            <summary>
            A bound collider for the fracture, assumed non-composite.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture.CenterOfMass">
            <summary>
            The relative position to the collider where the center of mass is located.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture.Id">
            <summary>
            Uniquely identifies the fracture.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableColliderExtensions">
            <summary>
            Extensions for <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableColliderExtensions.GetFracturedCollider(Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider,System.Span{Keen.VRage.Physics.Colliders.BreakableCollider.FractureId},System.Boolean)">
            <summary>
            Get collider representing set of the fractures or the complement of it. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOffBehaviour">
            <summary>
            Decides, once fractures have been selected for disjointing by a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm"/>, how their connections are removed and how they are grouped together.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOffBehaviour.MakeGroups(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation,System.Collections.Generic.SortedSet{System.UInt16})">
            <summary>
            Calls <see cref="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdge(System.UInt16,System.UInt16)"/> and <see cref="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdges(System.UInt16)"/> from an operation based on some criteria.
            This operates on fractures that have been selected for disjointing by a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.BreakAlgorithm"/>,
            but not considering the destroyed fractures (removed for being close to the impact).  
            </summary>
            <param name="graph">The graph to query connectivity between broken nodes</param>
            <param name="operation">The operation to remove edges and form groups</param>
            <param name="nodes">A set of nodes that are ordered spatially to form disjoint sets</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation">
            <summary>
            Performs a non-destructive operation on a breakable collider, cloning it and creating disjoint sets.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdges(System.UInt16)">
            <summary>
            Removes all edges from a node associated with the breakable collider graph.
            This creates a disjoint subset which matches a single collider and fracture.
            </summary>
            <param name="node">The node to remove its edges</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdge(System.UInt16,System.UInt16)">
            <summary>
            Removes a connection between two nodes associated with the breakable collider graph.
            This does not necessarily create a disjoint subset, it depends on the connections both 
            nodes have after the operation.
            </summary>
            <param name="nodeA">The first node to break its connection to the second node</param>
            <param name="nodeB">The second node to break its connection to the first node</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.Process(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.BreakableCollider.BreakableColliderSubset})">
            <summary>
            Creates subsets from the operation.
            Must be called after all disconnections have been done.
            </summary>
            <param name="outConnectedSubset">A buffer of subsets that have been created for this operation</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.IsBaseCollider(System.IntPtr)">
            <summary>
            Tells if the subset is the cloned collider that originated the operation.
            </summary>
            <param name="subsetHandle">The handle of the subset to test</param>
            <returns>True if the subset is the cloned collider, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.GetSubsetColliderCount(System.IntPtr)">
            <summary>
            Tells the amount of colliders the subset contains.
            </summary>
            <param name="subsetHandle">The handle of the subset to query its colliders</param>
            <returns>The amount of colliders the subset is associated to</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.CreateSubsetCollider(System.IntPtr)">
            <summary>
            Creates a collider associated with the subset.
            If this subset has a single collider, a convex fracture will be returned.
            If this subset is made of multiple fractures, a child breakable collider will be returned.
            On any case, the user must manually handle and dispose these.
            </summary>
            <returns>An associated collider for the subset, which can be a single convex collider or a breakable collider</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.GetSubsetNodes(System.IntPtr)">
            <summary>
            Gets a collection of nodes (matched to fractures) from the given subset.
            </summary>
            <param name="subsetHandle">The handle of the subset to get the associated nodes</param>
            <returns>A collection of nodes that conform the subset</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.GetModelParts(System.IntPtr)">
            <summary>
            Gets all model parts associated to this subset. This can be model parts for either a single or multiple fractures. 
            </summary>
            <returns>An immutable array containing all model parts for the subset</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.GetFractures(System.IntPtr,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.BreakableCollider.FractureId})">
            <summary>
            Gets a collection of fractures from the given subset.
            </summary>
            <param name="subsetHandle">The handle of the subset to get the associated nodes</param>
            <param name="fracturesOut"></param>
            <returns>A collection of fractures  that conform the subset</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph">
            <summary>
            Holds connectivity information about nodes and their edges. 
            Nodes are numerical ids (<see cref="T:System.UInt16"/>s) that match with breakable collider fractures.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Root">
            <summary>
            The root graph from which this derives from. For root graph this is the same root graph.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.EdgeIds">
            <summary>
            Enumerates all edge ids that connect two edges.
            Edge ids are the same for (A, B) and (B, A), but ids are enumerated once.  
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Nodes">
            <summary>
            Enumerates all the nodes which are mapped to fractures. Disconnected graphs only return nodes they contain.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.NodeCount">
            <summary>
            Gets the total amount of nodes this graph contains. Disconnected graphs return the amount of nodes they contain.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.AreConnectedDirectly(System.UInt16,System.UInt16)">
            <summary>
            Tells if two nodes are directly connected (there is an edge between them).
            Can be used on disconnected graphs to tell if two nodes that were originally connected were disjointed.
            </summary>
            <param name="nodeA">The first node to check if there is a connection to the second node</param>
            <param name="nodeB">The second node to check if there is a connection to the first node</param>
            <returns>True if nodes are directly connected, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.IsPresent(System.UInt16)">
            <summary>
            Tells if a node is present on the graph. 
            Disconnected graphs can hold a portion of the root graph, so some nodes can be absent on them.
            </summary>
            <param name="node">The node to check if the </param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.GetConnections(System.UInt16)">
            <summary>
            Gets a collection of nodes which are directly connected to the given node parameter.
            </summary>
            <param name="node">The node to get its connections</param>
            <returns>A span containing the nodes that are directly connected to the node parameter</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.GetEdgeIndex(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge)">
            <summary>
            Gets an edge id (<see cref="T:System.UInt32"/>) from an edge.
            Equivalencies (A, B) and (B, A) hold the same id.
            </summary>
            <param name="edge">An edge to obtain its id</param>
            <returns>The id from a given edge, which can be used for disjoint operations</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.TryGetEdgeIndex(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge,System.UInt32@)">
            <summary>
            Tries to get an edge id (<see cref="T:System.UInt32"/>) from an edge.
            Equivalences (A, B) and (B, A) hold the same id.
            </summary>
            <param name="edge">An edge to try to obtain its id</param>
            <param name="edgeIndex">The obtained id which is valid if the method returns true</param>
            <returns>True if the edge could be found, false otherwise</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge">
            <summary>
            Holds an undirected connection between two nodes.
            Equivalencies (A, B) and (B, A) are considered equal, and this class will only allow edges to be (A, B) where A is less or equal than B.
            Creating an edge with a B node greater than A just swaps the nodes to fulfill this requirement.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.NodeB">
            <summary>
            The second node on this edge that is always greater than or equal than <see cref="F:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.NodeA"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.NodeA">
            <summary>
            The first node on this edge that is always less or equal than <see cref="F:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.NodeB"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates an edge that connects nodeA and nodeB.
            Note that nodeA will always be less or equal than nodeB, so this constructor
            will swap nodes if necessary.
            </summary>
            <param name="nodeA">The first node to connect</param>
            <param name="nodeB">The second node to connect</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.op_Equality(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge,Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge)">
            <summary>
            Tests two edges for equality by testing their internal node IDs.
            Note that as nodes are sorted on edge construction, (A, B) and (B, A) are considered equal.
            </summary>
            <param name="left">The first edge to compare</param>
            <param name="right">The second edge to compare</param>
            <returns>True if they are equal, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.op_Inequality(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge,Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge)">
            <summary>
            Tests two edges for inequality by testing their internal node IDs.
            Note that as nodes are sorted on edge construction, (A, B) and (B, A) are considered equal.
            </summary>
            <param name="left">The first edge to compare</param>
            <param name="right">The second edge to compare</param>
            <returns>False if they are equal, true otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.Equals(System.Object)">
            <summary>
            Tests this instance with another edge for equality
            Note that as nodes are sorted on edge construction, (A, B) and (B, A) are considered equal.
            </summary>
            <param name="obj">The edge to compare with the current instance</param>
            <returns>True if the given edge is equal to the instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.Equals(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge)">
            <summary>
            Tests this instance with another edge for equality. 
            Note that as nodes are sorted on edge construction, (A, B) and (B, A) are considered equal.
            </summary>
            <param name="other">The edge to compare with the current instance</param>
            <returns>True if the given edge is equal to the instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph.Edge.GetHashCode">
            <summary>
            Gets the hash code for this edge. 
            </summary>
            <returns>A combined hash code for this edge</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IDisjointedGrouper">
            <summary>
            Decides how to form groups from nodes that are marked as disjointed by a break algorithm.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IDisjointedGrouper.MakeGroups(Keen.VRage.Physics.Colliders.BreakableCollider.IConnectivityGraph,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation,System.Collections.Generic.SortedSet{System.UInt16})">
            <summary>
            Calls <see cref="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdge(System.UInt16,System.UInt16)"/> and <see cref="M:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakOperation.RemoveEdges(System.UInt16)"/> from an operation based on some criteria.  
            </summary>
            <param name="graph">The graph to query connectivity between broken nodes</param>
            <param name="operation">The operation to remove edges and form groups</param>
            <param name="nodes">A set of nodes that are ordered spatially to form disjoint sets</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IRootBreakableCollider">
            <summary>
            Main original breakable collider. Can spawn derived shapes which point to it.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.BreakableCollider.IRootBreakableCollider.Fractures">
            <summary>
            All fractures that make up the model.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IRootBreakableCollider.GetFractureFromNode(System.UInt16)">
            <summary>
            Gets a fracture from a connectivity graph node.
            </summary>
            <param name="node">The node to get the associated fracture</param>
            <returns>The fracture associated to the graph node</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IRootBreakableCollider.GetFracture(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId)">
            <summary>
            Gets <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture"/> by <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IRootBreakableCollider.TryGetFracture(Keen.VRage.Physics.Colliders.BreakableCollider.FractureId,Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture@)">
            <summary>
            Tries to get a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider.Fracture"/> by <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.FractureId"/>
            </summary>
            <param name="id">The Id of the fracture to look for</param>
            <param name="fracture">The fracture that was obtained, valid only if the method returned true</param>
            <returns>True if a fracture could be obtained for that fractureId, false otherwise</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.BreakableCollider.IRootConnectivityGraph">
            <summary>
            The root graph that informs the original connectivity of an intact breakable collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.BreakableCollider.IRootConnectivityGraph.GetConnections(System.UInt16)">
            <summary>
            Gets nodes which are directly connected to the given node parameter.
            </summary>
            <param name="node">The node to get its connections</param>
            <returns>A span containing the nodes that are directly connected to the node parameter</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.CapsuleColliderArgs">
            <summary>
            Initialization arguments for a SphereCollider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.CapsuleColliderArgs.CreateCentered(System.Single,System.Single,System.Nullable{Keen.VRage.Library.Mathematics.Vector3})">
            <summary>
            Create a new capsule with CoM at origin.
            </summary>
            <param name="height">The total height of the capsule. Vertex distance = <c>height - 2 * radius</c>.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="up">The up vector used to position the vertices. Defaults to <see cref="F:Keen.VRage.Library.Mathematics.Vector3.Up"/>.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.CapsuleColliderArgs.CreateStanding(System.Single,System.Single,System.Nullable{Keen.VRage.Library.Mathematics.Vector3})">
            <summary>
            Create a new capsule with shape origin at the capsules bottom most point.
            </summary>
            <param name="height">The total height of the capsule. Vertex distance = <c>height - 2 * radius</c>.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="up">The up vector used to position the vertices. Defaults to <see cref="F:Keen.VRage.Library.Mathematics.Vector3.Up"/>.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ChunkedDynamicCompoundColliderArgs">
            <summary>
            Initialization arguments for a Dynamic Compound Collider using chunks
            </summary>
            <remarks>Dynamic compound colliders can fit any number of child colliders.</remarks>
            <remarks>Colliders created with these arguments implement <see cref="T:Keen.VRage.Physics.Colliders.ICompoundCollider"/></remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ChunkedDynamicCompoundColliderArgs.ChunkSize">
            <summary>
            Maximum shapes on each dynamic collider chunk.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ChunkedDynamicCompoundColliderArgs.#ctor(System.UInt16)">
            <summary>
            Creates the arguments for creating a Dynamic Compound Collider from a chunk size.
            </summary>
            <param name="chunkSize">The maximum amount of shapes each Dynamic Compound Collider can hold on each chunk</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ColliderSplitting.ColliderSplittingUtilities">
            <summary>
            Helper methods that aid in the need of splitting colliders with the goal of reducing the amount of sub-collider keys.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ColliderSplitting.ColliderSplittingUtilities.SubdivideSpatially(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Physics.Geometry.SimpleGeometry,System.Int32)">
            <summary>
            Splits a <see cref="T:Keen.VRage.Physics.Geometry.SimpleGeometry"/> into sectors using an Octree, which means they are spatially chunked.
            Iterates until each chunk has `maxTrianglesPerLevel` triangles or less.
            Then it creates a mesh collider for each chunk.
            Keeps quads together if they fall into the same chunk. 
            </summary>
            <param name="physicsColliders">The physics colliders API to create colliders</param>
            <param name="geometry">The geometry to partition</param>
            <param name="maxTrianglesPerCollider">The maximum amount of triangles that the resulting mesh colliders are allowed to contain</param>
            <remarks>The centers of triangles will be used and no triangle can end up being in more than a single chunk</remarks>
            <returns>A buffer containing created mesh colliders, one per each chunk</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ColliderSplitting.ColliderSplittingUtilities.GroupSpatially(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Library.Memory.Buffer{Keen.VRage.Physics.Colliders.IPhysicsCollider},System.Int32)">
            <summary>
            Groups a collection of convex colliders into sectors using an Octree, which means they are spatially chunked.
            Iterates until each chunk has `maxCollidersPerCompound` colliders or less.
            Then it creates a <see cref="T:Keen.VRage.Physics.Colliders.IStaticCompoundCollider"/> for each chunk.
            </summary>
            <param name="physicsColliders">The physics colliders API to create colliders</param>
            <param name="convexColliders">The colliders to group together</param>
            <param name="maxCollidersPerCompound">The maximum amount of colliders that the resulting static compound colliders are allowed to contain</param>
            <remarks>The centers of the colliders will be used and no collider can end up being in more than a single chunk</remarks>
            <returns>A buffer containing created static compound colliders, one per each chunk</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ConvexColliderArgs">
            <summary>
            Initialization arguments for a MeshCollider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ConvexColliderArgs.#ctor(Keen.VRage.Library.Memory.Buffer{Keen.VRage.Library.Mathematics.Vector4})">
            <summary>
            Create a new <see cref="T:Keen.VRage.Physics.Colliders.ConvexColliderArgs"/> instance with a buffer containing it's vertices.
            </summary>
            <param name="vertices">The buffer containing the collider's vertices. Buffer remains owned by the caller and is safe to dispose
            once the args are used.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ConvexColliderKind">
            <summary>
            Kind of the convex collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ConvexColliderKind.Hull">
            <summary>Generic convex hull.</summary>
            <remarks>This kind of convex collider</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ConvexColliderKind.Sphere">
            <summary><see cref="T:Keen.VRage.Physics.Colliders.ISphereCollider"/></summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ConvexColliderKind.Box">
            <summary><see cref="T:Keen.VRage.Physics.Colliders.IBoxCollider"/></summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ConvexColliderKind.Capsule">
            <summary><see cref="T:Keen.VRage.Physics.Colliders.ICapsuleCollider"/></summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ConvexColliderKind.Cylinder">
            <summary><see cref="T:Keen.VRage.Physics.Colliders.ICylinderCollider"/></summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ConvexColliderParameters">
            <summary>
            Parameters for the creation of convex colliders.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.CylinderColliderArgs">
            <summary>
            Initialization arguments for a SphereCollider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.CylinderColliderArgs.CreateCentered(System.Single,System.Single,System.Nullable{Keen.VRage.Library.Mathematics.Vector3},System.Int32)">
            <summary>
            Create a new cylinder with CoM at origin.
            </summary>
            <param name="height">The total height of the cylinder. Vertex distance = <c>height - 2 * radius</c>.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="up">The up vector used to position the vertices. Defaults to <see cref="F:Keen.VRage.Library.Mathematics.Vector3.Up"/>.</param>
            <param name="numSizes">Number of sides of the final cyclinder shape.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.CylinderColliderArgs.CreateStanding(System.Single,System.Single,System.Nullable{Keen.VRage.Library.Mathematics.Vector3},System.Int32)">
            <summary>
            Create a new cylinder with shape origin at the cylinders bottom most point.
            </summary>
            <param name="height">The total height of the cylinder. Vertex distance = <c>height - 2 * radius</c>.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="up">The up vector used to position the vertices. Defaults to <see cref="F:Keen.VRage.Library.Mathematics.Vector3.Up"/>.</param>
            <param name="numSizes">Number of sides of the final cyclinder shape.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.DecompositionOutputInfo">
            <summary>
            Information about decomposition processing and resulting hulls.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DecompositionOutputInfo.AbsoluteMaxError">
            <summary>
            Maximum distance error between convex hulls and actual geometry. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DecompositionOutputInfo.AbsoluteSymmetryMaxError">
            <summary>
            Absolute max error value used for symmetry detection.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DecompositionOutputInfo.AbsoluteSimplificationTolerance">
            <summary>
            Input simplification maximum error used.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DecompositionOutputInfo.Concavity">
            <summary>
            Sum of the concavities of the resulting decomposition.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DecompositionOutputInfo.SymmetryPlanes">
            <summary>
            Reflection symmetry planes found and used during decomposition.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs">
            <summary>
            Initialization arguments for a Dynamic Compound Collider.
            </summary>
            <remarks>Dynamic compound colliders are able to fit the given number of child colliders and can add/remove instances dynamically</remarks>
            <remarks>Colliders created with these arguments implement <see cref="T:Keen.VRage.Physics.Colliders.ICompoundCollider"/></remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.MAX_CAPACITY_ALLOWED">
            <summary>
            The maximum capacity allowed for creating a Dynamic Compound Collider. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.MaxCapacity">
            <summary>
            Maximum shapes in the dynamic collider.
            </summary>
            <remarks>Defaults to <see cref="F:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.MAX_CAPACITY_ALLOWED"/>.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.#ctor(System.UInt32)">
            <summary>
            Creates a Dynamic Compound Collider from a max capacity.
            </summary>
            <param name="maxCapacity">Represent the maximum amount of collider instances this object can hold. Can never be greater than <see cref="F:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.MAX_CAPACITY_ALLOWED"/></param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.DynamicCompoundColliderArgs.ToChunkSize(System.UInt32)">
            <summary>
            Gets a chunk size from a max Dynamic Collider capacity.
            </summary>
            <param name="maxCapacity">The given amount of collider instances to calculate the Dynamic Collider chunk size</param>
            <returns>A chunk size which can be used to create a Dynamic Compound Collider</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.EmptyColliderArgs">
            <summary>
            Initialization arguments for an empty collider.
            </summary>
            <seealso cref="P:Keen.VRage.Physics.IPhysicsColliders.Empty"/>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IBoxCollider">
            <summary>
            A Box shaped collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IBoxCollider.Bounds">
            <summary>
            Bounds of the collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ICapsuleCollider">
            <summary>
            Collider shaped like a capsule, a cylinder capped by an equal radius hemisphere at each end.
            </summary>
            <remarks>Capsules are a convex shape with two vertices, they are very efficient shapes.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICapsuleCollider.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICapsuleCollider.A">
            <summary>
            First vertex of the capsule
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICapsuleCollider.B">
            <summary>
            second vertex of the capsule.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IColliderArgs">
            <summary>
            Interface used by <see cref="M:Keen.VRage.Physics.IPhysics.AllocateCollider``1(``0@)"/> to hint the types that are acceptable as arguments.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ICompositeCollider">
            <summary>
            Represents a collider that has nested sub-colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompositeCollider.GetSubColliderOrTriangle(Keen.VRage.Physics.Colliders.SubColliderKey,Keen.VRage.Physics.Colliders.IPhysicsCollider@,Keen.VRage.Physics.Colliders.TriangleOrQuad@,System.UInt16@)">
            <summary>
            Gets a triangle/quad or a collider from a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/>.
            As keys represent leaf instances (bottom nodes of a hierarchy) on any type of nested collider,
            calling this will return either a non-composite collider or an associated triangle/quad.
            </summary>
            <param name="key">The key to perform the lookup for the sub-collider/triangle/quad</param>
            <param name="collider">The resulting collider that is non-composite if the key corresponds to a sub-collider</param>
            <param name="triangleOrQuad">The resulting triangle or quad if the key corresponds to a triangle/quad on the collider</param>
            <param name="tag">User-data associated with the collider or triangle/quad obtained</param>
            <returns>True if the key corresponds to a triangle/quad, false if corresponds to a sub-collider</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompositeCollider.GetLocalColliderIndex(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Get the local index of a collider given a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> that identifies it or one of its children.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompositeCollider.TryGetNextComposite(Keen.VRage.Physics.Colliders.SubColliderKey,System.UInt32@,Keen.VRage.Physics.Colliders.SubColliderKey@,Keen.VRage.Physics.Colliders.ICompositeCollider@)">
            <summary>
            Tries to get the next element on the collider tree given a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> that identifies a path to reach a leaf.
            Also outputs a masked <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> that can be used to further navigate nested composites, if the result is true.
            </summary>
            <remarks>To immediately get the leaf collider or triangle/quad associated with the key, use <see cref="M:Keen.VRage.Physics.Colliders.ICompositeCollider.GetSubColliderOrTriangle(Keen.VRage.Physics.Colliders.SubColliderKey,Keen.VRage.Physics.Colliders.IPhysicsCollider@,Keen.VRage.Physics.Colliders.TriangleOrQuad@,System.UInt16@)"/></remarks>
            <param name="key">The key to perform the lookup for a local composite instance</param>
            <param name="index">The index that is unique for this collider to identify its child</param>
            <param name="maskedKey">A <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> that is only valid if the method returns true,
            meaning that the next element in the collider tree is a composite and this key can be used to query it further</param>
            <param name="composite">A composite that is the direct child of the collider that this method is called, only present if this method returns true</param>
            <returns>True if the pointer collider is further down the tree, in that case maskedKey and composite are also set,
            false if the next local collider pointed by the key is a leaf collider.</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompositeCollider.DebugCountLeafColliders">
            <summary>
            Count up all leaf colliders in this compound collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompositeCollider.CollectLeaves(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.SubColliderKey})">
            <summary>
            Collect <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/>s of all leaf-most colliders in this composite.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ICompoundCollider">
            <summary>
            See <see cref="M:Keen.VRage.Physics.IPhysics.AllocateCollider``1(``0@)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.AddSubCollider(Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Add new active collision component for the collider
            </summary>
            <returns>Sub-collider index. Use for <see cref="M:Keen.VRage.Physics.Colliders.ICompoundCollider.RemoveSubCollider(System.Int32)"/></returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.AddSubColliderList(System.ReadOnlySpan{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}},System.Span{System.Int32})">
            <summary>
            Add a list of new sub-colliders to the compound.
            </summary>
            <param name="colliders">List of colliders to add.</param>
            <param name="outSubColliderIndices">Span where the indices for each added collider will be stored.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.RemoveSubCollider(System.Int32)">
            <summary>
            Remove previously added Sub-collider
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.RemoveSubColliderList(System.Span{System.Int32})">
            <summary>
            Remove a list of previously added Sub-colliders.
            </summary>
            <remarks>The implementation may modify <paramref name="subColliderIndices"/> before they are removed.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.GetColliderIndex(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Get a sub-collider index for a given key.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.GetInstances(Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}})">
            <summary>
            Populates the specified buffer with compound collider instance data.
            </summary>
            <param name="outInstances">Buffer reference to fill in. Should have at least <see cref="M:Keen.VRage.Physics.Colliders.ICompoundCollider.GetInstanceCount"/> available items to avoid additional allocations.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ICompoundCollider.GetInstanceCount">
            <summary>
            Returns the number of instances in this compound collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IConvexCollider">
            <summary>
            A collider represented by a number of vertices in a convex hull.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IConvexCollider.ConvexRadius">
            <summary>
            A radius around the convex hull. This value can be used artistically to produce more rounded shapes, but it is also internally a required
            parameter that is used to optimize collision detection. 
            </summary>
            <remarks>Value must be a non-zero positive real number.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IConvexCollider.Kind">
            <summary>
            Kind of built-in convex collider.
            </summary>
            <remarks>Each convex collider kind has matching interface that exposes additional parameters.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IConvexCollider.Vertices">
            <summary>
            The vertices in the convex shape.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IConvexCollider.GetConvexGeometry(Keen.VRage.Physics.Geometry.SimpleGeometry)">
            <summary>
            Get the geometry for this collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ICylinderCollider">
            <summary>
            Cylinder collider. Cylinders cannot be represented exactly in the physics system, they are instead constructed as a number of vertices shaped
            like a cylinder. 
            </summary>
            <remarks>Cylinders are far less performant and far less exact than capsules.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICylinderCollider.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICylinderCollider.SegmentCount">
            <summary>
            Number of segments in the cylinder.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICylinderCollider.A">
            <summary>
            First vertex of the capsule
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ICylinderCollider.B">
            <summary>
            second vertex of the capsule.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IGridBlockCatalog">
            <summary>
            A catalog of known blocks used by the <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
            <remarks>
            <para>
            The bounding region of a block is the range (or ranges) in grid cells overlapped by it's collider. Block colliders should always have
            their origin on the center of the cell with coordinates <see cref="F:Keen.VRage.Library.Mathematics.Vector3I.Zero"/>.
            </para>
            <para>In the grid the blocks are positioned by offsetting this position, the center of the block.</para>
            </remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IGridBlockCatalog.Add(System.Span{Keen.VRage.Library.Mathematics.BoundingBoxI},Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Register a block with the catalog.
            </summary>
            <param name="boundingRegions">A list of bounding regions for the block.</param>
            <param name="collider">The default collider for the block (the collider can be overridden, but it should always occupy the same bounding
                regions.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IGridBlockCatalog.Add(Keen.VRage.Library.Mathematics.BoundingBoxI,Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Register a block with the catalog.
            </summary>
            <param name="boundingRegion">A single bounding region for the entire block.</param>
            <param name="collider">The default collider for the block (the collider can be overridden, but it should always occupy the same bounding
                regions.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IPhysicsCollider">
            <summary>
            See <see cref="M:Keen.VRage.Physics.IPhysics.AllocateCollider``1(``0@)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.GetBoundingBox(Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Get a broadphase bounding box for this collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.AppendDebugGeometry(Keen.VRage.Physics.Geometry.SimpleGeometry)">
            <summary>
            Append the debug geometry from this collider into <paramref name="outGeometry"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.TryGetMassProperties(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <summary>
            Try get mass properties from collider that were baked in during content cooking
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.ComputeMassProperties(Keen.VRage.Physics.Colliders.MassBuildingParameters)">
            <summary>
            Compute mass properties for collider
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.SetMassProperties(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <summary>
            Set mass properties for collider
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.QueryAabb(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.SubColliderKey},Keen.VRage.Library.Mathematics.BoundingBox@)">
            <summary>
            Query a bounding box for sub-colliders. 
            </summary>
            <remarks>Sub colliders are not otherwise exposed anywhere, this method is used by tests and can be expanded if there is user demand.</remarks>
            <param name="hits">A buffer containing all the information about sub-collider hits</param>
            <param name="bounds">The local space bounding box to test against sub-colliders</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.QueryPoint(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderNearestQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Find the overlaps and/or shortest distances between a query point and all of the sub-colliders that belong to this collider.
            </summary>
            <param name="hits">A buffer containing all the information about sub-collider hits</param>
            <param name="args">Arguments to configure the query, specifying the point to query and the max distance</param>
            <param name="localOrientation">An orientation that this collider can have for the query</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderNearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Find the overlaps and/or shortest distances between a query collider and all of the sub-colliders that belong to this collider.
            </summary>
            <param name="hits">A buffer containing all the information about sub-collider hits</param>
            <param name="args">Arguments to configure the query, specifying the collider (A) to get the closest sub-colliders that belong to (B),
            the max distance to query and local transform of the collider (A) to use</param>
            <param name="localOrientation">An orientation that this queried collider (B) can have</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderSweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Casts a ray against a collider and retrieves hits.
            </summary>
            <param name="hits">A buffer containing all ray-cast hits (one per each triangle/quad or sub-collider hit)</param>
            <param name="args">Ray-Cast arguments to configure the query</param>
            <param name="localOrientation">An orientation that this collider can have for the query</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderSweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Library.Mathematics.Quaternion,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Casts another collider against this collider and retrieves hits.
            </summary>
            <param name="hits">A buffer containing all collider-cast hits (one per each triangle/quad or sub-collider hit)</param>
            <param name="args">Collider-Cast arguments to configure the query</param>
            <param name="localOrientation">An orientation that this collider can have for the query</param>
            <param name="collisionPreset"></param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.GetNumberOfVertices">
            <summary>
            Calculate the number of vertices contained by this collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ISparseGridCollider">
            <summary>
            A sparse grid collider, structured as a two level grid: top level is sparse grid of bottom level "chunks"; chunks are then dense grids that point to
            leaf colliders called "blocks" (<see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block"/>). Each block occupies a range of positions (or "cells") in the grid collider. Two blocks may not overlap.
            </summary>
            <remarks>
            <para>
            This collider allows chunks to be "optimized" via assigning them one or more colliders. Users can use any technique to construct this "chunk collider",
            but the goal is for it to be a more efficient representation of the children that on the other hand is usually much slower to construct and mutate.
            </para>
            <para>
            Chunks are allocated based on usage and can exist either because blocks overlap it or because the user has assigned it colliders via
            <see cref="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.SetChunkColliders(Keen.VRage.Library.Mathematics.Vector3I,System.Span{Keen.VRage.Physics.Colliders.IPhysicsCollider},System.Span{System.UInt32},System.Boolean)"/>. To clear an area of the collider the user has to make sure to both clear the blocks and any chunk collider.
            </para>
            </remarks>
            <seealso cref="T:Keen.VRage.Physics.Colliders.SparseGridColliderArgs"/>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block">
            <summary>
            Information about a block that can be added to the grid.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block.CustomCollider">
            <summary>
            Optional custom collider, native compatible layout to reduce overhead.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block.BlockIndex">
            <summary> Collider for the block. </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block.Position">
            <summary>Center position of the block.</summary>
            <remarks>Occupied bounds are given by it's rotation and bounding volumes.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.ISparseGridCollider.Block.Orientation">
            <summary>Orientation of the block.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISparseGridCollider.StepSize">
            <summary>
            Distance between positions in the collider.  
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISparseGridCollider.ChunkSize">
            <summary>
            Size of a chunk in this collider.
            </summary>
            <remarks>Each chunk can be optimized with a user defined collider, see <see cref="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.SetChunkColliders(Keen.VRage.Library.Mathematics.Vector3I,System.Span{Keen.VRage.Physics.Colliders.IPhysicsCollider},System.Span{System.UInt32},System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISparseGridCollider.ChildCount">
            <summary>
            Number of child colliders, this includes chunk collider and blocks.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISparseGridCollider.ChunkCount">
            <summary>
            Number of active chunks.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISparseGridCollider.BlockCatalog">
            <summary>
            Block catalog used by this collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.AddBlocks(System.ReadOnlySpan{Keen.VRage.Physics.Colliders.ISparseGridCollider.Block},System.Span{System.UInt32})">
            <summary>
            Add a range of blocks.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.ChangeBlockShapes(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{Keen.VRage.Physics.Colliders.IPhysicsCollider})">
            <summary>
            Call this to change the collider of blocks or to notify that a mutable collider for the block has been updated (invalidate collision caches).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.RemoveBlocks(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Remove a range of blocks.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.SetChunkColliders(Keen.VRage.Library.Mathematics.Vector3I,System.Span{Keen.VRage.Physics.Colliders.IPhysicsCollider},System.Span{System.UInt32},System.Boolean)">
            <summary>
            Set an optimized collection of colliders for an entire chunk in the grid. This replaces all previous colliders for this chunk.
            </summary>
            <param name="chunkIndex">The position of the chunk (note it's min or center cell coordinate).</param>
            <param name="colliders">The colliders to use for the chunk. Set to an empty collection to clear it and fall back to the blocks on the chunk.</param>
            <param name="leafIndices">The leaf indices of the inserted chunk colliders. These will be written as a result.</param>
            <param name="hideBlocks">Whether to <em>hide</em> the blocks on the chunk, when hidden those blocks will not participate in collision detection.</param>
            <remarks>If any collider exceeds the amount of sub-collider key bits when inserted into the chunk, this method will trigger an assert</remarks>
            <remarks>Chunk colliders are positioned form the lowest coordinate in the chunk.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.GetChunkColliders(Keen.VRage.Library.Mathematics.Vector3I)">
            <summary>
            Get the colliders assigned to an entire chunk. Can be empty if no colliders were set for the chunk.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.GetChunkCoordinates(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Gets the chunk coordinates from a given sub-collider key.
            </summary>
            <param name="key">The key to get the chunk coordinates from, associated to a collider</param>
            <returns>Chunk coordinates where the leaf collider associated with the key corresponds to</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.ISparseGridCollider.IsPartOfChunkCollider(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Tells if the <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> points to a leaf collider or triangle that is a child of a chunk collider (or a direct chunk collider).
            </summary>
            <param name="key">The key to know if the leaf collider or triangle pointed is part of a chunk or not</param>
            <returns>True if the key points to a collider that is on a chunk, false otherwise (the collider is part of a grid block)</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.ISphereCollider">
            <summary>
            Sphere Collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISphereCollider.Radius">
            <summary>
            Radius of the sphere. Same as <see cref="P:Keen.VRage.Physics.Colliders.IConvexCollider.ConvexRadius"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.ISphereCollider.Center">
            <summary>
            Center of the sphere in local space of the collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IStaticCompoundCollider">
            <summary>
            See <see cref="M:Keen.VRage.Physics.IPhysics.AllocateCollider``1(``0@)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IStaticCompoundCollider.GetColliderIndex(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Get a sub-collider index for a given key.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IStaticCompoundCollider.GetSubCollider(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Gets a child collider from a sub-collider key.
            This works even if the sub-collider key points to a child collider on an already child of this collider.
            It will return the direct child of this collider.
            </summary>
            <param name="key">The sub-collider key to retrieve its corresponding sub-collider</param>
            <returns>A collider that is a direct child of this collider</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IStaticCompoundCollider.GetInstances(Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}})">
            <summary>
            Populates the specified buffer with compound collider instance data.
            </summary>
            <param name="outInstances">Buffer reference to fill in. Should have at least <see cref="M:Keen.VRage.Physics.Colliders.IStaticCompoundCollider.GetInstanceCount"/> available items to avoid additional allocations.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IStaticCompoundCollider.GetInstanceCount">
            <summary>
            Returns the number of instances in this compound collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.IVoxelCollider">
            <summary>
            See <see cref="T:Keen.VRage.Physics.Colliders.VoxelColliderArgs"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.IVoxelCollider.AFFECTED_RANGE_INFLATION">
            Extra cells to add to a modified range before calling <see cref="M:Keen.VRage.Physics.Colliders.IVoxelCollider.UpdateRange(Keen.VRage.Library.Mathematics.BoundingBoxI,System.Span{System.Byte},System.Span{System.Byte})"/>. 
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IVoxelCollider.Size">
            <summary>
            Size of each dimension of the collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IVoxelCollider.Scale">
            <summary>
            user defined of the collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IVoxelCollider.VertexCount">
            <summary>
            Number of vertices in the collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.IVoxelCollider.TriangleCount">
            <summary>
            Number of triangles in the collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IVoxelCollider.UpdateRange(Keen.VRage.Library.Mathematics.BoundingBoxI,System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Update a range of the collider with new voxel data.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.IVoxelCollider.ClearRange(Keen.VRage.Library.Mathematics.BoundingBoxI)">
            <summary>
            Clear all triangles ina rage of the collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.MassBuildingParameters">
            <summary>
            Parameters for computing the mass of a collider.
            </summary>
            <seealso cref="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.ComputeMassProperties(Keen.VRage.Physics.Colliders.MassBuildingParameters)"/>.
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.MassBuildingParameters.Mass">
            <summary>
            Explicit mass to use.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.MassBuildingParameters.Density">
            <summary>
            Material density to use.
            </summary>
            <remarks>Mass will be equal to <see cref="P:Keen.VRage.Physics.Colliders.MassBuildingParameters.Density"/> times the total volume of the shape.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.MassBuildMode">
            <summary>
            Mode used to calculate the total mass of a collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MassBuildMode.Density">
            <summary>Total mass is calculated from the volume of the shape.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MassBuildMode.Mass">
            <summary>Total mass is provided by the user.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.MassBuildQuality">
            <summary>
            Quality of the built mass. Allows trading performance for precision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MassBuildQuality.Low">
            <summary>Build mass from collider AABB.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MassBuildQuality.Medium">
            <summary>Build mass from children AABBs.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MassBuildQuality.High">
            <summary>Build mass from precise children AABBs.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.MeshColliderArgs">
            <summary>
            Initialization arguments for a MeshCollider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.MeshColliderParameters">
            <summary>
            Parameters for the creation of mesh colliders.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.MeshColliderParameters.UseMaterials">
            <summary>
            Whether to take materials from triangles (see <see cref="P:Keen.VRage.Physics.Data.PhysicsTriangle.MaterialIndex"/>).
            </summary>
            <remarks>
            <para>When using per-triangle materials the material index will either correspond to a <see cref="T:Keen.VRage.Physics.Materials.MaterialId"/> or an index
            in a <see cref="T:Keen.VRage.Physics.Materials.IMaterialPalette"/> when a palette is provided in <see cref="F:Keen.VRage.Physics.Colliders.MeshColliderArgs.MaterialPalette"/>.
            </para>
            <para>It is possible to use the material indices for arbitrary data, the value will be reported as the <c>tag</c> parameter in <see cref="M:Keen.VRage.Physics.Colliders.ICompositeCollider.GetSubColliderOrTriangle(Keen.VRage.Physics.Colliders.SubColliderKey,Keen.VRage.Physics.Colliders.IPhysicsCollider@,Keen.VRage.Physics.Colliders.TriangleOrQuad@,System.UInt16@)"/>.
            Colliders used as such should not be used in any rigid body, otherwise there will be exceptions during simulation when no material can be located for the index.</para>
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.SparseGridColliderArgs">
            <summary>
            Arguments for the construction of a <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
            <seealso cref="M:Keen.VRage.Physics.IPhysicsColliders.AllocateCollider``1(``0@)"/>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.StepSize">
            <summary> Distance between of block positions on the grid. </summary>
            <remarks>Blocks have integer coordinates, the final position is given by multiplying the coordinate with the step.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.GridOffset">
            <summary> Offset in the position of the grid. </summary>
            <remarks>
            This offsets the grid to match shapes, for example if the shapes are centered then using an offset equal to -<see cref="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.StepSize"/>/2 will
            bring the grid into alignment with the shapes.
            </remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.OverlapTolerance">
            <summary> Maximum overlap between chunk shapes that is ignored.</summary>
            <remarks>
            If this value is less than zero then the overlap is not checked for. A positive value will cause each chunk shape to be measured and added to
            neighbourhood lists on neighbouring chunks (and thus added to queries that hit those neighbours).
            </remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.MaxChildren">
            <summary>
            Maximum number of children in the shape.
            </summary>
            <remarks><see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> has 32 bits, this means the maximum number of shapes a child may have will be
            <c>pow(2, 32 - ⌈log₂MaxChildren⌉)</c>. It is important to find a good balance for this value, especially  with regards to optimized cells
            which both count as children <em>and</em> are usually larger than individual blocks, therefore needing more bits.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.ChunkSize">
            <summary>
            Size of a bottom grid Chunk. Must be a power of two. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.SectionSize">
            <summary>
            Size of a grid Section. 
            </summary>
            <remarks>
            <para>This is an internal optimization where the grid is split into multiple sub-shapes. Smaller values result in more subdivision which
            negatively impacts the broadphase but positively impacts the narrow phase.</para>
            <para>Setting this to zero toggle this feature off.</para>
            <para>The section size must be a power of two.</para></remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.Catalog">
            <summary>
            Catalog of grid blocks that can be used on the shape.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.#ctor(Keen.VRage.Physics.Colliders.IGridBlockCatalog,System.Single,System.Int32,System.Int32,System.Nullable{System.Single},System.Single,System.Int32)">
            <summary>
            Create a new <see cref="T:Keen.VRage.Physics.Colliders.SparseGridColliderArgs"/>.
            </summary>
            <param name="catalog">Block catalog to use for the shape. The catalog records important immutable information about blocks such as their center, shape and bounding volumes.</param>
            <param name="stepSize">User provided step size.</param>
            <param name="maxChildren">See <see cref="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.MaxChildren"/>. Default is <c>1 &lt;&lt; 20</c> or about 1 Million children, this leaves about 4 thousand
                maximum shapes for each child.</param>
            <param name="chunkSize">The size of a bottom level cell. Must be a power of two.</param>
            <param name="positionOffset">A constant offset to the position of the grid, if a <c>null</c> value is provided this is set to the default of -<see cref="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.StepSize"/>/2 (blocks are centered on the grid positions).</param>
            <param name="overlapTolerance">Tolerance for chunk shape overlaps, negative values cause the shape to assume no overlap, positive values ignore overlaps up to the threshold.</param>
            <param name="sectionSize">Size of grid sections. Set to 0 for no sub-sections.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions">
            <summary>
            Extension methods for <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.AllocateSparseGrid(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Physics.Colliders.IGridBlockCatalog,System.Single,System.Int32,System.Int32,System.Nullable{System.Single},System.Single)">
            <summary>
            Allocate a new <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
            <param name="self">Current instance of <see cref="T:Keen.VRage.Physics.IPhysicsColliders"/>.</param>
            <param name="catalog">The block catalog to use for the grid.</param>
            <param name="stepSize">User provided step size.</param>
            <param name="maxChildren">See <see cref="F:Keen.VRage.Physics.Colliders.SparseGridColliderArgs.MaxChildren"/>. Default is <c>1 &lt;&lt; 20</c> or about 1 Million children
            this leaves about 4 thousand maximum shapes for each child.</param>
            <param name="chunkSize">The size of a bottom level chunk. Must be a power of two.</param>
            <param name="positionOffset">A constant offset to the position of the grid, if a <c>null</c> value is provided this is set to the default of
            -<paramref name="stepSize"/>/2 (blocks are centered on the grid positions).</param>
            /// <param name="overlapTolerance">Tolerance for chunk shape overlaps, negative values cause the shape to assume no overlap, positive values ignore overlaps up to the threshold.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.AllocateSparseGrid(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Physics.Colliders.SparseGridColliderArgs@)">
            <summary>
            Allocate a new <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.AddBlock(Keen.VRage.Physics.Colliders.ISparseGridCollider,Keen.VRage.Physics.Colliders.ISparseGridCollider.Block@)">
            <summary>
            Add a single block to the grid.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.RemoveBlock(Keen.VRage.Physics.Colliders.ISparseGridCollider,System.UInt32)">
            <summary>
            Remove a single block from the grid.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.ChangeBlockShape(Keen.VRage.Physics.Colliders.ISparseGridCollider,System.UInt32,Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Change the shape of a single block.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.SparseGridColliderExtensions.SetChunkCollider(Keen.VRage.Physics.Colliders.ISparseGridCollider,Keen.VRage.Library.Mathematics.Vector3I,Keen.VRage.Physics.Colliders.IPhysicsCollider,System.Boolean)">
            <summary>
            Set an optimized collider for an entire chunk in the grid. This replaces all previous colliders for this chunk.
            </summary>
            <param name="self">The grid collider instance to replace its chunk</param>
            <param name="chunkIndex">The position of the chunk (not it's min or center cell coordinate).</param>
            <param name="collider">The collider to use for the chunk. Set <c>null</c> to clear it and fall back to the blocks on the chunk.</param>
            <param name="hideBlocks">Whether to <em>hide</em> the blocks on the chunk, when hidden those blocks will not participate in collision detection.</param>
            <remarks>If any collider exceeds the amount of sub-collider key bits when inserted into the chunk, this method will trigger an assert,</remarks>
            <returns>The current leaf index of the chunk collider. If <paramref name="collider"/> is <c>null</c> then <see cref="F:System.UInt32.MaxValue"/> is returned.</returns>
            <remarks>Chunk colliders are positioned form the lowest coordinate in the chunk.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.SphereColliderArgs">
            <summary>
            Initialization arguments for a SphereCollider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.StaticCompoundColliderArgs">
            <summary>
            Initialization arguments for a Static Compound Collider.
            <remarks>Static Compound Colliders can hold any other collider, but are initialized once and their collider collections are immutable</remarks> 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Colliders.StaticCompoundColliderArgs.#ctor(Keen.VRage.Library.Memory.Buffer{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}})">
            <summary>
            Creates a Static Compound Collider from a collection of colliders with their positions and orientations.
            </summary>
            <param name="colliders"></param>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.SubColliderKey">
            <summary>
            Opaque representation of a key used to identify a leaf collider on any body (large or not).
            </summary>
            <remarks>
            <para>
            Sub collider keys uniquely identify a child collider in it's collider hierarchy.
            We represent this using the double amount of bits for large colliders.
            32 bits are used for pointing to the large collider index,
            and 32 bits are used for pointing to the actual leaf. 
            The number of bits in the key is split based on the number of children each shape has.
            Because of this split the number of children each container may have is limited.
            </para>
            </remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.SubColliderKey.Invalid">
            <summary>
            Key that cannot be used to refer to any colliders.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.TriangleOrQuad">
            <summary>
            Defines a triangle or a quad associated to a triangle-based collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.TriangleOrQuad.V0">
            <summary>
            First vertex of the triangle or quad.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.TriangleOrQuad.V1">
            <summary>
            Second vertex of the triangle or quad.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.TriangleOrQuad.V2">
            <summary>
            Third vertex of the triangle or quad.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Colliders.TriangleOrQuad.V3">
            <summary>
            Fourth vertex of the quad, NaN for triangles.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Colliders.TriangleOrQuad.IsQuad">
            <summary>
            Returns if this structure holds a quad or a triangle.
            V3 is valid if this is a quad.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Colliders.VoxelColliderArgs">
            <summary>
            Initialization arguments for a MeshCollider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.CollisionPresetType">
            <summary>
            <see cref="T:Keen.VRage.Physics.CollisionPreset"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.CollisionPresetType.AllHits">
            <summary>
            Report all bodies for each sub collider hit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.CollisionPresetType.AllBodies">
            <summary>
            Report all bodies for the first sub collider hit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.CollisionPresetType.AnyHit">
            <summary>
            Report the first body hit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.CollisionPresetType.ClosestHit">
            <summary>
            Report the closest body hit.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.CollisionPreset">
            <summary>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            TODO: SE2-2703
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.CollisionPreset.Default">
            <inheritdoc cref="F:Keen.VRage.Physics.CollisionPresetType.AllHits"/>
        </member>
        <member name="P:Keen.VRage.Physics.CollisionPreset.Closest">
            <inheritdoc cref="F:Keen.VRage.Physics.CollisionPresetType.ClosestHit"/>
        </member>
        <member name="P:Keen.VRage.Physics.CollisionPreset.Any">
            <inheritdoc cref="F:Keen.VRage.Physics.CollisionPresetType.AnyHit"/>
        </member>
        <member name="P:Keen.VRage.Physics.CollisionPreset.Bodies">
            <inheritdoc cref="F:Keen.VRage.Physics.CollisionPresetType.AllBodies"/>
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition">
            <summary>
            Definition for a character rigid body.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaterialInAir">
            <summary>
            The physics material to use when the character is flying.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.JumpHeight">
            <summary>
            Apex distance for the character jump in meters.
            The jump applies a fixed impulse, it will reach this height if the current gravity is equal to JumpReferenceGravity.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.JumpReferenceGravity">
            <summary>
            Reference gravity acceleration for the character's jump.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.AirtimeControl">
            <summary>
            How much control authority the character has while jumping and falling.
            Setting this to one means the character will be able to move
            while falling at the same speed is if they were supported by a surface.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.BaseGroundVelocity">
            <summary>
            The velocity the character will move at when the movement input is equal to one.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaxVelocity">
            <summary>
            The maximum velocity the character controller will allow the character to have at any given time.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.GravityFactor">
            <summary>Factor that multiplies the gravity experienced by the character.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaxSlopeAngle">
            <summary>
            Max angle, in degrees, of a slope the character should be able to climb.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.SupportDistance">
            <summary>
            Maximum distance between the character and a surface for it to be considered as supporting it.
            This also affects the maximum velocity a surface can move away from the character
            and still bring it with it (max speed = 60 * SupportDistance).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinimumLandingDistance">
            <summary>Minimum distance from the ground before the character is considered to land from a jump.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.StickyFactor">
            <summary>
            How much the character attempts to match the velocity of the surface that supports him, by default this value is 1,
            meaning that it matches the full velocity of the supporting body.  
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Mass">
            <summary>
            The default mass for the character.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.CenterOfMass">
            <summary>
            Body center of mass relative to coordinate center in body-local space.
            Default is 0.9 in the positive vertical direction.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Simulated">
            <summary>
            Tells if the character is simulated on the session or if it is driven by <see cref="T:Keen.VRage.Core.WorldTransform"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinTeleportDistance">
            <summary>
            Minimum distance (in meters) that the character can move in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinTeleportAngleDegrees">
            <summary>
            Minimum angle (in degrees) that the character can rotate in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions). Angles above 20 degrees will be under-estimated.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaxAcceleration">
            <summary>
            Maximum acceleration for the character,
            this limits the maximum instantaneous velocity change the character controller can impart.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaxAppliedForce">
            <summary>
            Max force in newtons the character can apply to other rigid bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinSurfaceDistanceExcess">
            <summary>
            Minimum distance between the character and the supporting surface to start
            sticking it to the ground (with or without gravity).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinVelocityAlignment">
            <summary>
            Minimum angle between the character velocity and the surface normal or gravity
            to start sticking the character to the surface.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MaxSlopeAngleCosine">
            <summary>
            Cosine of the max angle that slopes should have for the character to climb them up.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.MinVelocityAlignmentCosine">
            <summary>
            Cosine of the minimum angle between the character velocity and the surface normal or gravity
            to start sticking the character to the surface.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#CharacterPhysicsComponentDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#CharacterPhysicsComponentDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#CharacterPhysicsComponentDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaterialInAirAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpHeightAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.JumpReferenceGravityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.AirtimeControlAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.BaseGroundVelocityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxVelocityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.GravityFactorAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SupportDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinimumLandingDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StickyFactorAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MassAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.CenterOfMassAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.SimulatedAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAccelerationAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxAppliedForceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MaxSlopeAngleCosineAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.MinVelocityAlignmentCosineAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Lazy{Keen#VRage#Physics#ICharacterStateMachine}}#Set(System.Object,System.Lazy{Keen.VRage.Physics.ICharacterStateMachine}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Lazy{Keen#VRage#Physics#ICharacterStateMachine}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Lazy{Keen#VRage#Physics#ICharacterStateMachine}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Lazy{Keen#VRage#Physics#ICharacterStateMachine}}#Set(System.Byte@,System.Lazy{Keen.VRage.Physics.ICharacterStateMachine}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,System.Lazy{Keen.VRage.Physics.ICharacterStateMachine}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder._stateMachineAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#ICharacterStateMachine}#Set(System.Object,Keen.VRage.Physics.ICharacterStateMachine@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#ICharacterStateMachine}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#ICharacterStateMachine}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#ICharacterStateMachine}#Set(System.Byte@,Keen.VRage.Physics.ICharacterStateMachine@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@,Keen.VRage.Physics.ICharacterStateMachine@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition.TypeInfoHolder.StateMachineAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#CharacterPhysicsComponentObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponent">
            <summary>
            Character physics component.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponent.StandUpCheckCollider">
            <summary>
            Collider for checking whether character is able to stand up from crouched position
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponent.CollectSupport">
            <summary>
            Whether the list of supporting contacts should be collected for this character.
            </summary>
            <remarks>The value is stored in <see cref="T:Keen.VRage.Physics.Data.CharacterSupportData"/>.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponent.MaxSlopeAngleCosine">
            <summary>
            Cosine of the max angle that slopes should have for the character to climb them up.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.DefaultWorldManagerSettings">
            <summary>
            Settings for the default world manager.
            </summary>
            <remarks>The default manager allows for a single world with a fixed position and size.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.DEFAULT_RADIUS">
            <summary>
            Default radius for the world.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.WorldBounds">
            <summary>
            Maximum radius for the physics world.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.OutOfBoundsDelegate">
            <summary>
            Delegate for <see cref="F:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.OutOfBoundsAction"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.OutOfBoundsAction">
            <summary>
            Action invoked when a body leaves the above defined maximum world bounds.
            </summary>
            <remarks>Default value is <see cref="M:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.ClampBounds(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.BoundingBoxD@)"/>.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Components.DefaultWorldManagerSettings.ClampBounds(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.BoundingBoxD@)">
            <summary>
            Clamp an entity to be within the bounds of the world.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.FixedPhysicsConstraintComponent">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent"/> that uses <see cref="T:Keen.VRage.Physics.Constraints.Arguments.FixedConstraintArgs"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.IPhysicConstraintCreator">
            <summary>
            Interface to create <see cref="T:Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs"/> from the creator's <see cref="T:Keen.VRage.DCS.Components.Entity"/> to other entities.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.IPhysicConstraintCreator.Count">
            <summary>
            How many entities are constrained by this creator.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.IPhysicConstraintCreator.TryAddConstraint(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Add a constraint between this creator's entity and the <paramref name="target"/>.
            </summary>
            <remarks>Only 1 constraint can be added per target.</remarks>
            <returns>True if the constraint was added. False if the entity was already constrained.</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Components.IPhysicConstraintCreator.TryRemoveConstraint(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove a constraint between this creator's entity and the <paramref name="target"/>.
            </summary>
            <returns>True if the constraint was removed. False if the entity was not constrained.</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Components.IPhysicConstraintCreator.ClearConstraints">
            <summary>
            Remove all constraints from this creator's entity.
            </summary>
            <returns>True if any constraint was removed. False if no entity was constrained.</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Components.IPhysicConstraintCreator.GetConstrainedEntities(System.Span{Keen.VRage.DCS.Accessors.DEntity})">
            <summary>
            Collect constrained entities into <paramref name="entitiesOut"/>.
            </summary>
            <remarks>Stop filling the <see cref="T:System.Span`1"/> when <see cref="P:Keen.VRage.Physics.Components.IPhysicConstraintCreator.Count"/> or <see cref="P:System.Span`1.Length"/> is reached.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Components.IPhysicConstraintCreator.OnConstrainedRemovedSignal">
            <summary>
            Called when the constrained entity is removed from the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.PhysicConstraintCreatorHelper">
            <summary>
            Provide extensions methods for <see cref="T:Keen.VRage.Physics.Components.IPhysicConstraintCreator"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicConstraintCreatorHelper.First(Keen.VRage.Physics.Components.IPhysicConstraintCreator)">
            <inheritdoc cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicConstraintCreatorHelper.Single(Keen.VRage.Physics.Components.IPhysicConstraintCreator)">
            <inheritdoc cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicConstraintCreatorHelper.FirstOrDefault(Keen.VRage.Physics.Components.IPhysicConstraintCreator)">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicConstraintCreatorHelper.SingleOrDefault(Keen.VRage.Physics.Components.IPhysicConstraintCreator)">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="T:Keen.VRage.Physics.Components.IPhysicsColliderProvider">
            <summary>
            Interface for components which are capable of providing a collider for the <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.IPhysicsColliderProvider.COLLIDER_PROVIDER_TAG">
            <summary>
            Tag used by <see cref="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent"/> to locate the <see cref="T:Keen.VRage.Physics.Components.IPhysicsColliderProvider"/> component.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.IPhysicsColliderProvider.Collider">
            <summary>
            The collider the <see cref="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent"/> should use.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.IPhysicsMotionProvider">
            <summary>
            Interface for components which are capable of providing motion for the <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.IPhysicsMotionProvider.MOTION_PROVIDER_TAG">
            <summary>
            Tag used by <see cref="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent"/> to locate the <see cref="T:Keen.VRage.Physics.Components.IPhysicsMotionProvider"/> component.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.IPhysicsMotionProvider.Motion">
            <summary>
            The motion type the <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent"/> should use at init.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.OnBodyMotionChangedSignal">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.IPhysicsMotionProvider"/> announces via this changes to <see cref="P:Keen.VRage.Physics.Components.IPhysicsMotionProvider.Motion"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.LargeWorldManagerSettings">
            <summary>
            World manager for large worlds.
            </summary>
            <remarks>Distributes bodies into multiple physics worlds and presents that transparently to the simulation os if there was only a single world.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.LargeWorldManagerSettings.MinimumWorldRadius">
            <summary>Minimum radius for world.</summary>
            <remarks>Larger values reduce the maximum number of worlds.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.LargeWorldManagerSettings.MaximumWorldRadius">
            <summary>Maximum radius that will be acceptable for any physics world.</summary>
            <remarks>Whenever the entities in the session will be arranged such that it's not possible to divide them into worlds smaller than this size
            a warning will be output on the logs.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.LargeWorldManagerSettings.WorldMargin">
            <summary>
            Minimum empty boundary at the edges of worlds where no body should be. 
            </summary>
            <remarks>This boundary should be no smaller than the maximum distance any one entity can traverse in a single simulation step.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.LargeWorldManagerSettings.MotionPredictionFactor">
            <summary>
            Bodies consider their velocity to calculate the cluster they are in.
            This value goes from [0, inf] and scales the velocity expansion of body bounds to test against cluster volumes.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.LargeWorldManagerSettings.MaximumMotionPredictionRange">
            <summary>
            Maximum body bounds radius expansion when considering velocities.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent">
            <summary>
            Base component to create <see cref="T:Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs"/> from one entity to other entities.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.Initialize(Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReferenceBase@,Keen.VRage.DCS.Components.Entity,Keen.VRage.DCS.Components.Entity)">
            <summary>
            Create or recycle a <see cref="T:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReferenceBase"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReferenceBase">
            <summary>
            Base constraint reference.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReference">
            <summary>
            Simple implementation that create a constraint from the <see cref="F:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReference.Args"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReference.#ctor(Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent)">
            <summary>
            Simple implementation that create a constraint from the <see cref="F:Keen.VRage.Physics.Components.PhysicsConstraintBaseComponent.WeakConstraintReference.Args"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponentDefinition">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.RagdollComponent"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.RagdollAsset">
            <summary>
            Handle to the ragdoll asset.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.EntityLayer">
            <summary>
            The entity physical layer that the ragdoll will use.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.RagdollBoneTags">
            <summary>
            Bone tags mapping. Used to make it possible to change physical state of bones with given tag.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.PhysicsMaterial">
            <summary>
            Material assigned to all bodies in the ragdoll.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.MinTeleportVelocity">
            <summary>
            Velocity at which the ragdoll rather teleports to the target world position instead of moving.
            Sudden change of world position without using teleportation will create huge forces on the ragdoll,
            which can lead to overshooting and instability.
            I.e. velocity of 120m/s with 60 ticks per second means character will teleport if moved more than 2 meters in a tick.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.PoweredMotorsParameters">
            <summary>
            Parameters of the powered motors in the ragdoll.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.BlendingDuration">
            <summary>
            Duration during which the ragdoll state blends when transitioning between states.
            Used to smoothen animation discontinuities mainly when switching from dynamic state to keyframed. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#RagdollComponentDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#RagdollComponentDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RagdollComponentDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Set(System.Object,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Set(System.Byte@,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollAssetAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.RagdollBoneTagsAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PhysicsMaterialAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.MinTeleportVelocityAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Object,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Byte@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.PoweredMotorsParametersAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Set(System.Object,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Set(System.Byte@,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinition@,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinition.TypeInfoHolder.BlendingDurationAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters">
            <summary>
            Parameters of the powered motors in the ragdoll.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.MaxForceLowerLimit">
            <summary>
            Maximum force exerted by the motor when strength of ragdoll state is 0.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.MaxForceUpperLimit">
            <summary>
            Maximum force exerted by the motor, when strength of ragdoll state is 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TauLowerLimit">
            <summary>
            The relative stiffness between 0 and 1, when strength of ragdoll state is 0.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TauUpperLimit">
            <summary>
            The relative stiffness between 0 and 1, when strength of ragdoll state is 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.DampingLowerLimit">
            <summary>
            The relative damping between 0 and 1, when strength of ragdoll state is 0.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.DampingUpperLimit">
            <summary>
            The relative damping between 0 and 1, when strength of ragdoll state is 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.ProportionalRecoveryVelocity">
            <summary>
            The variable portion of the recovery velocity (weighted by error magnitude).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.ConstantRecoveryVelocity">
            <summary>
            The fixed portion of the recovery velocity (not weighted by error magnitude).
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceLowerLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.MaxForceUpperLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauLowerLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.TauUpperLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingLowerLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.DampingUpperLimitAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ProportionalRecoveryVelocityAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Set(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters.TypeInfoHolder.ConstantRecoveryVelocityAccessor.Get(Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponent">
            <summary>
            Component that adds ragdoll to the entity. Interact with ragdoll using <see cref="T:Keen.VRage.Physics.Data.RagdollInstanceData"/>
            and <see cref="T:Keen.VRage.Physics.Data.RagdollInstanceOutput"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponent.PublishRagdollStateJob">
            <summary>
            Job that publishes ragdoll pose via <see cref="T:Keen.VRage.Physics.Components.RagdollPoseSignals.RagdollPosePublish"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponent._rigidBodyComponent">
            <remarks>
            Not needed for anything else than force rigid body to be initialized first for this entity
            </remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponent.Mapping._toRagdoll">
            <summary>
            Index for every high skeleton bone to index in low skeleton
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponent.Mapping._fromRagdoll">
            <summary>
            Index for every low skeleton bone to index in high skeleton
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponent.Mapping.RemapToRagdoll(System.ReadOnlySpan{Keen.VRage.Core.RelativeTransform},System.Span{Keen.VRage.Core.RelativeTransform})">
            <summary>
            Map high skeleton into low skeleton, reordering and potentially skipping bones.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponent.Mapping.RemapFromRagdoll(System.ReadOnlySpan{Keen.VRage.Library.Mathematics.Matrix},System.Span{System.Nullable{Keen.VRage.Library.Mathematics.Matrix}})">
            <summary>
            Map low skeleton into high skeleton, reordering bones. Skipped bones are set to null.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoseSignals">
            <summary>
            Signals used for ragdoll component functionality
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoseSignals.AnimatorPoseUpdate">
            <summary>
            Signal invoked from animator component to update ragdoll target pose using animated skeleton local bone transforms.
            </summary>
            <remarks>
            Signature: void M(ReadOnlySpan&lt;RelativeTransform&gt; localPose, bool discontinuity)
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoseSignals.RagdollStateUpdate">
            <summary>
            Signal invoked from animator component to set ragdoll state.
            </summary>
            <remarks>
            Signature: void M(RagdollState newState)
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollPoseSignals.RagdollPosePublish">
            <summary>
            Signal handled from animator component to receive actual (based on ragdoll) animated skeleton absolute bone transform.
            </summary>
            <remarks>
            <para>Signature: void M(ReadOnlySpan&lt;Matrix?&gt; absolutePose)</para>
            <para>
            This signal is invoked as part of <see cref="T:Keen.VRage.Physics.Components.RagdollComponent.PublishRagdollStateJob"/>,
            which is by default invoked whenever after simulation. You can use job ordering attributes to constraint it further as you need.
            </para>
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.LinearVelocity">
            <summary>
            Initial linear velocity
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.AngularVelocity">
            <summary>
            Initial angular velocity
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.EntityToAttachTo">
            <summary>
            Entity to share the motion with.
            Setting this will use the motion for the given Entity as the one for the current body.
            Cannot be serialized, so it is a transitory field on this object builder.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.QualityType">
            <summary>
            Removed as it is specified on <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition"/>. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.DestructionLayer">
            <summary>
            Removed as it is specified on <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition"/>. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.MotionType">
            <summary>
            Removed as now the <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent" /> uses the <see cref="T:Keen.VRage.Physics.Components.IPhysicsMotionProvider"/> interface
            to get the motion for a rigid-body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RigidBodyComponentObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.LinearVelocityAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.AngularVelocityAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Accessors#DEntity}#Set(System.Object,Keen.VRage.DCS.Accessors.DEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Accessors#DEntity}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Accessors#DEntity}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Accessors#DEntity}#Set(System.Byte@,Keen.VRage.DCS.Accessors.DEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@,Keen.VRage.DCS.Accessors.DEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder.TypeInfoHolder.EntityToAttachToAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition">
            <summary>
            Required data to create a <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponent"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.QualityType">
            <summary>
            <see cref="T:Keen.VRage.Physics.Data.BodyArgs.Quality"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.DestructionLayer">
            <summary>
            Break handler layer this body will belong to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Material">
            <summary>
            <see cref="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition" /> changes the behavior of collisions.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.EntityLayer">
            <summary>
            Entity layer this body will belong to.
            </summary>
            <seealso cref="T:Keen.VRage.Core.Game.Definitions.EntityLayerConfiguration"/>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.ActivationControl">
            <summary>
            The strategy that the simulation will use to control the body activation state.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.MaxDepenetrationSpeed">
            <summary>
            Speed limit for the penetration recovery.
            Must be greater or equal to zero (zero means no penetration recovery).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#RigidBodyComponentDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#RigidBodyComponentDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RigidBodyComponentDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Set(System.Object,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Set(System.Byte@,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.QualityTypeAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.DestructionLayerAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaterialAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.EntityLayerAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Set(System.Object,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Set(System.Byte@,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.ActivationControlAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponent">
            <summary>
            Base class for physics rigid bodies.
            </summary>
            <remarks>The behaviour of the body should be controlled by derived components, the shape is taken form whichever component is in the same
            container and both implements <see cref="T:Keen.VRage.Physics.Components.IPhysicsColliderProvider"/> and is tagged <c>PhysicsColliderProvider</c>.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponent._collider">
            <summary>
            The collider attached to this body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.RegisterContactListener(System.Object)">
            <summary>
            <see cref="M:Keen.VRage.Physics.Components.RigidBodyComponent.RemoveContactListener(System.Object)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.RemoveContactListener(System.Object)">
            <summary>
            <see cref="M:Keen.VRage.Physics.Components.RigidBodyComponent.RegisterContactListener(System.Object)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.LinearSpeedAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.AngularSpeedAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug.TypeInfoHolder.MassAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponent.DrawPhysicsData(Keen.VRage.Core.Game.RuntimeSystems.DebugDraw.IDebugDrawProvider,Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Components.RigidBodyComponent.EntityPhysicsDebug,Keen.VRage.Physics.Data.RigidBodyData,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.DCS.Accessors.Optional{Keen.VRage.DCS.CoreData.InstanceBind{Keen.VRage.Physics.Components.RigidBodyComponent}})">
            <summary>
            Job for debug drawing relevant physics data for each entity
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition">
            <summary>
            Required data to create a <see cref="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent"/>.
            <remarks>Inherits from <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition"/> to make the component inheritance possible</remarks>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#SimpleRigidBodyComponentDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Components#SimpleRigidBodyComponentDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#SimpleRigidBodyComponentDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinition"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#SimpleRigidBodyComponentDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder">
            <summary>
            <see cref="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Collider">
            <summary>
            User provided collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.CreateCollider">
            <summary>
            Arguments for creating a new collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.MassProperties">
            <summary>
            Mass properties
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.MotionType">
            <summary>
            <see cref="T:Keen.VRage.Physics.Data.BodyArgs.Motion" />
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#SimpleRigidBodyComponentObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Set(System.Object,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Set(System.Byte@,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Set(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.ColliderAccessor.Get(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IColliderArgs}#Set(System.Object,Keen.VRage.Physics.Colliders.IColliderArgs@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IColliderArgs}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IColliderArgs}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IColliderArgs}#Set(System.Byte@,Keen.VRage.Physics.Colliders.IColliderArgs@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Set(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Physics.Colliders.IColliderArgs@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.CreateColliderAccessor.Get(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#RigidBodyMassProperties?}#Set(System.Object,System.Nullable{Keen.VRage.Physics.Data.RigidBodyMassProperties}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#RigidBodyMassProperties?}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#RigidBodyMassProperties?}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#RigidBodyMassProperties?}#Set(System.Byte@,System.Nullable{Keen.VRage.Physics.Data.RigidBodyMassProperties}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Set(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,System.Nullable{Keen.VRage.Physics.Data.RigidBodyMassProperties}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MassPropertiesAccessor.Get(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Motion}#Set(System.Object,Keen.VRage.Physics.Data.BodyArgs.Motion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Motion}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Motion}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Motion}#Set(System.Byte@,Keen.VRage.Physics.Data.BodyArgs.Motion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Set(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@,Keen.VRage.Physics.Data.BodyArgs.Motion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder.TypeInfoHolder.MotionTypeAccessor.Get(Keen.VRage.Physics.Components.SimpleRigidBodyComponentObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.SimpleRigidBodyComponent">
            <summary>
            Managed wrapper for RigidBodyData.
            Automatically allocates physics body on attached Entity and assumes
            ownership over <see cref="T:Keen.VRage.Physics.Data.RigidBodyData"/> and <see cref="T:Keen.VRage.Physics.Data.ContactImpulseData"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.SimpleRigidBodyComponent.Keen#VRage#Physics#Components#IPhysicsColliderProvider#Collider">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.SimpleRigidBodyComponent.SetCollider(Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Replace the collider set for this rigid body.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MaterialInAir">
            <summary>
            The physics material to use when the character is flying.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.JumpHeight">
            <summary>
            Apex distance for the character jump in meters.
            The jump applies a fixed impulse, it will reach this height if the current gravity is equal to JumpReferenceGravity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.JumpReferenceGravity">
            <summary>
            Reference gravity acceleration for the character's jump.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.AirtimeControl">
            <summary>
            How much control authority the character has while jumping and falling.
            Setting this to one means the character will be able to move
            while falling at the same speed is if they were supported by a surface.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.BaseGroundVelocity">
            <summary>
            The velocity the character will move at when the movement input is equal to one.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MaxVelocity">
            <summary>
            The maximum velocity the character controller will allow the character to have at any given time.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.GravityFactor">
            <summary>Factor that multiplies the gravity experienced by the character.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MaxSlopeAngle">
            <summary>
            Max angle, in degrees, of a slope the character should be able to climb.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.SupportDistance">
            <summary>
            Maximum distance between the character and a surface for it to be considered as supporting it.
            This also affects the maximum velocity a surface can move away from the character
            and still bring it with it (max speed = 60 * SupportDistance).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MinimumLandingDistance">
            <summary>Minimum distance from the ground before the character is considered to land from a jump.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.StickyFactor">
            <summary>
            How much the character attempts to match the velocity of the surface that supports him, by default this value is 1,
            meaning that it matches the full velocity of the supporting body.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Mass">
            <summary>
            The default mass for the character.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.CenterOfMass">
            <summary>
            Body center of mass relative to coordinate center in body-local space.
            Default is 0.9 in the positive vertical direction.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Simulated">
            <summary>
            Tells if the character is simulated on the session or if it is driven by <see cref="T:Keen.VRage.Core.WorldTransform"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MinTeleportDistance">
            <summary>
            Minimum distance (in meters) that the character can move in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MinTeleportAngleDegrees">
            <summary>
            Minimum angle (in degrees) that the character can rotate in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions). Angles above 20 degrees will be under-estimated.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MaxAcceleration">
            <summary>
            Maximum acceleration for the character,
            this limits the maximum instantaneous velocity change the character controller can impart.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MaxAppliedForce">
            <summary>
            Max force in newtons the character can apply to other rigid bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MinSurfaceDistanceExcess">
            <summary>
            Minimum distance between the character and the supporting surface to start
            sticking it to the ground (with or without gravity).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.MinVelocityAlignment">
            <summary>
            Minimum angle between the character velocity and the surface normal or gravity
            to start sticking the character to the surface.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#CharacterPhysicsComponentDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialInAirAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpHeightAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.JumpReferenceGravityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.AirtimeControlAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.BaseGroundVelocityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxVelocityAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.GravityFactorAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxSlopeAngleAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SupportDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinimumLandingDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.StickyFactorAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MassAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.CenterOfMassAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.SimulatedAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportDistanceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportAngleDegreesAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAccelerationAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MaxAppliedForceAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinSurfaceDistanceExcessAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Set(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder.TypeInfoHolder.MinVelocityAlignmentAccessor.Get(Keen.VRage.Physics.Components.CharacterPhysicsComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.RagdollAsset">
            <summary>
            Handle to the ragdoll asset.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.EntityLayer">
            <summary>
            The entity physical layer that the ragdoll will use.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.RagdollBoneTags">
            <summary>
            Bone tags mapping. Used to make it possible to change physical state of bones with given tag.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.PhysicsMaterial">
            <summary>
            Material assigned to all bodies in the ragdoll.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.MinTeleportVelocity">
            <summary>
            Velocity at which the ragdoll rather teleports to the target world position instead of moving.
            Sudden change of world position without using teleportation will create huge forces on the ragdoll,
            which can lead to overshooting and instability.
            I.e. velocity of 120m/s with 60 ticks per second means character will teleport if moved more than 2 meters in a tick.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.PoweredMotorsParameters">
            <summary>
            Parameters of the powered motors in the ragdoll.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.BlendingDuration">
            <summary>
            Duration during which the ragdoll state blends when transitioning between states.
            Used to smoothen animation discontinuities mainly when switching from dynamic state to keyframed. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RagdollComponentDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Set(System.Object,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#ResourceHandle{Keen#VRage#Physics#Ragdolls#RagdollAsset}}#Set(System.Byte@,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Utils.ResourceHandle{Keen.VRage.Physics.Ragdolls.RagdollAsset}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollAssetAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.RagdollBoneTagsAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PhysicsMaterialAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.MinTeleportVelocityAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Object,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Byte@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.PoweredMotorsParametersAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Set(System.Object,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#TimeSpan}#Set(System.Byte@,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Set(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder.TypeInfoHolder.BlendingDurationAccessor.Get(Keen.VRage.Physics.Components.RagdollComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.QualityType">
            <summary>
            <see cref="T:Keen.VRage.Physics.Data.BodyArgs.Quality"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.DestructionLayer">
            <summary>
            Break handler layer this body will belong to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Material">
            <summary>
            <see cref="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition" /> changes the behavior of collisions.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.EntityLayer">
            <summary>
            Entity layer this body will belong to.
            </summary>
            <seealso cref="T:Keen.VRage.Core.Game.Definitions.EntityLayerConfiguration"/>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.ActivationControl">
            <summary>
            The strategy that the simulation will use to control the body activation state.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.MaxDepenetrationSpeed">
            <summary>
            Speed limit for the penetration recovery.
            Must be greater or equal to zero (zero means no penetration recovery).
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Components#RigidBodyComponentDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Set(System.Object,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#BodyArgs#Quality}#Set(System.Byte@,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Data.BodyArgs.Quality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.QualityTypeAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.DestructionLayerAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaterialAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.EntityLayerAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Set(System.Object,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Data#ActivationControl}#Set(System.Byte@,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,Keen.VRage.Physics.Data.ActivationControl@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.ActivationControlAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Set(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder.TypeInfoHolder.MaxDepenetrationSpeedAccessor.Get(Keen.VRage.Physics.Components.RigidBodyComponentDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.BallAndSocketConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IBallAndSocketConstraint"/>. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.BallAndSocketConstraintArgs.PivotA">
            <summary>
            Where the constraint pivot is in relation to the first body.
            Orientation is not needed because rotations are allowed on any axis.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.BallAndSocketConstraintArgs.PivotB">
            <summary>
            Where the constraint pivot is in relation to the second body.
            Orientation is not needed because rotations are allowed on any axis.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.BreakableConstraintArgs">
            <summary>
            Arguments to create a constraint that reports when its max impulse is breached.
            Constraints created with this args will contain <see cref="T:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.BreakableConstraintArgs.MaxImpulse">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint.MaxImpulse"/>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.BreakableConstraintArgs.OnBreached">
            <summary>
            Register an initial impulse breach action to be called when the constraint receives an exceeding impulse.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.BreakableConstraintArgs.ContainedConstraint">
            <summary>
            Creation Arguments that are contained for a constraint that will also be breakable when created.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.FixedConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IFixedConstraint"/>. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.FixedConstraintArgs.PivotA">
            <summary>
            Where the constraint pivot is in relation to the first body.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.FixedConstraintArgs.PivotB">
            <summary>
            Where the constraint pivot is in relation to the second body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IHingeConstraint"/>. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.PivotA">
            <summary>
            Contains the point where the constraint fixes this body together with body B on translation (in local space),
            the rotation axis specified by the third row,
            and the perpendicular axis to the rotation on the first row.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.PivotB">
            <summary>
            Contains the point where the constraint fixes this body together with body A on translation (in local space),
            the rotation axis specified by the third row,
            and the perpendicular axis to the rotation on the first row.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.Friction">
            <summary>
            The maximum force torque can cause upon the constraint, in Newton meters.
            If zero, friction will not be present on the constraint.
            If the value is set for example to 10Nm, friction will be able to reduce torque applied to the constrained bodies by 10Nm on the rotational axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.Limits">
            <summary>
            Min and max limits restricting rotational movement relative to the pivot for each body, defined on the range [-pi, pi].
            If these were not set, they will be (<see cref="F:System.Single.MinValue"/>, <see cref="F:System.Single.MaxValue"/>).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.Motor">
            <summary>
            The motor that will act on the constraint, or null if no motor will be attached to it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.HingeConstraintArgs.#ctor(Keen.VRage.Library.Mathematics.Matrix@,Keen.VRage.Library.Mathematics.Matrix@)">
            <summary>
            Creates arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IHingeConstraint"/> with default values
            (creates args for a constraint with no limits, motor or friction).
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs">
            <summary>
            Arguments needed to create any type of <see cref="T:Keen.VRage.Physics.Constraints.IPhysicsConstraint"/> via <see cref="M:Keen.VRage.Physics.IPhysics.AllocateConstraint(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs)"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.IConstraintMotorArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.IConstraintMotor"/> via <see cref="M:Keen.VRage.Physics.IPhysics.AllocateMotor``1(``0@)"/>. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.MalleableConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IMalleableConstraint"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.MalleableConstraintArgs.Strength">
            <summary>
            The strength of the contained constraint.
            The value should be in the range 0 (disabled) to 1 (full strength). 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.MalleableConstraintArgs.ContainedConstraint">
            <summary>
            Creation Arguments that are contained for a constraint that will be breakable when created.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint"/>. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.PivotA">
            <summary>
            Contains the point where the constraint fixes this body together with body B on translation (in local space),
            the rotation axis specified by the third row,
            and the perpendicular axis to the rotation on the first row.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.PivotB">
            <summary>
            Contains the point where the constraint fixes this body together with body A on translation (in local space),
            the rotation axis specified by the third row,
            and the perpendicular axis to the rotation on the first row.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.Friction">
            <summary>
            The maximum force friction can cause upon the constraint, in Newtons.
            If zero, friction will not be present on the constraint.
            If the value is set for example to 10N, friction will be able to reduce forces applied to the constrained bodies by 10N on the limited axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.Limits">
            <summary>
            Min and max limits restricting linear movement relative to the pivot for each body.
            If these were not set, they will be (<see cref="F:System.Single.MinValue"/>, <see cref="F:System.Single.MaxValue"/>).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.Motor">
            <summary>
            The motor that will act on the constraint, or null if no motor will be attached to it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.PrismaticConstraintArgs.#ctor(Keen.VRage.Library.Mathematics.Matrix@,Keen.VRage.Library.Mathematics.Matrix@)">
            <summary>
            Creates arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint"/> with default values
            (creates args for a constraint with no limits, motor or friction).
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint"/>. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.PivotA">
            <summary>
            Contains the point where the constraint fixes this body together with body B on the fourth row (in local space),
            the twist axis specified in local bodyA space on the first row,
            and the swing axis specified in local bodyA space on the second row.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.PivotB">
            <summary>
            Contains the point where the constraint fixes this body together with body A on the fourth row (in local space),
            the twist axis specified  in local bodyB space on the first row,
            and the swing axis specified in local bodyB space on the second row.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.#ctor">
            <summary>
            Creates arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint"/> with default values
            (creates args for a constraint with no restrictions, limits, motors or frictions).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.GetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.SetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.ConstraintAxisMode)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.ConstraintAxisMode)"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.GetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets the axis min and max limits.
            If these were not set, they will be (<see cref="F:System.Single.MinValue"/>, <see cref="F:System.Single.MaxValue"/>).
            </summary>
            <param name="axis">The axis to get its limits</param>
            <returns>Limits defined by (min, max) that indicates how a constraint restricts linear or angular movement</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.SetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single,System.Single)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single,System.Single)" />
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.GetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.SetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single)"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.GetAxisMotor(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets the motor that will act on the given axis, or null if no motor will be attached to it.
            </summary>
            <param name="axis">The axis to get its motor</param>
            <returns>The found motor that will be applied to the axis, or null if no motor was specified</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.SetAxisMotor(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.IConstraintMotor)">
            <inheritdoc cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisMotor(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.IConstraintMotor)"/>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.SpringConstant">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.SpringConstant"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.SpringDamping">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.SpringDamping"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.VelocityTarget">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.VelocityTarget"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.MinForce">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.MinForce"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.MaxForce">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.MaxForce"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.SpringDamperConstraintMotorArgs.#ctor">
            <summary>
            Creates arguments for creating <see cref="T:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs">
            <summary>
            Arguments to create a <see cref="T:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.Tau">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.Tau"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.Damping">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.Damping"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.VelocityTarget">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.VelocityTarget"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.MinForce">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.MinForce"/>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.MaxForce">
            <inheritdoc cref="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.MaxForce"/>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Arguments.VelocityConstraintMotorArgs.#ctor">
            <summary>
            Creates arguments for creating <see cref="T:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier">
            <summary>
            Enumerates axes of freedom that a <see cref="T:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint"/> identifies for linear or angular movement. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.LinearX">
            <summary>
            Translation along the twist axis (X).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.LinearY">
            <summary>
            Translation along the first swing axis (Y).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.LinearZ">
            <summary>
            Translation along the second swing axis (Z).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.AngularX">
            <summary>
            Rotation around the twist axis (X).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.AngularY">
            <summary>
            Rotation around the first swing axis (Y).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.AngularZ">
            <summary>
            Rotation around the second swing axis (Z).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier.MaxAxes">
            <summary>
            The amount of axes possible for a constraint. Not valid as an axis identifier.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.ConstraintAxisMode">
            <summary>
            Describes the mode of movement axes can have.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisMode.Unlimited">
            <summary>
            Movement is free on the axis, the constraint will not apply impulses.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisMode.Limited">
            <summary>
            Movement is permitted between the min/max values, set by <see cref="M:Keen.VRage.Physics.Constraints.Arguments.SixDegreesOfFreedomConstraintArgs.SetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single,System.Single)"/> and <see cref="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single,System.Single)"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.ConstraintAxisMode.Fixed">
            <summary>
            No movement is permitted on the axis.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.ConstraintHelper">
            <summary>
            Simple helper functions for common constraint configurations.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreatePivots(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.Matrix@,Keen.VRage.Library.Mathematics.Matrix@)">
            <summary>
            Creates local-space pivots from a world-space pivot for two bodies.
            </summary>
            <param name="bodyA">The first body to create its pivot</param>
            <param name="bodyB">The second body to create its pivot</param>
            <param name="worldPivot">The pivot point in world space that will be translated into relative local space pivots on each body local space</param>
            <param name="pivotA">The local space (of bodyA) pivot transformed from the given world pivot</param>
            <param name="pivotB">The local space (of bodyB) pivot transformed from the given world pivot</param>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreateFixed(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.Vector3D)">
            <summary>
            Creates arguments to create rigid connections that will not allow any movement (linear or rotational) on any axis.
            </summary>
            <param name="bodyA">The first body to calculate the pivot to attach together</param>
            <param name="bodyB">The second body to calculate the pivot to attach together</param>
            <param name="worldPivot">The pivot point in world space to join both bodies together</param>
            <returns>Arguments to create a fixed constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreateBallJoint(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.Vector3D)">
            <summary>
            Creates arguments to create connections that only allow rotation but no linear movement.
            </summary>
            <param name="bodyA">The first body to calculate the pivot to attach together</param>
            <param name="bodyB">The second body to calculate the pivot to attach together</param>
            <param name="worldPivot">The pivot point in world space to join both bodies together</param>
            <returns>Arguments to create a ball-joint constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreateHinge(Keen.VRage.Library.Mathematics.Matrix,Keen.VRage.Library.Mathematics.Matrix,System.Nullable{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Creates arguments to create connections that only allow rotation on one axis.
            </summary>
            <param name="pivotA">Indicates where the pivot point is relative to the local space for the first body</param>
            <param name="pivotB">Indicates where the pivot point is relative to the local space for the second body</param>
            <param name="limits">Min and max limits that can be present to limit the hinge rotation axis, must be defined in [-pi, pi] if present</param>
            <returns>Arguments to create a hinge constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreateHinge(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.Vector3,System.Nullable{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Creates arguments to create connections that only allow rotation on one axis.
            </summary>
            <param name="bodyA">The first body to calculate the pivot to attach together</param>
            <param name="bodyB">The second body to calculate the pivot to attach together</param>
            <param name="worldPivot">The pivot point in world space to join both bodies together</param>
            <param name="axis">The axis in which the hinge will rotate around</param>
            <param name="limits">Angular min and max limits that can be present to limit the hinge rotation axis, must be defined in [-pi, pi] if present</param>
            <returns>Arguments to create a hinge constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.CreatePiston(Keen.VRage.Library.Mathematics.Matrix,Keen.VRage.Library.Mathematics.Matrix,System.Nullable{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Creates arguments to create connections that only allow translation on the local Z translation axis.
            </summary>
            <param name="pivotA">Indicates where the pivot point is relative to the local space for the first body</param>
            <param name="pivotB">Indicates where the pivot point is relative to the local space for the second body</param>
            <param name="limits">Min and max limits that can be present to limit the piston extension on the axis, must be defined in [-z, z] if present and is local to the pivot</param>
            <returns>Arguments to create a piston constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.MakeBreakable(Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs,System.Single,System.Action{Keen.VRage.Physics.Constraints.IPhysicsConstraint,Keen.VRage.Library.Mathematics.Vector3})">
            <summary>
            Makes existing constraint arguments breakable, meaning that the created constraints using these arguments will report exceeding impulses.
            The underlying constraint arguments are still usable and modifiable.
            </summary>
            <param name="constraint">The constraint arguments to make breakable</param>
            <param name="maxImpulse">The max (angular or linear) impulse allowed to be received by the created constraints before invoking the callback</param>
            <param name="maxImpulseBreachedCallback">An impulse breach action to be called when the constraint receives an exceeding impulse</param>
            <returns>Arguments to create constraints that are also breakable</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.ConstraintHelper.MakeMalleable(Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs,System.Single)">
            <summary>
            Makes existing constraint arguments malleable, meaning that the created constraints using these arguments will limit forces applied by some factor.
            The underlying constraint arguments are still usable and modifiable.
            </summary>
            <param name="constraint">The constraint arguments to make malleable</param>
            <param name="strength">The strength (0 to 1) that the underlying constraints will use as factor to apply forces</param>
            <returns>Arguments to create constraints that are also malleable</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IBallAndSocketConstraint">
            <summary>
            Constraint that allows all kind of rotations between two bodies, but disables translations.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint">
            <summary>
            A breakable constraint receives a max impulse and reports when it is exceeded.
            <remarks>The user decides if to destroy the constraint or not in the callback, it never self-destroys.</remarks> 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint.MaxImpulse">
            <summary>
            Gets or sets the max (angular or linear) impulse allowed to be received by
            this constraint before invoking <see cref="E:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint.OnBreached"/>.
            </summary>
        </member>
        <member name="E:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint.OnBreached">
            <summary>
            Invoked when an impulse (angular or linear) that exceeds <see cref="P:Keen.VRage.Physics.Constraints.Data.IBreakableConstraint.MaxImpulse"/> is applied on this constraint. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IConstraintData">
            <summary>
            Represents some aspect of a <see cref="T:Keen.VRage.Physics.Constraints.IPhysicsConstraint"/> that can be obtained from constraints
            via <see cref="M:Keen.VRage.Physics.Constraints.IPhysicsConstraint.Get``1"/> and <see cref="M:Keen.VRage.Physics.Constraints.IPhysicsConstraint.TryGet``1(``0@)"/>, and can be manipulated.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IFixedConstraint">
            <summary>
            Constraint that fixes two bodies together disabling translation or rotation between them.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IHingeConstraint">
            <summary>
            Constraint that allows rotational movement around a single axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IHingeConstraint.MotorEnabled">
            <summary>
            Gets or sets the enabled state of the motor.
            Note that disabling a motor will not prevent movement,
            but just stop applying the additional forces the motor provided.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IHingeConstraint.HasMotor">
            <summary>
            Tells if this constraint had a motor attached when it was created.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IHingeConstraint.MinAngularLimit">
            <summary>
            Gets or sets the minimum angle this constraint can rotate bodies around.
            Angles are defined in radians on the range [-pi, pi].
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IHingeConstraint.MaxAngularLimit">
            <summary>
            Gets or sets the maximum angle this constraint can rotate bodies around.
            Angles are defined in radians on the range [-pi, pi].
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IHingeConstraint.MaxFrictionTorque">
            <summary>
            Gets or sets the maximum torque friction can cause upon the hinge, in Newton metres.
            If zero, friction will not be present on the hinge.
            If the value is set for example to 10Nm, friction will be able to reduce torque applied to the constrained bodies by 10Nm on the limited axis.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IMalleableConstraint">
            <summary>
            A malleable constraint softens constraints forces. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IMalleableConstraint.Strength">
            <summary>
            The strength of the contained constraint.
            The value should be in the range 0 (disabled) to 1 (full strength). 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint">
            <summary>
            Constraint that allows linear movement around a single axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint.MotorEnabled">
            <summary>
            Gets or sets the enabled state of the motor.
            Note that disabling a motor will not prevent movement,
            but just stop applying the additional forces the motor provided.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint.HasMotor">
            <summary>
            Tells if this constraint had a motor attached when it was created.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint.MinLinearLimit">
            <summary>
            Gets or sets the minimum linear limit this constraint can move bodies around.
            It represents the minimum signed distance bodies can have relative to the constraint pivot on the moving axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint.MaxLinearLimit">
            <summary>
            Gets or sets the maximum linear limit this constraint can move bodies around.
            It represents the maximum signed distance bodies can have relative to the constraint pivot on the moving axis.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Data.IPrismaticConstraint.MaxFriction">
            <summary>
            Gets or sets the maximum force friction can cause upon the constraint, in Newtons.
            If zero, friction will not be present on the constraint.
            If the value is set for example to 10N, friction will be able to reduce forces applied to the constrained bodies by 10N on the limited axis.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint">
            <summary>
            Constraint that describes a generic interface to set limits on axes (<see cref="T:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier"/>) independently.
            It can create hinges, ball-joints, prismatic and any combination of those.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets the mode a specific axis (linear or angular) can move on the current constraint.
            </summary>
            <param name="axis">The axis to get its mode</param>
            <returns>The mode the current constraint axis is in</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisMode(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.ConstraintAxisMode)">
            <summary>
            Sets the axis mode to restrict or release movement on that axis.
            Axis limits will start to apply if the mode is set to <see cref="F:Keen.VRage.Physics.Constraints.ConstraintAxisMode.Limited"/>.
            </summary>
            <param name="axis">The axis to change its movement type</param>
            <param name="mode">The new mode to apply</param>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisMinLimit(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets the axis min limit.
            If this was not set, it will be <see cref="F:System.Single.MinValue"/>.
            </summary>
            <param name="axis">The axis to get its min limit</param>
            <returns>The min limit of the axis</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisMaxLimit(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets the axis max limit.
            If this was not set, it will be <see cref="F:System.Single.MaxValue"/>.
            </summary>
            <param name="axis">The axis to get its max limit</param>
            <returns>The max limit of the axis</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisLimits(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single,System.Single)">
            <summary>
            Sets the Min and Max limits for each <see cref="T:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier"/>.
            Only works if the corresponding axis mode is <see cref="F:Keen.VRage.Physics.Constraints.ConstraintAxisMode.Limited"/>.
            On linear axes it represents the min and max distances between the bodies.
            On angular axes it represents the min and max angle in radians that the constrained bodies can rotate around the axis.
            Can be set to [<see cref="F:System.Single.MinValue"/>, <see cref="F:System.Single.MaxValue"/>] to remove the limit, although the real limits
            on angular axes are [-pi, pi].
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.GetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier)">
            <summary>
            Gets friction values for each <see cref="T:Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier"/>.
            On linear axes it represents the maximum allowed force or torque to be applied due to friction.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisFriction(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,System.Single)">
            <summary>
            Sets friction values for an axis.
            It represents the maximum allowed force/torque (linear/angular) that friction can apply on that axis.
            If zero, friction will not be present on that axis.
            If the value is set for example to 10N, friction will be able to reduce forces applied to the constrained bodies by 10N. 
            Ignored if the axis has a <see cref="T:Keen.VRage.Physics.Constraints.IConstraintMotor"/>.
            </summary>
            <param name="axis">The axis to apply the friction to</param>
            <param name="friction">The max friction force/torque (in Newtons for linear, Newton metres for angular) that can be applied on that axis when solving movement</param>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Data.ISixDegreesOfFreedomConstraint.SetAxisMotor(Keen.VRage.Physics.Constraints.ConstraintAxisIdentifier,Keen.VRage.Physics.Constraints.IConstraintMotor)">
            <summary>
            Sets <see cref="T:Keen.VRage.Physics.Constraints.IConstraintMotor"/> to a constraint axis that will modify the movement along it.
            Only a single motor can exist on an axis at the same time.
            Can be set to null to remove the motor from that axis.
            </summary>
            <param name="axis">The axis to attach the motor to</param>
            <param name="motor">The motor to attach, or null to clear the motor on that axis</param>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.IConstraintMotor">
            <summary>
            Acts on a constraint axis to modify its movement.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.IPhysicsConstraint">
            <summary>
            Restricts the movement between two bodies.
            During simulation, constraints will add forces to maintain the pivot position and orientation across the two constrained bodies.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.IPhysicsConstraint.Has``1">
            <summary>
            Tells if the constraint has a <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/> of some kind that modifies its behavior.
            </summary>
            <typeparam name="T">The type of the constraint data to find, must be a subtype of <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/></typeparam>
            <returns>True if the constraint contains that data, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.IPhysicsConstraint.TryGet``1(``0@)">
            <summary>
            Tries to get the constraint data associated with the given type.
            </summary>
            <typeparam name="T">The type of the constraint data to obtain, must be a subtype of <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/></typeparam>
            <param name="constraintData">The obtained data if it was present on the constraint, null otherwise</param>
            <returns>True if the constraint data was found for the given type, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.IPhysicsConstraint.Get``1">
            <summary>
            Gets the constraint data associated with the given type.
            </summary>
            <typeparam name="T">The type of the constraint data to obtain, must be a subtype of <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/></typeparam>
            <returns>The obtained constraint data</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor">
            <summary>
            A motor that will try to reach and keep a desired target velocity applying spring forces.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.SpringConstant">
            <summary>
            The spring constant in N/m.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.SpringDamping">
            <summary>
            The spring damping in Nsec/m.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.VelocityTarget">
            <summary>
            Velocity target.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.MinForce">
            <summary>
            The maximum force on the opposite direction from pivots that this motor can apply to reach its velocity target.
            It represents the max force (or torque for rotational axes) that the motor can apply because of friction or to reach the velocity target on
            on the opposite sign relative to each of the pivots of connected bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.ISpringDamperConstraintMotor.MaxForce">
            <summary>
            The maximum force on the original direction from pivots that this motor can apply to reach its velocity target.
            It represents the max force (or torque for rotational axes) that the motor can apply because of friction or to reach the velocity target on
            on the original sign relative to each of the pivots of connected bodies.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor">
            <summary>
            A motor that will try to reach and keep a desired target velocity.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.Tau">
            <summary>
            The stiffness between 0 and 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.Damping">
            <summary>
            The damping stiffness between 0 and 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.VelocityTarget">
            <summary>
            Velocity target.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.MinForce">
            <summary>
            The maximum force on the opposite direction from pivots that this motor can apply to reach its velocity target.
            It represents the max force (or torque for rotational axes) that the motor can apply because of friction or to reach the velocity target on
            on the opposite sign relative to each of the pivots of connected bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.IVelocityConstraintMotor.MaxForce">
            <summary>
            The maximum force on the original direction from pivots that this motor can apply to reach its velocity target.
            It represents the max force (or torque for rotational axes) that the motor can apply because of friction or to reach the velocity target on
            on the original sign relative to each of the pivots of connected bodies.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings">
            <summary>
            Settings for using the direct solver on constraint groups.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.RegularizationMultiplier">
            <summary>
            The amount of regularization applied to the matrix.
            This adds a value (diag * this / sub_step_dt^2) to the diagonal elements, resulting in
            a more stable matrix. The default tiny value of 1e-9 can help the direct solver converge
            in scenarios where the arrangement of constraints conflict with with each other.
            Larger values like 1e-5 result in a more visible softness.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.CallFrequency">
            <summary>
            Whether the solver is optimized for performance or stiffness.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.MatrixType">
            <summary>
            Whether solver matrices should be optimized for memory or for time performance.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.MaxLinearAccelerationPerSubStep">
            <summary>
            A limit on how much the direct solver is allowed to increase a body's linear velocity.
            Units are in meters per sub-step.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.MaxAngularAccelerationPerSubStep">
            <summary>
            A limit on how much the direct solver is allowed to increase a body's angular velocity.
            Units are in radians per sub-step.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.#ctor">
            <summary>
            Creates settings for configuring constraint groups using the direct solver.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverCallFrequency">
            <summary>
            Determines when to call the Direct Solver.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverCallFrequency.EverySubStep">
            The direct solver is called is every sub step (default setting).
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverCallFrequency.HalfSubsteps">
            The direct solver will be called only in approximately every second sub step, including the first and
            last sub steps. This can significantly increase performance, however the stiffness might be reduced.
            We recommend this only for advanced use cases.
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverMatrixType">
            <summary>
            Determines how the solver matrix is stored, allowing you to prioritize memory use or performance.
            Does not affect the solver results.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverMatrixType.Automatic">
            Use a built-in heuristic to select Dense or Sparse based on the group topology (default setting).
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverMatrixType.Dense">
            Store every element. Uses more memory than Sparse but has less performance overhead.
            Suitable for small or highly connected groups (e.g. a rag-doll).
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupDirectSolverSettings.DirectSolverMatrixType.Sparse">
            Skip empty elements. Uses less memory than Dense but has more performance overhead.
            Suitable for large or linearly connected groups (e.g. a long chain).
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupIterativeSolverSettings">
            <summary>
            Settings for using multiple solver iterations on constraint groups.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupIterativeSolverSettings.MicroSteps">
            <summary>
            Multiplier applied to the number of micro-steps of the iterative solver.
            This causes all constraints in the group to be solved repeatedly in a loop,
            which can help them converge to a holistically stable state.
            Must be greater than one to iterate.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Settings.ConstraintGroupIterativeSolverSettings.#ctor">
            <summary>
            Creates settings for using multiple solver iterations on constraint groups.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.ConstraintsSettings">
            <summary>
            Wraps configuration parameters for constraints.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Constraints.Settings.ConstraintsSettings.GroupSettings">
            <summary>
            Tells how constraints are grouped together for solving.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Constraints.Settings.ConstraintsSettings.#ctor">
            <summary>
            Creates settings for constraint configurations.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.IConstraintGroupSettings">
            <summary>
            Configuration for constraint group behavior.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Constraints.Settings.NoConstraintGroupsSettings">
            <summary>
            Indicates that constraints will not be placed into groups, therefore will be solved individually.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.ActivationData">
            <summary>
            Controls activation policies for rigid-bodies.
            </summary>
            <param name="activationControl">The way the simulation will choose how to activate this body</param>
        </member>
        <member name="M:Keen.VRage.Physics.Data.ActivationData.#ctor(Keen.VRage.Physics.Data.ActivationControl)">
            <summary>
            Controls activation policies for rigid-bodies.
            </summary>
            <param name="activationControl">The way the simulation will choose how to activate this body</param>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ActivationData.ActivationControl">
            <summary>
            Decides how the rigid-body is eligible for deactivation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.ActivationControl">
            <summary>
            Decides which strategy the simulation uses to handle the activation of rigid-bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ActivationControl.Automatic">
            <summary>
            The rigid-body will have its activation state changed at will by the simulation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ActivationControl.AlwaysActive">
            <summary>
            The simulation will not try to deactivate the rigid-body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.ActiveTag">
            <summary>
            Annotates dynamic or kinematic bodies that are active on the physics simulation.
            Absence indicates that the body is either static or inactive.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.AttachmentData">
            <summary>
            Record entities that shares motions.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.AttachmentDataFunctions">
            <summary>
            Helper for <see cref="T:Keen.VRage.Physics.Data.AttachmentData"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.GetAllAttachedEntities(Keen.VRage.DCS.Accessors.ReadOnlyEntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Library.Memory.SetReference{Keen.VRage.DCS.Accessors.DEntity})">
            <summary>
            Recursively collect all <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> that are connected <paramref name="from"/> the given entity;
            Collect both <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/> and <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Attached"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.RemoveAttached(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove the <paramref name="attached"/> from the <paramref name="target"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Attached"/>;
            Then remove the <see cref="T:Keen.VRage.Physics.Data.AttachmentData"/> from the <paramref name="target"/> if no longer attaching or attached.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.RemoveTarget(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove the <paramref name="target"/> from the <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/>;
            Then remove the <see cref="T:Keen.VRage.Physics.Data.AttachmentData"/> from the <paramref name="attached"/> if no longer attaching or attached.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.Detach(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove the <paramref name="attached"/> from the <paramref name="target"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Attached"/>
            and remove the <paramref name="target"/> from the <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/>;
            Then remove the <see cref="T:Keen.VRage.Physics.Data.AttachmentData"/> from the <paramref name="attached"/> and <paramref name="target"/>
            if no longer attaching or attached.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.Attach(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Add the <paramref name="attached"/> to the <paramref name="target"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Attached"/>
            and add the <paramref name="target"/> to the <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/>;.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.ClearTargets(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove all targets from the <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/>;
            Then remove the <see cref="T:Keen.VRage.Physics.Data.AttachmentData"/> from the <paramref name="attached"/> if no longer attaching or attached.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.GetTargets(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Gets <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Targets"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.AttachmentDataFunctions.GetAttached(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Gets <paramref name="attached"/>'s <see cref="F:Keen.VRage.Physics.Data.AttachmentData.Attached"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BodyArgs">
            <summary>
            See <see cref="M:Keen.VRage.Physics.IPhysics.AllocateBody(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs@)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.EntityToAttachTo">
            <summary>
            Entity to share the motion with.
            Setting this will use the motion for the given Entity as the one for the current body.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.DestructionLayer">
            <summary>
            Break handler layer this body will belong to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.EntityLayer">
            <summary>
            Index of the EntityLayer to be used for collision filtering, destructions and mass changing.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.MaterialId">
            <summary>
            An Id that belongs to a physics material previously added to a library.
            A physics material decides how the body will collide with other bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.ActivationControl">
            <summary>
            The strategy that the simulation will use to control the body activation state.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BodyArgs.MaxDepenetrationSpeed">
            <summary>
            Speed limit for the penetration recovery.
            Must be greater or equal to zero (zero means no penetration recovery).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.BodyArgs.#ctor">
            <summary>
            Creates default BodyArgs.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BodyArgs.Motion">
            <summary>
            Defines how the body will behave in the simulation.
            <remarks>
            <b>Static</b> means that the body will not move but others will collide with it.
            <br/>
            <b>Kinematic</b> means that the body will move driven by velocities, meaning that it will not receive impulses or forces and
            will have no mass.
            <br/>
            <b>Dynamic</b> means that the body will be fully simulated using mass properties and impulses.
            </remarks>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BodyArgs.Quality">
            <summary>Collision quality for this body.</summary>
            <remarks>Higher values produce fewer simulation artefacts, but are more expensive to simulate.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BodyMotion">
            <summary>
            Indicates identity of motion for an Entity.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.BodyMotion.MotionId">
            <summary>
            Entities with the same MotionId are sharing motion.
            Static Entities always have a MotionId of zero.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData">
            <summary>
            Stores impulses that exceeded the threshold for breakable bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.ExceededImpulses">
            <summary>
            List of breaking collisions
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup">
            <summary>
            Record of a collision group that exceeded the impulse limit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.HitEntity">
            <summary>
            References the other Entity that participated on this collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.TotalUnclippedImpulse">
            <summary>
            The total amount of impulse caused by this collision that the solver <b>tried</b> to apply to the bodies involved.
            This is the sum of all the impulses of all contacts that were solved for the group pairs of sub-colliders <b>on this step</b>.
            <para>
            For example, no matter what the group "max impulse" was set to, if the group tried to apply 1000 Ns,
            this value will be 1000 Ns.
            </para>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.TotalAppliedImpulse">
            <summary>
            The total amount of impulse caused by this collision that the solver <b>actually applied</b> to the bodies involved.
            This is what was set as "max impulse" for the group.
            <para>
            For example, if the group max impulse was set to 100 Ns and the group tried to apply 1000 Ns,
            900 Ns will be discarded and this value will be 100 Ns.
            </para>
            </summary> 
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.ScaledPenetration">
            <summary>
            The maximum amount of penetration predicted between the two groups.
            It is scaled between the max impulses of the groups, so the side of the group that set a lower max impulse will see
            more penetration.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.TotalExceedingImpulse">
            <summary>
            The total amount of impulse caused by this collision that the solver <b>discarded</b>.
            <para>
            For example, if the group max impulse was set to 100 Ns and the solver tried to apply 1000 Ns,
            900 Ns will be discarded and this value would be exactly 900 Ns.
            </para>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.UserData">
            <summary>
            User data that can be assigned on a collision callback and corresponds to this Entity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.Position">
            <summary>
            The position on this body of the most important manifold of the group (the one that had the most impulse).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.OtherPosition">
            <summary>
            The position on the other body of the most important manifold of the group (the one that had the most impulse).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.Normal">
            <summary>
            The normal of the most important manifold of the group (had the most impulse).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.MaxSeparationSpeedAlongNormal">
            <summary>
            The maximum separation speed that this group observed from its manifolds along the normal vector.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.VelocityAtPoint">
            <summary>
            The velocity this rigid-body has at the point of contact.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.OtherVelocityAtPoint">
            <summary>
            The velocity the other rigid-body has at the point of contact.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.PenetrationProportion">
            <summary>
            The proportion calculated from the impulses. This is closer to 1 if this rigid-body could take
            less impulse than the other, and close to 0 if this rigid-body could take more impulse.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.BoxFromA">
            <summary>
            The bounding box of the leaf colliders involved in the collision, on body A. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.BreakableBodyImpulseData.CollisionGroup.OtherUserData">
            <summary>
            User data that can be assigned on a collision callback and corresponds to the other Entity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterControllerArgs">
            <summary>
            Arguments for creating a character body, see <see cref="M:Keen.VRage.Physics.IPhysics.AllocateCharacterController(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.CharacterControllerArgs@)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterControllerArgs.MaxSpeed">
            <summary>
            The maximum speed the character can have no matter the state it is in.
            This will filter the character velocity after the state machine calculates it.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterControllerArgs.MaxLinearAcceleration">
            <summary>
            The maximum acceleration the character can have no matter the state it is in.
            This will filter the character acceleration after the state machine calculates it.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterPhysicsData">
             <summary>
             User input for the character controller.
             </summary>
             <remarks>
             The two motion Indicator inputs (<see cref="F:Keen.VRage.Physics.Data.CharacterPhysicsData.InputFB"/> and <see cref="F:Keen.VRage.Physics.Data.CharacterPhysicsData.InputLR"/>) are treated as independent inputs in a cartesian plane where
             (1,1) means full speed diagonally. when neither value is equal to one it is assumed that both indicators have been scaled by the same constant
             the user seeks to apply to the overall velocity.
            
             <para>
             For example, assuming a character base speed of 1, the indicators would lead to the following
             velocities: (0,1) => 1; (1,1) => 1; (.5, .5) => .5; (1.5, 2) => 2.
             </para>
            
             <para>
             If we imagine a character standing on the XY plane facing +Y then the velocity vectors would be as follows:
             (0,1) => (0, 1); (1,1) => (0.70710677, 0.70710677); (.5, .5) => (0.35355338, 0.35355338); (1.5, 2) => (1.2, 1.6)
             </para>
             </remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.InputFB">
            <summary>Movement indicator in the forwards(+)/backwards(-) direction.</summary>
            <remarks>Value scales the velocity defined in the state machine.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.InputLR">
            <summary>Movement indicator in the left(-)/right(+) direction.</summary>
            <remarks>Value scales the velocity defined in the state machine.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.DesiredActivity">
            <summary>
            Activity the user wants the controller to do.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.SupportDistance">
            <summary>
            Custom support distance. If not provided the default is used.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterPhysicsData.Activity">
            <summary>
            An activity is a variation on the standard character movement, states like jumping, climbing up a ladder or floating in space. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.Activity.Walking">
            <summary>Walk around normally.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.Activity.Jumping">
            <summary>Jump up to the height specified by the character controller.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.Activity.Climbing">
            <summary>Climbing a ladder.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsData.Activity.Floating">
            <summary>Floating freely.</summary>
            <remarks><para>In this state the character is not supported by rigid bodies underneath it, and instead is free to
            be driven by ordinary physical forces (though it must be rotated manually since it has infinite inertia).</para>
            <para>Floating characters are still affected by gravity if set. </para></remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterPhysicsState">
            <summary>
            Current state of the character physical simulation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsState.GroundVelocity">
            <summary>
            Velocity of the character relative to the surface it currently stands/is supported by.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsState.State">
            <summary>
            Current state of the character.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterPhysicsState.Supported">
            <summary>
            Whether there is a surface underneath the character that can support it.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterState">
            <summary>
            General state of the character controller.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.OnGround">
            <summary>Character is still or moving on the ground.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.Jumping">
            <summary>Character is initiating a jump.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.Sliding">
            <summary>Character is supported but the slope is too steep and it is sliding down it.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.Falling">
            <summary>Character is falling through the air unsupported.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.Climbing">
            <summary>Character is climbing up a ladder or similar surface.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterState.Floating">
            <summary>The character is floating freely.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterStateHelper">
            <summary>
            Helper class for providing <see cref="T:Keen.VRage.Physics.Data.CharacterState"/> values converted to <see cref="T:Keen.VRage.Library.Utils.StringId"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.OnGround">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.OnGround"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.Jumping">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.Jumping"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.Sliding">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.Sliding"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.Falling">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.Falling"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.Climbing">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.Climbing"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.CharacterStateHelper.Floating">
            <summary>
            Corresponds to <see cref="T:Keen.VRage.Physics.Data.CharacterState"/>.<see cref="F:Keen.VRage.Physics.Data.CharacterState.Floating"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterStateMachineArgs">
            <summary>
            Arguments for creating a character state machine.
            </summary>
            <seealso cref="M:Keen.VRage.Physics.IVRagePhysics.AllocateCharacterStateMachine(Keen.VRage.Physics.Data.CharacterStateMachineArgs@)"/>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MaxGravityAcceleration">
            <summary>Absolute cap on gravity acceleration magnitude.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.JumpImpulse">
            <summary>Impulse to apply when jumping.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MaxSlopeAngle">
            <summary>Max angle, in radians, of a slope the character should be able to climb (in radians).</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.AirtimeControl">
            <summary>How much control authority the character has while jumping and falling.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.BaseMovementVelocity">
            <summary>The velocity the character will move at when the movement input is equal to one.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MaxAcceleration">
            <summary>Maximum acceleration for the character state machine, this limits the maximum
            instantaneous velocity change the character controller can impart for states.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MaxAppliedForce">
            <summary>Max force in newtons the character can apply to other rigid bodies.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.SupportDistance">
            <summary>Maximum distance from a surface for it to be still considered as supporting the character.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.StickyFactor">
            <summary>Factor that multiplies the world velocity of surfaces supporting the character and causes it to stick to them</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MinTeleportDistance">
            <summary>Minimum distance (in meters) that the character can move in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions).</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MinTeleportAngleDegrees">
            <summary>Minimum angle (in degrees) that the character can rotate in one frame before it is considered an instant teleport (during teleports, physics may ignore some collisions).</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MinLandingDistance">
            <summary>Minimum distance from the ground before the character switches from the <see cref="F:Keen.VRage.Physics.Data.CharacterState.Falling"/> state to <see cref="F:Keen.VRage.Physics.Data.CharacterState.OnGround"/>.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.GravityFactor">
            <summary>
            Factor applied to the gravity characters experience.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MinSurfaceDistanceExcess">
            <summary>
            Minimum surface distance to the character to start sticking it to the surface.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterStateMachineArgs.MinVelocityAlignmentCosine">
            <summary>
            Cosine of the minimum angle between the character velocity and the surface normal or gravity
            to start sticking the character to the surface.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterSupportData">
            <summary>
            Data about which entities are supporting a character.
            </summary>
            <remarks>Adding this Data to an entity will have physics automatically fill in <see cref="F:Keen.VRage.Physics.Data.CharacterSupportData.SupportingEntities"/> each frame.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterSupportData.Support">
            <summary>
            Information about a point the character controller has taken into account when determining whether it is supported.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData">
            <summary>
            Information about the surface that is supporting the character.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData.IsSurfaceDynamic">
            <summary>
            Tells if the surface that supports the character is dynamic. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData.SurfaceDistanceExcess">
            <summary>
            The excess distance to the surface, which the controller should try to reduce this by applying gravity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData.SurfaceNormal">
            <summary>
            The average surface normal in this given direction.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData.SurfaceLinearVelocity">
            <summary>
            The average surface linear velocity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.CharacterSupportData.SurfaceData.SurfaceAngularVelocity">
            <summary>
            The average surface angular velocity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.ContactImpulseData">
            <summary>
            When attached to <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>, collects physical contracts during simulation
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.MinimalRequiredImpulse">
            <summary>
            Gentle contacts below declared intensity won't be reported
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.ContactImpulseData.Contact">
            <summary>
            Instance of contact between two bodies
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.Normal">
            <summary>
            The normal of the contact in world space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.SeparatingVelocity">
            <summary>
            Velocity difference at the contact point.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.ImpulseMagnitude">
            <summary>
            The impulse applied to the contact point.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.Position">
            <summary>
            The position in world space for this contact.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.OtherBody">
            <summary>
            The other body that participates on this contact.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.SeparationSpeedAlongNormal">
            <summary>
            Speed difference at the contact point projected onto the contact normal using the motion velocities.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.ContactImpulseData.Contact.SeparationSpeedAlongNormalAbsolute">
            <summary>
            Absolute speed difference at the contact point projected onto the contact normal using the motion velocities.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.ContactImpulseData.Contact.SeparationVelocityAlongNormal">
            <summary>
            Resulting velocity difference at the contact point projected onto the contact normal using the motion velocities.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.CurrentBodyMaterial">
            <summary>
            Material id key for the holding entity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.OtherBodyMaterial">
            <summary>
            Material id for the colliding entity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.ContactImpulseData.Contact.MinDistance">
            <summary>
            Minimum distance from the points of the contact.
            Can be negative if there is penetration.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.CustomGravity">
            <summary>
            Custom per body gravity acceleration.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.DynamicTag">
            <summary>
            Annotates dynamic or kinematic bodies.
            Absence indicates static body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.KinematicTag">
            <summary>
            Annotates kinematic bodies. Can be present along with <see cref="T:Keen.VRage.Physics.Data.DynamicTag"/> on an Entity.
            Absence indicates dynamic or static body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.PhysicsStatisticsNode">
            <summary>
            Represents a measurement of a timer inside physics.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.PhysicsTriangle">
            <summary>
            A representation for a triangle in a physics mesh.
            </summary>
            <remarks>Stores the indices of the triangle vertices and a material index.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Data.PhysicsTriangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A representation for a triangle in a physics mesh.
            </summary>
            <remarks>Stores the indices of the triangle vertices and a material index.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RagdollInstanceData">
            <summary>
            Input for a ragdoll attached to the entity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RagdollInstanceData.TargetLocalPose">
            <summary>
            Target pose (in bone local space) of the model skeleton that is simulated with the ragdoll.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RagdollInstanceData.Discontinuity">
            <summary>
            Indicates the ragdoll pose update is discontinuous (should teleport to the pose rather than drive to it smoothly)
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RagdollInstanceStateData">
            <summary>
            Input for a state that ragdoll attached to the entity should be in.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RagdollInstanceStateData.TargetState">
            <summary>
            Target ragdoll state.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RagdollInstanceOutput">
            <summary>
            Output state of the ragdoll attached to the entity.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RagdollInstanceOutput.AbsolutePose">
            <summary>
            Actual pose (in bone local space) of the model skeleton that is simulated with the ragdoll.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyData">
            <summary>
            Presence of <see cref="T:Keen.VRage.Physics.Data.RigidBodyData"/> along with <see cref="T:Keen.VRage.Core.WorldTransform"/> on <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> makes grounds for instantiation and simulation of physics rigid body.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyMassProperties">
            <summary>
            Mass properties for physics bodies.
            Used mainly for impulse and collision response calculations.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.InvMass">
            <summary>
            Inverse mass (1 / mass).
            Zero is treated as infinite
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.Mass">
            <summary>
            Body mass
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.CenterOfMass">
            <summary>
            Body center of mass relative to coordinate center in body-local space
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.InvInertiaTensor">
            <summary>
            Inverse of diagonalized inertia tensor in major axis space
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.InertiaMajorAxisRotation">
            <summary>
            Rotation from inertia major axis to body space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.Volume">
            <summary>
            Total volume of the body.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.InvInertiaMajorAxisRotation">
            <summary>
            Rotation from body to the inertia major axis space.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyMassProperties.ApproximateEqualityComparer">
            <summary>
            Tolleranced equality comparer for <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/>.
            </summary>
            <remarks>
            <para>Uses <see cref="M:Keen.VRage.Library.Mathematics.MathHelper.IsEqualUlp(System.Single,System.Single,System.Int32)"/>.</para>
            <para><see cref="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.ApproximateEqualityComparer.GetHashCode(Keen.VRage.Physics.Data.RigidBodyMassProperties)"/> is not implemented.</para>
            </remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.ApproximateEqualityComparer.#ctor(System.Int32)">
            <summary>
            Tolleranced equality comparer for <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/>.
            </summary>
            <remarks>
            <para>Uses <see cref="M:Keen.VRage.Library.Mathematics.MathHelper.IsEqualUlp(System.Single,System.Single,System.Int32)"/>.</para>
            <para><see cref="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.ApproximateEqualityComparer.GetHashCode(Keen.VRage.Physics.Data.RigidBodyMassProperties)"/> is not implemented.</para>
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Data#RigidBodyMassProperties}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvMassAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.MassAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.CenterOfMassAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaTensorAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Set(System.Object,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InertiaMajorAxisRotationAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.VolumeAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Set(System.Object,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Quaternion}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Set(Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassProperties.TypeInfoHolder.InvInertiaMajorAxisRotationAccessor.Get(Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyDataFunctions">
            <summary>
            Helpers for <see cref="T:Keen.VRage.Physics.Data.RigidBodyData"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.GetLinearVelocityAtPoint(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Core.WorldTransform@,Keen.VRage.Library.Mathematics.Vector3D@)">
            <summary>
            Get linear velocity at world position different from CoM.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.ApplyLinearImpulse(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Vector3@)">
            <summary>
            Apply a linear impulse (in world space) to a body at its center of mass (no change in angular velocity is induced).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.ApplyAngularImpulse(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Core.WorldTransform@,Keen.VRage.Library.Mathematics.Vector3@)">
            <summary>
            Apply an angular impulse (in world space) to a body around its center of mass (no change in linear velocity is induced).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.ApplyAngularImpulseLocal(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Core.WorldTransform@,Keen.VRage.Library.Mathematics.Vector3@)">
            <summary>
            Apply an angular impulse (in local space) to a body around its center of mass (no change in linear velocity is induced).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.GetAngularImpulseLocal(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Core.WorldTransform@)">
            <summary>
            Compute Angular impulse that would be necessary to apply to achieve current AngularVelocity
            </summary>
            <param name="rb"></param>
            <param name="mass"></param>
            <param name="wt"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.ApplyImpulseAt(Keen.VRage.Physics.Data.RigidBodyData@,Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Core.WorldTransform@,Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.Vector3)">
            <summary>
            Apply an impulse to a body at a specified position (both in world space).
            This causes an immediate change in both linear and angular velocity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyDataFunctions.TryApplyImpulse(System.Nullable{Keen.VRage.Library.Mathematics.Vector3},Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.DCS.Components.Entity)">
            <summary>
            Tries to apply impulse to entities with <see cref="T:Keen.VRage.Physics.Components.IPhysicsMotionProvider"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.RigidBodyMassPropertiesFunctions">
            <summary>
            Helpers for <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassPropertiesFunctions.LocalAngularVelocityToAngularImpulseLocal(Keen.VRage.Physics.Data.RigidBodyMassProperties@,Keen.VRage.Library.Mathematics.Vector3@)">
            <summary>
            Transform local angular velocity to local angular impulse necessary to achieve it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassPropertiesFunctions.ScaleProportionallyByMass(Keen.VRage.Physics.Data.RigidBodyMassProperties@,System.Single@)">
            <summary>
            Scale the mass and inertia tensor proportionally based on the mass ratio and mass multiplier.
            Can be used when the current mass contains a proportion of the total mass. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Data.RigidBodyMassPropertiesFunctions.SetMass(Keen.VRage.Physics.Data.RigidBodyMassProperties@,System.Single@)">
            <summary>
            Sets the mass and inertia tensor by scaling both by the new mass to current mass ratio.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.SharedMotionCustomGravity">
            <summary>
            Recalculated <see cref="T:Keen.VRage.Physics.Data.CustomGravity"/> when entities are linked using <see cref="M:Keen.VRage.Physics.IPhysics.AttachEntities(Keen.VRage.Library.Memory.Buffer{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.DCS.Accessors.DEntity)"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.SharedMotionGravityData">
            <summary>
            Flag indicating that the <see cref="T:Keen.VRage.Physics.Data.SharedMotionGravityData"/> is not dirty.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.SharedMotionGravityData.Count">
            <summary>
            Number of <see cref="T:Keen.VRage.Physics.Data.CustomGravity"/> merged into <see cref="F:Keen.VRage.Physics.Data.SharedMotionCustomGravity.Gravity"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Data.SharedMotionGravityData.LastUpdate">
            <summary>
            Last time this gravity was calculated. Used to not recalculate multiple time a same motion.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Data.TransformDriven">
            <summary>
            Indicates that this rigid-body is driven by transforms and not by velocities.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu">
            <summary>
            Debug menu for character controllers.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.#ctor(Keen.VRage.Physics.IPhysics,Keen.VRage.Core.Render.IDebugDraw,Keen.VRage.DCS.Scenes.Scene,System.String)">
            <summary>
            Debug menu for character controllers.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character">
            <summary>
            A character in the scene. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.NameAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#CharacterPhysicsComponent}#Set(System.Object,Keen.VRage.Physics.Components.CharacterPhysicsComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#CharacterPhysicsComponent}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#CharacterPhysicsComponent}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#CharacterPhysicsComponent}#Set(System.Byte@,Keen.VRage.Physics.Components.CharacterPhysicsComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@,Keen.VRage.Physics.Components.CharacterPhysicsComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character.TypeInfoHolder.ComponentAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharactersAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Set(System.Object,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Set(System.Byte@,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.SelectedCharacterAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.CharacterStateAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawStateAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.DrawSupportAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder.GravityFactorAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Set(System.Object,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#CharacterPhysicsDebugMenu#Character}#Set(System.Byte@,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Set(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@,Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.Character@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu.TypeInfoHolder._selectedCharacterAccessor.Get(Keen.VRage.Physics.Debug.CharacterPhysicsDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.ClustersDebugMenu">
            <summary>
            Debug menu for character controllers.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption">
            <summary>
            A cluster to be debugged. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.NameAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.TagAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption.TypeInfoHolder.CenterAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Set(System.Object,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Set(System.Byte@,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._sessionAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokDebugSystem}#Set(System.Object,Keen.VRage.Physics.Havok.HavokDebugSystem@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokDebugSystem}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokDebugSystem}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokDebugSystem}#Set(System.Byte@,Keen.VRage.Physics.Havok.HavokDebugSystem@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,Keen.VRage.Physics.Havok.HavokDebugSystem@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._debugAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Set(System.Object,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Set(System.Byte@,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder._selectedAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.DrawWorldsAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.EnableUpdateAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.ClustersAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Set(System.Object,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#ClustersDebugMenu#ClusterTrackingOption}#Set(System.Byte@,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Set(Keen.VRage.Physics.Debug.ClustersDebugMenu@,Keen.VRage.Physics.Debug.ClustersDebugMenu.ClusterTrackingOption@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.ClustersDebugMenu.TypeInfoHolder.SelectedClusterTrackingOptionAccessor.Get(Keen.VRage.Physics.Debug.ClustersDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugColliderModule">
            <summary>
            Reusable holder of a collider for debug queries.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType">
            <summary>
            Type of the shape used in a debug query.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Set(System.Object,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Set(System.Byte@,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Set(Keen.VRage.Physics.Debug.DebugColliderModule@,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._physicsAccessor.Get(Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Set(System.Object,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Colliders#IPhysicsCollider}#Set(System.Byte@,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Set(Keen.VRage.Physics.Debug.DebugColliderModule@,Keen.VRage.Physics.Colliders.IPhysicsCollider@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.InstanceAccessor.Get(Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Set(System.Object,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Set(System.Byte@,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Set(Keen.VRage.Physics.Debug.DebugColliderModule@,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder._shapeAccessor.Get(Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Set(System.Object,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule#DebugShapeType}#Set(System.Byte@,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Set(Keen.VRage.Physics.Debug.DebugColliderModule@,Keen.VRage.Physics.Debug.DebugColliderModule.DebugShapeType@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugColliderModule.TypeInfoHolder.ShapeAccessor.Get(Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugViewerMenu">
            <summary>
            Menu for interacting with the physics debug system.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.GetDebugMenu``1">
            <summary>
            Get a debug viewer of a given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer">
            <summary>
            Wrapper for <see cref="T:Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug#IDebugViewer}#Set(System.Object,Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug#IDebugViewer}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug#IDebugViewer}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug#IDebugViewer}#Set(System.Byte@,Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@,Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder._viewerAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.NameAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer.TypeInfoHolder.EnabledAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Set(System.Object,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Set(System.Byte@,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._sceneAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug}#Set(System.Object,Keen.VRage.Physics.IPhysicsSessionDebug@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysicsSessionDebug}#Set(System.Byte@,Keen.VRage.Physics.IPhysicsSessionDebug@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,Keen.VRage.Physics.IPhysicsSessionDebug@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugSystemAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#IPhysicsDebugDraw}#Set(System.Object,Keen.VRage.Physics.Havok.IPhysicsDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#IPhysicsDebugDraw}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#IPhysicsDebugDraw}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#IPhysicsDebugDraw}#Set(System.Byte@,Keen.VRage.Physics.Havok.IPhysicsDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,Keen.VRage.Physics.Havok.IPhysicsDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugDrawComponentAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#Physics#Debug#PhysicsDebugMenuBase}}#Set(System.Object,System.Collections.Generic.HashSet{Keen.VRage.Physics.Debug.PhysicsDebugMenuBase}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#Physics#Debug#PhysicsDebugMenuBase}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#Physics#Debug#PhysicsDebugMenuBase}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#HashSet{Keen#VRage#Physics#Debug#PhysicsDebugMenuBase}}#Set(System.Byte@,System.Collections.Generic.HashSet{Keen.VRage.Physics.Debug.PhysicsDebugMenuBase}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Collections.Generic.HashSet{Keen.VRage.Physics.Debug.PhysicsDebugMenuBase}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder._debugMenusAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebuggerServerAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.EnableDebugViewersAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.DrawTransparentAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.HaveDebugDrawComponentAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ShowRigidBodyShapesAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#DebugViewerMenu#Viewer}}#Set(System.Object,System.Collections.Generic.List{Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#DebugViewerMenu#Viewer}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#DebugViewerMenu#Viewer}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#List{Keen#VRage#Physics#Debug#DebugViewerMenu#Viewer}}#Set(System.Byte@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Set(Keen.VRage.Physics.Debug.DebugViewerMenu@,System.Collections.Generic.List{Keen.VRage.Physics.Debug.DebugViewerMenu.Viewer}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.DebugViewerMenu.TypeInfoHolder.ViewersAccessor.Get(Keen.VRage.Physics.Debug.DebugViewerMenu@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration">
            <summary>
            Used to globally configure misc physics debug settings
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.ObserverTag">
            <summary>
            Observer tag used by physics debug systems to access camera transform
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfiguration.TypeInfoHolder.ObserverTagAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase">
            <summary>
            Base class for physics debug menus.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.Physics">
            <summary>
            Physics session.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.DebugDraw">
            <summary>
            Debug draw interface (in most cases you'll want to use <see cref="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.DebugDraw"/> and <see cref="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.DebugBatch2D"/> instead.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder._enabledAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.MenuNameAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.NameAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Set(System.Object,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#IPhysics}#Set(System.Byte@,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.Physics.IPhysics@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.PhysicsAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#IDebugDraw}#Set(System.Object,Keen.VRage.Core.Render.IDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#IDebugDraw}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#IDebugDraw}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#IDebugDraw}#Set(System.Byte@,Keen.VRage.Core.Render.IDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.Core.Render.IDebugDraw@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugDrawAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Set(System.Object,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Scenes#Scene}#Set(System.Byte@,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.DCS.Scenes.Scene@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SceneAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Game#Systems#Session}#Set(System.Object,Keen.VRage.Core.Game.Systems.Session@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Game#Systems#Session}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Game#Systems#Session}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Game#Systems#Session}#Set(System.Byte@,Keen.VRage.Core.Game.Systems.Session@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.Core.Game.Systems.Session@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.SessionAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.EnabledAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder}#Set(System.Object,Keen.VRage.Core.Render.MeshBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder}#Set(System.Byte@,Keen.VRage.Core.Render.MeshBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.Core.Render.MeshBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatchAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder2D}#Set(System.Object,Keen.VRage.Core.Render.MeshBuilder2D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder2D}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder2D}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Core#Render#MeshBuilder2D}#Set(System.Byte@,Keen.VRage.Core.Render.MeshBuilder2D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@,Keen.VRage.Core.Render.MeshBuilder2D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugMenuBase.TypeInfoHolder.DebugBatch2DAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugMenuBase@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug">
            <summary>
            Debug menu for querying colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Set(System.Object,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Set(System.Byte@,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug@,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.ColliderAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug.TypeInfoHolder.MaxDistanceAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryColliderDebug@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase">
            <summary>
            Base class for debug query menus.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.Up">
            Up direction used by some queries, can be approximate
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.Offset">
            <summary>
            Query is cast from the offset to the target position which is given by Position and Direction * Length.
            </summary>    
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.FollowCameraAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.PositionAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.DirectionAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.UpAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,Keen.VRage.Library.Mathematics.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.OffsetAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.LengthAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#Set(System.Object,Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#PhysicsDebugConfiguration}#Set(System.Byte@,Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Set(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@,Keen.VRage.Physics.Debug.PhysicsDebugConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsQueryDebugBase.TypeInfoHolder.ConfigAccessor.Get(Keen.VRage.Physics.Debug.PhysicsQueryDebugBase@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsRayCastDebug">
            <summary>
            Debug raycast menu.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsRayCastDebug.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsRayCastDebug.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsRayCastDebug.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsRayCastDebug.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug">
            <summary>
            Debug shape cast menu.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Set(System.Object,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Debug#DebugColliderModule}#Set(System.Byte@,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Set(Keen.VRage.Physics.Debug.PhysicsShapeCastDebug@,Keen.VRage.Physics.Debug.DebugColliderModule@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsShapeCastDebug.TypeInfoHolder.ColliderAccessor.Get(Keen.VRage.Physics.Debug.PhysicsShapeCastDebug@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.ObserverTag">
            <summary>
            Observer tag used by physics debug systems to access camera transform
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Debug#PhysicsDebugConfigurationObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Set(Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder.TypeInfoHolder.ObserverTagAccessor.Get(Keen.VRage.Physics.Debug.PhysicsDebugConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration">
            <summary>
            Used to configure the Break Handler.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.DefaultLayer">
            <summary>
            Used by default
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.LayerMask">
            <summary>
            Matches layers that interact with each other.
            Layer pairs that are not present in this dictionary will not break when bodies corresponding to them collide.
            For example, if Body A has a "Character" layer and Body B has a "Terrain" layer, but the pair "Character"-"Voxel" is not present
            in this dictionary, then they will not register exceeding impulses when they collide with each other. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionLinearVelocityThreshold">
            <summary>
            If BOTH colliding bodies in a collision have their linear velocity intensity below this value and angular velocity
            below <see cref="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionAngularVelocityThreshold"/>>, the collision will not be processed.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionAngularVelocityThreshold">
            <summary>
            If BOTH colliding bodies in a collision have their angular velocity intensity below this value and linear velocity
            below <see cref="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionLinearVelocityThreshold"/>, the collision will not be processed.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionPerStepVelocityThresholdIncrement">
            <summary>
            The amount of velocity threshold collisions with destructions have.
            While destructions are present, the threshold increases per collision frame that has some destruction reported. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.StepCount">
            <summary>
            The amount of steps the break handler does for finding breached groups.
            More steps results in a better quality of destructions, but has a higher performance impact. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.RestitutionForDestructions">
            <summary>
            Restitution used for bodies being destroyed. They will bounce with a percent of the energy spent on the destruction
            and velocity reduction. E.g. a body at 100 m/s crashing against a wall will bounce with a velocity of 10 m/s
            if `RestitutionForDestructions` is 0.1.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair">
            <summary>
            Represents a pair of layers that can break each other. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.LayerA">
            <summary>
            The first layer that interacts with the second layer.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.LayerB">
            <summary>
            The second layer that interacts with the first layer.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerAAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair.TypeInfoHolder.LayerBAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.DefaultLayerAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Collections.Immutable.ImmutableArray{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.LayerMaskAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.StepCountAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.TypeInfoHolder.RestitutionForDestructionsAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfiguration@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition">
            <summary>
            A layer that Entities associated with rigid-bodies belong to and determines how
            they break and interact with other Entities. 
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.AllowBreakingBetweenBodiesOnConstraint">
            <summary>
            Whether to allow Entities on this layer break with Entities that are directly or transitively connected via constraints.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition.TypeInfoHolder.IndexAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionPostprocessor">
            <summary>
            The postprocessor for <see cref="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition"/>s.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition">
            <summary>
            Materials define how bodies behave during a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.MaxImpulse">
            <summary>
            Max impulse allowed on contacts for each sub-step. Clipped impulse will be reported via <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.WeldingTolerance">
            <summary>
            Welding tolerance is used when the Body Quality is set to a type which supports welding, generally characters.
            Welding will fix up internal edge collisions, e.g. when an object slides over a landscape made of connected
            triangles and the object hits an internal triangle edge. If two triangles are not perfectly aligned, the
            m_weldingTolerance specifies a vertical distance or 'step height' where 2 triangle would be treated connected.
            So if the landscape has a small step smaller than this WeldingTolerance, it will be completely smoothed.
            <remarks>
            Final welding tolerance will be calculated from the max between both body materials and the other collider materials.
            If welding tolerance is larger than colliders maximum penetration allowed then the collider MaxPenetrationAllowed is used.
            </remarks>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.MassChangerHeavyObjectFactor">
            <summary>
            The mass changer factor if <see cref="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.MassChangerCategory" /> is set to <see cref="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.RestitutionCombinePolicy">
            <summary>
            Sets how restitution is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.FrictionCombinePolicy">
            <summary>
            Sets how friction is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.GetConfiguration">
            <summary>
            Gets a configuration that can be inserted into the physics material API.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialAdvancedDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialAdvancedDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialAdvancedDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MaxImpulseAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.WeldingToleranceAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Object,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Byte@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.TypeInfoHolder.MassChangerCategoryAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration">
            <summary>
            A configuration for mapping the scales from voxel physics materials to actual break handler values.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MaxImpulse">
            <summary>
            Max impulse allowed on contacts for each sub-step. Clipped impulse will be reported via <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.WeldingTolerance">
            <summary>
            Welding tolerance is used when the Body Quality is set to a type which supports welding, generally characters.
            Welding will fix up internal edge collisions, e.g. when an object slides over a landscape made of connected
            triangles and the object hits an internal triangle edge. If two triangles are not perfectly aligned, the
            m_weldingTolerance specifies a vertical distance or 'step height' where 2 triangle would be treated connected.
            So if the landscape has a small step smaller than this WeldingTolerance, it will be completely smoothed.
            <remarks>
            Final welding tolerance will be calculated from the max between both body materials and the other collider materials.
            If welding tolerance is larger than colliders maximum penetration allowed then the collider MaxPenetrationAllowed is used.
            </remarks>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MassChangerHeavyObjectFactor">
            <summary>
            The mass changer factor if <see cref="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MassChangerCategory" /> is set to <see cref="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.RestitutionCombinePolicy">
            <summary>
            Sets how restitution is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.FrictionCombinePolicy">
            <summary>
            Sets how friction is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.SoftContactForceFactor">
            <summary>
            If enabled (value !=0), the soft contact modifier is enabled for all collisions using this material.
            This value defines a factor of the forces applied. For values less than 1.0, this results in a penetration.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.SoftContactDampFactor">
            <summary>
            The damping of soft contacts. The lower this value is, the more springy the contact becomes.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.SoftContactSeparationVelocity">
            <summary>
            Because of the "softness" of soft contacts, objects can penetrate deeply.
            This parameter defines how quickly the objects get pushed apart.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale1">
            <summary>
            The value of the break handler impulse that Mohs scale of 1 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale2">
            <summary>
            The value of the break handler impulse that Mohs scale of 2 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale3">
            <summary>
            The value of the break handler impulse that Mohs scale of 3 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale4">
            <summary>
            The value of the break handler impulse that Mohs scale of 4 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale5">
            <summary>
            The value of the break handler impulse that Mohs scale of 5 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale6">
            <summary>
            The value of the break handler impulse that Mohs scale of 6 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale7">
            <summary>
            The value of the break handler impulse that Mohs scale of 7 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale8">
            <summary>
            The value of the break handler impulse that Mohs scale of 8 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale9">
            <summary>
            The value of the break handler impulse that Mohs scale of 9 will correspond to.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MohsScale10">
            <summary>
            The value of the break handler impulse that Mohs scale of 10 will correspond to.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.GetMohsValue(System.Int32)">
            <summary>
            Get the value from the configuration. Throws if request is not between 1 and 10
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MaxImpulseAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.WeldingToleranceAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Object,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Byte@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MassChangerCategoryAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactForceFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactDampFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale1Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale2Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale3Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale4Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale5Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale6Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale7Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale8Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale9Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder.MohsScale10Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single[]}#Set(System.Object,System.Single[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single[]}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single[]}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single[]}#Set(System.Byte@,System.Single[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@,System.Single[]@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.TypeInfoHolder._mohsValuesAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition">
            <summary>
            Materials define how bodies behave during a collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.StaticFriction">
            <summary>
            Operates when bodies are at rest; it is the force that prevents bodies from moving or sliding.
            If a force is applied to a body large enough to overcome static friction, the body begins to move/slide.
            Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.DynamicFriction">
            <summary>
            When bodies are touching but moving, dynamic friction replaces static friction for the duration of the contact,
            being a force that slows a body down.
            As soon as the relative velocity between the two bodies in contact reaches zero again, static friction comes back.
            Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Restitution">
            <summary>
            Tells how much kinetic energy is absorbed along the line of impact
            between the two objects. Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.MaterialId">
            <summary>
            Runtime MaterialId associated to a <see cref="T:Keen.VRage.Physics.Materials.IMaterialLibrary"/>. Do not serialize or deserialize.
            </summary> 
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.GetConfiguration">
            <summary>
            Gets a configuration that can be inserted into the physics material API.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.ExtractMaterialNameRegex">
            <remarks>
            Pattern:<br/>
            <code>(.+\\\\)+(.+?)(Definition)?\\.def</code><br/>
            Explanation:<br/>
            <code>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character other than '\n' greedily at least once.<br/>
                    ○ Match '\\'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character other than '\n' lazily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ 3rd capture group.<br/>
                    ○ Match the string "Definition".<br/>
            ○ Match the string ".def".<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.StaticFrictionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.DynamicFrictionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.RestitutionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MaterialId}#Set(System.Object,Keen.VRage.Physics.Materials.MaterialId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MaterialId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MaterialId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MaterialId}#Set(System.Byte@,Keen.VRage.Physics.Materials.MaterialId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@,Keen.VRage.Physics.Materials.MaterialId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.MaterialIdAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#Set(System.Object,Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#PhysicsMaterialConfiguration}#Set(System.Byte@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition.TypeInfoHolder.PhysicsMaterialSettingsAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder">
            <summary>
            Migrations for the object builder of PhysicsMaterialDefinitionObjectBuilder
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.StaticFriction">
            <summary>
            Operates when bodies are at rest; it is the force that prevents bodies from moving or sliding.
            If a force is applied to a body large enough to overcome static friction, the body begins to move/slide.
            Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.DynamicFriction">
            <summary>
            When bodies are touching but moving, dynamic friction replaces static friction for the duration of the contact,
            being a force that slows a body down.
            As soon as the relative velocity between the two bodies in contact reaches zero again, static friction comes back.
            Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Restitution">
            <summary>
            Tells how much kinetic energy is absorbed along the line of impact
            between the two objects. Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.StaticFrictionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.DynamicFrictionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RestitutionAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialPostProcessor">
            <summary>
            Registers materials on the physics material library.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition">
            <summary>
            Definition that assigns tags to bones in ragdoll skeleton. Some ragdoll operations can then be performed only on bones with given tag.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Bones">
            <summary>
            Assigns tags to individual ragdoll bones.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Set(System.Object,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Set(System.Byte@,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Set(Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition.TypeInfoHolder.BonesAccessor.Get(Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition">
            <summary>
            Adjustable data for types that interact with the break handler API
            </summary>
            <summary>
            Keeps the data needed for the migrations of the fields in voxel physics material definition
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Hardness">
            <summary>
            The hardiness in the Mohs scale. The values of hardness correspond to the impulse threshold required to break the body
            set in <see cref="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.SlowdownFactor">
            <summary>
            The percent of slowdown the voxel material applies to a colliding object by each unit of volume (cubic meter).
            For example, if this value is 2, then it means that if a grid colliding with a voxel with this material removes
            10 cubic meters then the grid slows down 20% from its original velocity in the direction of the collision.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#VoxelPhysicsMaterialDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Physics#Definitions#VoxelPhysicsMaterialDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#VoxelPhysicsMaterialDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Set(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.HardnessAccessor.Get(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Set(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition.TypeInfoHolder.SlowdownFactorAccessor.Get(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder">
            <summary>
            Migrations for the object builder of VoxelPhysicsMaterialDefinitionObjectBuilder
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Hardness">
            <summary>
            The hardiness in the Mohs scale. The values of hardness correspond to the impulse threshold required to break the body
            set in <see cref="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.SlowdownFactor">
            <summary>
            The percent of slowdown the voxel material applies to a colliding object by each unit of volume (cubic meter).
            For example, if this value is 2, then it means that if a grid colliding with a voxel with this material removes
            10 cubic meters then the grid slows down 20% from its original velocity in the direction of the collision.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#VoxelPhysicsMaterialDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Set(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.HardnessAccessor.Get(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Set(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder.TypeInfoHolder.SlowdownFactorAccessor.Get(Keen.VRage.Physics.Definitions.VoxelPhysicsMaterialDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.DefaultLayer">
            <summary>
            Used by default
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.LayerMask">
            <summary>
            Matches layers that interact with each other.
            Layer pairs that are not present in this dictionary will not break when bodies corresponding to them collide.
            For example, if Body A has a "Character" layer and Body B has a "Terrain" layer, but the pair "Character"-"Voxel" is not present
            in this dictionary, then they will not register exceeding impulses when they collide with each other. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.CollisionLinearVelocityThreshold">
            <summary>
            If BOTH colliding bodies in a collision have their linear velocity intensity below this value and angular velocity
            below <see cref="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionAngularVelocityThreshold"/>>, the collision will not be processed.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.CollisionAngularVelocityThreshold">
            <summary>
            If BOTH colliding bodies in a collision have their angular velocity intensity below this value and linear velocity
            below <see cref="P:Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.CollisionLinearVelocityThreshold"/>, the collision will not be processed.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.CollisionPerStepVelocityThresholdIncrement">
            <summary>
            The amount of velocity threshold collisions with destructions have.
            While destructions are present, the threshold increases per collision frame that has some destruction reported. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.StepCount">
            <summary>
            The amount of steps the break handler does for finding breached groups.
            More steps results in a better quality of destructions, but has a higher performance impact. 
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.RestitutionForDestructions">
            <summary>
            Restitution used for bodies being destroyed. They will bounce with a percent of the energy spent on the destruction
            and velocity reduction. E.g. a body at 100 m/s crashing against a wall will bounce with a velocity of 10 m/s
            if `RestitutionForDestructions` is 0.1.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#BreakHandlerConfigurationObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Object,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinition}#Set(System.Byte@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.DefaultLayerAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Set(System.Object,Keen.VRage.Library.Collections.MergeableList{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{Keen#VRage#Physics#Definitions#BreakHandlerConfiguration#BreakHandlerLayerPair}}#Set(System.Byte@,Keen.VRage.Library.Collections.MergeableList{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,Keen.VRage.Library.Collections.MergeableList{Keen.VRage.Physics.Definitions.BreakHandlerConfiguration.BreakHandlerLayerPair}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.LayerMaskAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionLinearVelocityThresholdAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionAngularVelocityThresholdAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.CollisionPerStepVelocityThresholdIncrementAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.StepCountAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder.TypeInfoHolder.RestitutionForDestructionsAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.MaxImpulse">
            <summary>
            Max impulse allowed on contacts for each sub-step. Clipped impulse will be reported via <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.WeldingTolerance">
            <summary>
            Welding tolerance is used when the Body Quality is set to a type which supports welding, generally characters.
            Welding will fix up internal edge collisions, e.g. when an object slides over a landscape made of connected
            triangles and the object hits an internal triangle edge. If two triangles are not perfectly aligned, the
            m_weldingTolerance specifies a vertical distance or 'step height' where 2 triangle would be treated connected.
            So if the landscape has a small step smaller than this WeldingTolerance, it will be completely smoothed.
            <remarks>
            Final welding tolerance will be calculated from the max between both body materials and the other collider materials.
            If welding tolerance is larger than colliders maximum penetration allowed then the collider MaxPenetrationAllowed is used.
            </remarks>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.MassChangerHeavyObjectFactor">
            <summary>
            The mass changer factor if <see cref="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinition.MassChangerCategory" /> is set to <see cref="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.RestitutionCombinePolicy">
            <summary>
            Sets how restitution is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.FrictionCombinePolicy">
            <summary>
            Sets how friction is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialAdvancedDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Object,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Byte@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialAdvancedDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MaxImpulse">
            <summary>
            Max impulse allowed on contacts for each sub-step. Clipped impulse will be reported via <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.WeldingTolerance">
            <summary>
            Welding tolerance is used when the Body Quality is set to a type which supports welding, generally characters.
            Welding will fix up internal edge collisions, e.g. when an object slides over a landscape made of connected
            triangles and the object hits an internal triangle edge. If two triangles are not perfectly aligned, the
            m_weldingTolerance specifies a vertical distance or 'step height' where 2 triangle would be treated connected.
            So if the landscape has a small step smaller than this WeldingTolerance, it will be completely smoothed.
            <remarks>
            Final welding tolerance will be calculated from the max between both body materials and the other collider materials.
            If welding tolerance is larger than colliders maximum penetration allowed then the collider MaxPenetrationAllowed is used.
            </remarks>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MassChangerHeavyObjectFactor">
            <summary>
            The mass changer factor if <see cref="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfiguration.MassChangerCategory" /> is set to <see cref="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.RestitutionCombinePolicy">
            <summary>
            Sets how restitution is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.FrictionCombinePolicy">
            <summary>
            Sets how friction is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.SoftContactForceFactor">
            <summary>
            If enabled (value !=0), the soft contact modifier is enabled for all collisions using this material.
            This value defines a factor of the forces applied. For values less than 1.0, this results in a penetration.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.SoftContactDampFactor">
            <summary>
            The damping of soft contacts. The lower this value is, the more springy the contact becomes.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.SoftContactSeparationVelocity">
            <summary>
            Because of the "softness" of soft contacts, objects can penetrate deeply.
            This parameter defines how quickly the objects get pushed apart.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale1">
            <summary>
            The value of the break handler impulse that Mohs scale of 1 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale2">
            <summary>
            The value of the break handler impulse that Mohs scale of 2 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale3">
            <summary>
            The value of the break handler impulse that Mohs scale of 3 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale4">
            <summary>
            The value of the break handler impulse that Mohs scale of 4 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale5">
            <summary>
            The value of the break handler impulse that Mohs scale of 5 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale6">
            <summary>
            The value of the break handler impulse that Mohs scale of 6 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale7">
            <summary>
            The value of the break handler impulse that Mohs scale of 7 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale8">
            <summary>
            The value of the break handler impulse that Mohs scale of 8 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale9">
            <summary>
            The value of the break handler impulse that Mohs scale of 9 will correspond to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.MohsScale10">
            <summary>
            The value of the break handler impulse that Mohs scale of 10 will correspond to.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#PhysicsMaterialConfigurationObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MaxImpulseAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.WeldingToleranceAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerHeavyObjectFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.RestitutionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Object,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#CombinePolicy}#Set(System.Byte@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Physics.Materials.CombinePolicy@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.FrictionCombinePolicyAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Object,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Materials#MassChangerCategory}#Set(System.Byte@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,Keen.VRage.Physics.Materials.MassChangerCategory@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MassChangerCategoryAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactForceFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactDampFactorAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.SoftContactSeparationVelocityAccessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale1Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale2Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale3Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale4Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale5Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale6Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale7Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale8Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale9Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Set(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder.TypeInfoHolder.MohsScale10Accessor.Get(Keen.VRage.Physics.Definitions.PhysicsMaterialConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.AllowBreakingBetweenBodiesOnConstraint">
            <summary>
            Whether to allow Entities on this layer break with Entities that are directly or transitively connected via constraints.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#BreakHandlerLayerDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Set(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder.TypeInfoHolder.AllowBreakingBetweenBodiesOnConstraintAccessor.Get(Keen.VRage.Physics.Definitions.BreakHandlerLayerDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Bones">
            <summary>
            Assigns tags to individual ragdoll bones.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Physics#Definitions#RagdollBoneTagsDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Set(System.Object,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,Keen#VRage#Physics#Ragdolls#RagdollBoneType}}#Set(System.Byte@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Set(Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,Keen.VRage.Physics.Ragdolls.RagdollBoneType}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder.TypeInfoHolder.BonesAccessor.Get(Keen.VRage.Physics.Definitions.RagdollBoneTagsDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Extensions.EngineBuilderExtensions">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters">
            <summary>
            Configuration parameters for <see cref="M:Keen.VRage.Physics.IPhysicsColliders.DecomposeGeometryIntoConvexHulls(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,Keen.VRage.Physics.Geometry.PhysicsGeometryArg,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Mathematics.Vector4},Keen.VRage.Library.Memory.BufferReference{System.Int32},Keen.VRage.Physics.Colliders.DecompositionOutputInfo@)"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxErrorAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Object,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Single}#Set(System.Byte@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.GeometrySimplificationAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MaxHullsAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Geometry#ConvexDecompositionQuality}#Set(System.Object,Keen.VRage.Physics.Geometry.ConvexDecompositionQuality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Geometry#ConvexDecompositionQuality}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Geometry#ConvexDecompositionQuality}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Geometry#ConvexDecompositionQuality}#Set(System.Byte@,Keen.VRage.Physics.Geometry.ConvexDecompositionQuality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,Keen.VRage.Physics.Geometry.ConvexDecompositionQuality@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.QualityAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.PreserveMaterialsAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.RelativeErrorAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Utils#IProgressMonitor}#Set(System.Object,Keen.VRage.Physics.Utils.IProgressMonitor@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Utils#IProgressMonitor}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Utils#IProgressMonitor}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Utils#IProgressMonitor}#Set(System.Byte@,Keen.VRage.Physics.Utils.IProgressMonitor@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Set(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,Keen.VRage.Physics.Utils.IProgressMonitor@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.ConvexDecompositionParameters.TypeInfoHolder.MonitorAccessor.Get(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.ConvexDecompositionQuality">
            <summary>
            Quality of a convex decomposition.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.MeshSimplificationParameters">
            <summary>
            Parameters for <see cref="M:Keen.VRage.Physics.IPhysicsColliders.SimplifyGeometry(Keen.VRage.Physics.Geometry.MeshSimplificationParameters@,Keen.VRage.Physics.Geometry.SimpleGeometry)"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.MeshSimplificationParameters.PreserveMaterialBoundaries">
            <summary>
            Whether to preserve edges between triangles of different materials.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.MeshSimplificationParameters.PreserveEdges">
            <summary>
            Whether to preserve outside edges (edges that are only shared by single triangles).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.MeshSimplificationParameters.InputSimplification">
            <summary>
            Maximum distance between the original and final geometries.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.PhysicsGeometryArg">
            <summary>
            General purpose triangle geometry used by physics.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Geometry.SimpleGeometry">
            <summary>
            Super simple geometry representation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.SimpleGeometry.Vertices">
            <summary>
            List of triangle vertices.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Geometry.SimpleGeometry.Triangles">
            <summary>
            List of triangles.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.RemoveWhere(System.Predicate{Keen.VRage.Library.Mathematics.Vector4})">
            <summary>
            Remove vertices matching a predicate, affected triangles are also removed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.Translate(Keen.VRage.Library.Mathematics.Vector3)">
            <summary>
            Move the mesh so the center of the bounding box is at the origin.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.ComputeBounds">
            <summary>
            Compute the bounds of the geometry.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.Append(Keen.VRage.Physics.Geometry.PhysicsGeometryArg)">
            <summary>
            Append another geometry to this instance.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.LoadFromObj(System.IO.Stream)">
            <summary>
            Load data into this geometry from a Wavefront .obj stream.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.LoadFromBinary(System.IO.Stream)">
            <summary>
            Load data into this geometry from a binary stream.
            </summary>
            <remarks>Uses a minimalist, unsafe, proprietary format.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.WriteBinary(System.IO.Stream)">
            <summary>
            Write data from this geometry into a binary stream.
            </summary>
            <remarks>Uses a minimalist, unsafe, proprietary format.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Geometry.SimpleGeometry.WriteObj(System.IO.Stream)">
            <summary>
            Write data from this geometry into a binary stream.
            </summary>
            <remarks>Uses a minimalist, unsafe, proprietary format.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.BodyCreationInfo">
            <summary>
            Body settings used by regular bodies as well as motion shared bodies from a large collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BodyCreationInfo.AfterAllocated(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpBody*,Keen.VRage.Physics.Havok.Core.HknpBodyId)">
            <summary>
            Apply parameters that are not captured by CInfo to the newly allocated body.
            </summary>
            <remarks>These parameters are added either as custom properties or registered to modifiers in the session.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BodyCreationInfo.GetOrCreateMassProperties(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Physics.Havok.Colliders.IHavokCollider,Keen.VRage.Physics.Data.RigidBodyMassProperties@)">
            <summary>
            Get or create the mass properties for an entity.
            </summary>
            <remarks>This will add the <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/> data to the entity if it is not present, and output that data on any case.</remarks>
            <param name="entity">The entity to get or add the mass properties to</param>
            <param name="collider">The entity collider to compute the mass properties if they are not present</param>
            <param name="outProperties">The properties that were either obtained or calculated</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BodyCreationInfo.GetOrCreateMassProperties(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.Physics.Havok.Colliders.IHavokCollider,Keen.VRage.Physics.Havok.Core.HkDiagonalizedMassProperties*)">
            <summary>
            Get or create the mass properties for an entity.
            </summary>
            <remarks>This will add the <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/> data to the entity if needed, and extract the <paramref name="outProperties"/>
            for later use.</remarks>
            <param name="entity"></param>
            <param name="collider"></param>
            <param name="outProperties"></param>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.BodyProxy">
            <summary>
            Additional tracking information about a user allocated body.
            </summary>
            <remarks>All interaction with the body in the world has to be done via this proxy. This ensure that information is correctly broadcast in case
            the body uses a <see cref="T:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider"/>.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BodyProxy.GetLocalWorldPosition(Keen.VRage.Library.Mathematics.Vector3D)">
            <summary>
            Transform a global scene position into a position relative to the origin of <see cref="F:Keen.VRage.Physics.Havok.BodyProxy.World"/>. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BreakableCompound.RootBreakableShape.MakePiece(Keen.VRage.Library.Memory.Buffer{System.UInt16})">
            <summary>
            Creates a piece from a collection of nodes. 
            The resulting piece will be a <see cref="T:Keen.VRage.Physics.Colliders.BreakableCollider.IBreakableCollider"/>.
            All provided fractures (if more than one) must be connected to another fracture in the group, or else the next operation on this piece will disjoint isolated nodes.
            Note that disposing is on the caller side.
            </summary>
            <param name="nodes">A sorted collection of nodes to make a piece from</param>
            <returns>A breakable collider made from the given nodes</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.BreakHandler.CollisionSphereCollection">
            <summary>
            Represents a collection of collision spheres to be reported to using systems.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.BreakHandler.CollisionSphereInfo">
            <summary>
            Represents a single collision sphere.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BreakHandler.HavokBreakHandler.GetLayer(System.Int32)">
            <summary>
            Gets the layer name performing a linear search on layer values.
            </summary>
            <param name="layerIndex">The layer index to search for its name</param>
            <returns>The name corresponding to the layer index</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BreakHandler.HavokBreakHandler.ClearContacts(Keen.VRage.Physics.Data.BreakableBodyImpulseData@,Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.BreakableBodyImpulseData})">
            <summary>
            Remove exceeding impulses from last step if any.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.BreakHandler.HavokBreakHandler.AfterSolve(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.BreakableBodyImpulseData},Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Havok.BodyProxy},Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Inform of exceeded manifolds, getting the info from Havok and writing it to the corresponding Entity Data
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Character.HavokCharacterStateMachine.#ctor(Keen.VRage.Physics.Havok.HkCharacterStateManager*,Keen.VRage.Physics.Data.CharacterStateMachineArgs)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Havok.ClusterIndex">
            <summary>
            Index of the cluster where an entity lives. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.DynamicCompoundShape.AddSubColliderList(System.ReadOnlySpan{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}},System.Span{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.DynamicCompoundShape.RemoveSubColliderList(System.Span{System.Int32})">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.HavokShape._referenceCount">
            <summary>
            A reference counter that can be manually increased and gets decreased each time the collider is disposed.
            Note that it starts at one and disposes at zero. In no cases it reaches negative numbers.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.GetNumUnusedShapeKeyBits(System.Int32)">
            <summary>
            Calculate the number of shape key bits not used by <paramref name="shapeKeyBits"/>. 
            </summary>
            HKNP_NUM_UNUSED_SHAPE_KEY_BITS
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.GetShapeKeyBits(System.IntPtr)">
            <summary>
            Get the number of shape key bits requested by a given shape.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.CalcLocalShapeKey(System.IntPtr,Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Calculate a local index from a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/>.
            </summary>
            <remarks>The shape key must be local. I.e.: this only works for two level shape hierarchies.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.BuildShapeKeyFromLocalKey(System.Int32,System.UInt32)">
            <summary>
            Calculate a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> from a local child key.
            </summary>
            <remarks>The shape key must be local. I.e.: this only works for two level shape hierarchies.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.BuildShapeKeyFromLocalKey(System.IntPtr,System.UInt32)">
            <summary>
            Calculate a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> from a local child key.
            </summary>
            <remarks>The shape key must be local. I.e.: this only works for two level shape hierarchies.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.CalcLocalShapeKey(Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Calculate a local index from a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/>.
            </summary>
            <remarks>The shape key must be local. I.e.: this only works for two level shape hierarchies.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.HavokShape.BuildShapeKeyFromLocalKey(System.UInt32)">
            <summary>
            Calculate a <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/> from a local child key.
            </summary>
            <remarks>The shape key must be local. I.e.: this only works for two level shape hierarchies.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Colliders.IHavokCollider.IsSerializable">
            <summary>
            Whether this collider is supported by native serialization in Havok.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Colliders.IHavokCollider.IsLarge">
            <summary>
            Whether this collider is a collection of smaller colliders that is attached to a body via motion sharing.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.IHavokCollider.SetScaledMassProperties(Keen.VRage.Physics.IPhysicsColliders)">
            <summary>
            Scales the mass properties back to one unit of mass.
            In case this is called on compound colliders, they use the children information to find the Center of Mass and total volume, and the child
            colliders will have their masses scaled to the compound total. 
            </summary>
            <param name="colliders">The colliders interface to scale mass elements when necessary</param>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider">
            <summary>
            A large collider is a collider intended for very large objects, with a large number of child colliders.
            </summary>
            <remarks>
            <para>The collider is automatically subdivided into multiple <i>sections</i>. Each section becomes it's own rigidbody and all bodies share
            the same motion.</para>
            <para>Sections are always kept in a free list, so listeners can rely on that fact and keep any additional data they need in a free list
            as well.</para>
            </remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.SectionCount">
            <summary>
            Number of sections in this shape.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.MaxSectionIndex">
            <summary>
            Number of sections in this shape.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.ReadSections(Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{System.Int32,Keen.VRage.Library.Mathematics.Vector3}})">
            <summary>
            Fill the buffer with offsets of all instances in the large collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.ReadSections(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Havok.Colliders.LargeColliderSection})">
            <summary>
            Fill the buffer with info about all valid child colliders in the large collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.AddReference(Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState)">
            <summary>
            Record a reference to this collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.IHavokLargeCollider.RemoveReference">
            <summary>
            Record a reference to this collider.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState.MainEntity">
            <summary>
            Main entity which is used to control the behaviour of the bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState._bodyIdsToSections">
            <summary>
            Map of Havok body IDs to their user-owned section index.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState._sectionsToBodyIds">
            <summary>
            Map of user-owned section indices to their Havok body ID.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState._sectionBodiesToAdd">
            <summary>
            Collection section body add requests. Sorted for physics determinism.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState._sectionBodiesToDestroy">
            <summary>
            Collection of section body removal requests, stored as section indices. Sorted for physics determinism.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState.ReplaceBodies(System.Span{Keen.VRage.Physics.Havok.Core.HknpBodyId},System.Span{System.Int32})">
            <summary>
            Replaces the list of tracked bodies with a new list of Havok body IDs and their corresponding section indices.
            </summary>
            <param name="bodyIds">List of new Havok body IDs.</param>
            <param name="sectionIndices">Corresponding list of section indices.</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState.OnWorldChanged(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpMotionId)">
            <summary>
            World manager should notify body attachment states when the body moves.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState.SectionBodyAddRequest">
            <summary>
            Deferred section body add request
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeColliderBase.AddReference(Keen.VRage.Physics.Havok.Colliders.LargeColliderAttachmentState)">
            <summary>
            Record a reference to this collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeColliderBase.RemoveReference">
            <summary>
            Record a reference to this collider.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.LargeDynamicCompoundShape">
            <summary>
            Mostly dumb dynamic compound collider.
            </summary>
            <remarks>Can grow beyond the limits of the standard compound shape, but is very unintelligent regarding slot reuse and is prone to
            getting scrambled after frequent add/remove operations. Temporary band-aid for the child shape limit in HknpCompoundShape.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeDynamicCompoundShape.AddSubColliderList(System.ReadOnlySpan{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion}},System.Span{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeDynamicCompoundShape.RemoveSubColliderList(System.Span{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.LargeDynamicCompoundShape.RebuildCollisionCache">
            <summary>
            Fires a signal that rebuilds the collision cache for the bodies that contain this shape.
            Needed for when two mutable compound shapes are touching, one contains a hierarchy with
            two or more levels of depth and a non-root compound gets a shape removed.
            Havok does not rebuild the cache automatically for nested compound shapes and it crashes
            if they are touching with other compound.   
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape._sectionsGrids">
            <summary>
            Grid is null when the entry is free.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape._sectionBits">
            <summary>Width of a section in chunks.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape._sectionBlockBits">
            <summary>Width of a section in blocks.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape._sectionScale">
            <summary>Size of a section in units.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape._boundingBox">
            <summary>
            Caches the bounding box for this shape, as recalculating it is not trivial.
            It is marked dirty by setting the Min X value as positive infinity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection">
            <summary>
            Information intended for insertion operations on the same section.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection.SectionPosition">
            <summary>
            The position of the section in integer space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection.SectionOffset">
            <summary>
            The offset that the section applies to blocks.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection.Offset">
            <summary>
            Offset where the blocks corresponding to this section start on the allocated blocks buffer.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection.Count">
            <summary>
            Amount of blocks that belong to this section.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockInsertionSection.InternalCount">
            <summary>
            Amount of blocks that have been inserted to the section.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.LargeSimdTreeGridShape.BlockSorter">
            <summary>
            Comparer used for sorting blocks and block indices so they can be batch processed per shape.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape._sectionsGrids">
            <summary>
            Grid is null when the entry is free.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape._sectionBits">
            <summary>Width of a section in chunks.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape._sectionBlockBits">
            <summary>Width of a section in blocks.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape._sectionScale">
            <summary>Size of a section in units.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape._boundingBox">
            <summary>
            Caches the bounding box for this shape, as recalculating it is not trivial.
            It is marked dirty by setting the Min X value as positive infinity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Colliders.LargeSparseGridShape.BlockSorter">
            <summary>
            Comparer used for sorting blocks and block indices so they can be batch processed per shape.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.VoxelShape.ClearRange(Keen.VRage.Library.Mathematics.BoundingBoxI)">
            <summary>
            Clear all triangles in a rage of the collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Colliders.VoxelShape.SetDebugTransform(Keen.VRage.Library.Mathematics.Vector4,Keen.VRage.Library.Mathematics.Quaternion)">
            <summary>
            Sets the transform that will be used to draw debug draw in world space for this body.
            Needs to be relative to the Havok world, not an exposed World Transform.
            </summary>
            <param name="position">The position relative to the world offset of the body associated with the voxel</param>
            <param name="rotation">The rotation of the body associated with the voxel</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Constraints.HavokConstraint.Remap(Keen.VRage.Physics.Havok.Core.HknpConstraintId,Keen.VRage.Physics.Havok.Core.HknpWorld*)">
            <summary>
            Remaps the constraint when it is moved from worlds. Reassigns the internal data so its updated.
            </summary>
            <param name="newId">The new constraint id that was created when moving bodies between worlds</param>
            <param name="newWorld">The world the constraint now lives in</param>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Constraints.HavokSpringDamperConstraintMotor">
            <summary>
            Internally uses a Callback Constraint Motor to let users modify the target velocity and also apply spring forces.
            It modifies the fields that the motor has (named "userData") which are long, so we store a float on each value.
            Values are Spring Constant on userData0, Spring Damping on userData1 and Velocity Target on userData2.
            There are no more user data fields available.
            Check the implementation in native code to see how it works internally.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Constraints.StagedConstraint">
            <summary>
            A constraint that is not yet on the simulation.
            It serves as creation info for a constraint that exists between allocating it and adding it to the simulation.
            Active constraints can be staged back.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.DynamicBodyChange">
            <summary>
            Categorizes changes for dynamic bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_STATIC">
            Default behavior for static bodies.
             - all flags are supported
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_DEBRIS">
            Debris objects
             - no welding, this means this body will hit internal landscape edges.
             - might penetrate ground slightly.
             - the debris collisions are still fully continuous.
             - if this object collides with a higher priority object, it still might penetrate the object
               (even CRITICAL) objects
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_DEBRIS_TRIANGLE_WELDED">
            Debris objects with naive welding, some object might tunnel through landscape
            but this should be relatively rare.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_DYNAMIC">
            Default behavior for dynamic bodies.
             - requests neighbor welding or no welding,
               depending on your hknpWorldCinfo::m_enableWeldingForDefaultObjects.
             - full predictive collision system.
             - small penetrations possible.
             - might get pushed by heavy fast objects through static meshes, although very unlikely.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_NEIGHBOR_WELDED">
            Like DYNAMIC with (only) neighbor welding enabled.
            This adjusts contact normals based on the combined geometry of the hit shape and its neighbors.
            We recommend using PRESET_WELDED instead of this.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_MOTION_WELDED">
            Like DYNAMIC with (only) motion welding enabled.
            This adjusts contact normals based on the predicted motion of the body during each step.
            We recommend using PRESET_WELDED instead of this.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_TRIANGLE_WELDED">
            Like DYNAMIC with triangle welding enabled.
            This snaps all contact normals to the triangle normal.
            It is fast but only suited to collisions with relatively smooth triangulated shapes, not sharp edges.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_WELDED">
            Like DYNAMIC with both neighbor and motion welding enabled.
            This is recommended for all general use cases where welding is required.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_CRITICAL">
            Use this for critical key game objects
             - requests neighbor welding or no welding,
               depending on hknpWorldCinfo::m_enableWeldingForCriticalObjects.
             - body should never tunnel through static landscape collisions.
             - this type might limit the angular velocity to avoid tunneling, this comes without extra CPU costs.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_VEHICLE">
            Suitable for large, fast bodies moving over terrain.
             - uses motion and neighbor welding to avoid ghost collisions.
             - unlike MOTION_WELDING, it does not request USE_DISCRETE_AABB_EXPANSION.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_CHARACTER">
            Suitable for character controllers and items carried by the character.
            - uses neighbor welding.
            - does not request USE_DISCRETE_AABB_EXPANSION.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_GRENADE">
            Suitable for small fast objects, which should bounce and slide as good as possible.
             - uses motion and neighbor welding to avoid ghost collisions.
             - might clip angular velocity.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_PROJECTILE">
            Suitable for fast projectiles, where you don't care what happens after the first hit.
             - uses motion welding to avoid ghost collisions.
             - might clip angular velocity.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_FULL_CAST">
            Use hknpFullCast to provide high fidelity collision with static and keyframed bodies.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_LIVE_WELDING">
            Like PRESET_DYNAMIC with ENABLE_LIVE_WELDING
            Note: This feature is in beta, it may change in future versions.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_LIVE_REBUILD">
            Like PRESET_LIVE_WELDING with ENABLE_LIVE_REBUILD enabled.
            Note: This feature is in beta, it may change in future versions.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_DYNAMIC_SUBSTEP_COLLISION">
            Like PRESET_DYNAMIC with ENABLE_LIVE_WELDING and ENABLE_DYNAMIC_SUBSTEP_COLLISIONS.
            Note: This feature is in beta, it may change in future versions.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_DYNAMIC_SUBSTEP_COLLISION_REBUILD">
            Like PRESET_DYNAMIC_SUBSTEP_COLLISION with ENABLE_LIVE_REBUILD enabled.
            Note: This feature is in beta, it may change in future versions.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.PRESET_PREDICTIVE_WELDING">
            like PRESET_LIVE_WELDING with the config modified so that all collisions are predicted in the collide phase.
            This ensures that all manifold modifier callbacks and events are fired before the solve phase, and that no
            potential manifold callbacks or events are fired.  Typically that is not necessary, but some modifiers and
            event handlers may rely on it -- see hknpModifier::potentialManifoldCallback() for more information.
            Note: This feature is in beta, it may change in future versions.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.Core.HknpBodyQualityId.Preset.FIRST_USER_ID">
            Users may use quality IDs from here to MAX_NUM_QUALITIES-1.
        </member>
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Physics.Havok.Core.HkLogLevel.Error" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Physics.Havok.Core.HkLogLevel.Warning" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Physics.Havok.Core.HkLogLevel.Info" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Physics.Havok.Core.HkLogLevel.Debug" -->
        <!-- Badly formed XML comment ignored for member "F:Keen.VRage.Physics.Havok.Core.HkLogLevel.MaxLevel" -->
        <member name="T:Keen.VRage.Physics.Havok.Core.hknpCharacterState.hknpCharacterStateType">
            <summary>The character state types.</summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkArray`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkArrayView`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkEnum`2">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkFlags`2">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkFreeListArray`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkFreeListRelArray`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkHalf16">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HkHalf16.Set(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HkHalf16.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HkHalf16.op_Implicit(Keen.VRage.Physics.Havok.Core.HkHalf16.__Internal)~Keen.VRage.Physics.Havok.Core.HkHalf16">
            <summary>
            
            </summary>
            <param name="halfInternal"></param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkInplaceArray`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HknpActivationControl">
            <summary>
            Specifies whether a body's activation state is controlled by the simulation or the user.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HknpBody">
            <summary>
            Body in the havok simulation.
            </summary>
            <remarks>The <see cref="F:Keen.VRage.Physics.Havok.Core.HknpBody.__Internal.m_userData"/> field is only ever used to store the attachment state for Large Colliders.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Core.HknpBody.Flags">
            <summary>
            Body flags.
            </summary>
            <remarks>Setting flags manually does not invalidate collision caches, only use this member to change for flags that do not affect collision detection.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Core.HknpBody.UserData">
            <summary>
            GCHandle that can be used to tie a managed object to this body.
            </summary>
            <remarks>UserData has no other use currently.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HknpBody.GetUserData(System.UInt64)">
            <summary>
            Gets the associated handle that holds a managed object from a body user data.
            </summary>
            <param name="userData">The user data, taken from the body description on a world.</param>
            <returns>The associated handle for the body</returns>
            <remarks>UserData has no other use currently.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Core.HknpShape.Type">
            <summary>
            Shape type (<see cref="F:Keen.VRage.Physics.Havok.Core.HknpShape.__Internal.m_type"/>).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Core.HknpShape.HasConvexDispatchType">
            <summary>
            Tells if this shape behaves as a convex when dispatching methods for collision detection.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Core.HknpShape.HasCompositeDispatchType">
            <summary>
            Tells if this shape behaves as a composite when dispatching methods for collision detection.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HknpShapeInstance">
            <remarks>This type requires 16-byte alignment, use with <see cref="T:Keen.VRage.Library.Memory.Align16`1"/></remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkRefPtr`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HkRefPtr`1.MoveInto(`0*)">
            <summary>
            Move a ref object into this pointer.
            </summary>
            <remarks>This removes the previous value (decrementing it's ref count) but does not increase the reference count on <paramref name="refObject"/></remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Core.HkRefPtr.__Internal.MoveInto``1(``0*)">
            <summary>
            Move a ref object into this pointer.
            </summary>
            <remarks>This removes the previous value (decrementing it's ref count) but does not increase the reference count on <paramref name="refObject"/></remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkRelArray`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkRelArrayView32`1">
            <summary>
            Relative array with 32-bit offset.
            </summary>
            <remarks><para><b>!!This is a relative type!!</b></para>
            <para>This type only makes sense as a member of another havok type, it should never be copied into a temporary or returned from a property
            as it's very memory address is required to locate the data it points to.</para></remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkRelPtr`1">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Core.HkSimdFloat">
            <summary>
            Counterpart to hkSimdFloat.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.DefaultDebugDrawFlags">
            <summary>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HavokDebugSystem">
            <summary>
            Collects and displays debug draw meshes from Havok.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.DebugServerEnabled">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.EnableDebugViewers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.DebugViewers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.ShapeDebugViewerName">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokDebugSystem.EnableDebugServer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokDebugSystem.DisableAllProcesses">
            <summary>
            Disable all processes without disabling the viewer Enabled flag.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokDebugSystem.ReEnableProcesses">
            <summary>
            Reenable all processes the user marked as enabled.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.DebugViewer.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokDebugSystem.DebugViewer.Enabled">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HavokMotion">
            <summary>
            Information on how one or more rigid bodies move.
            Bodies attached to each other using <see cref="M:Keen.VRage.Physics.IPhysics.AttachEntities(Keen.VRage.Library.Memory.Buffer{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.DCS.Accessors.DEntity)"/> will share their Motion.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokPhysicsColliders.Empty">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.AllocateCollider``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.CreateChunkedSparseGridBlockCatalog">
            <summary>
            For testing purposes.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.TryLoadCollidersFromAsset(System.IO.Stream,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.TryDeserializeColliders(System.ReadOnlySpan{System.Byte},Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.IPhysicsCollider})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.SerializeColliders(System.ReadOnlySpan{Keen.VRage.Physics.Colliders.IPhysicsCollider},Keen.VRage.Library.Memory.BufferReference{System.Byte},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokPhysicsColliders.GetTransformedCollider(Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion,System.Single,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponent.Colliders">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponent._captureDebugOutput">
            <summary>
            When not null this is used to accumulate debug output messages.
            </summary>
            <remarks>Used during shutdown to collect the memory leak report.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponentObjectBuilder">
            <summary>
            Options for building a <see cref="T:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponent"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponentObjectBuilder.CustomLogger">
            <summary>
            Custom logger to be called when a message is produced from Physics.
            Null for no logger.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponentObjectBuilder.TrackingLevel">
            <summary>
            Memory tracking level for the physics system. Advanced memory tracking means
            worse performance but more information about allocations and a more detailed log when there is a leak.  
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokPhysicsEngineComponentObjectBuilder.MeasureStatistics">
            <summary>
            Flag to enable storing statistics each tick to be logged to a separate log file.
            Should be enabled only when measuring times is needed for debugging.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.HavokSessionComponent.Debug">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.AllocateCharacterController(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.CharacterControllerArgs@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.AllocateCollider``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.GetWorld(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Get the physics world that contains the rigid body for a given entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.CollectRigidBodyGravity(Keen.VRage.Physics.Havok.BodyProxy,Keen.VRage.Physics.Data.BodyMotion,Keen.VRage.Physics.Data.CustomGravity,Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary> <see cref="M:Keen.VRage.Physics.Havok.HavokSessionComponent.CollectRigidBodyGravity(System.Byte**,System.Int32,Keen.VRage.DCS.Scenes.Scene,Keen.VRage.Physics.Havok.HavokSessionComponent)"/> </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.CollectSharedMotionGravity(Keen.VRage.Physics.Havok.BodyProxy@,Keen.VRage.Physics.Data.BodyMotion,Keen.VRage.Physics.Data.SharedMotionCustomGravity@,Keen.VRage.Physics.Data.SharedMotionGravityData@,Keen.VRage.DCS.Accessors.ReadOnlyEntityData{Keen.VRage.Physics.Data.AttachmentData},Keen.VRage.DCS.Accessors.ReadOnlyEntityData{Keen.VRage.Physics.Data.CustomGravity},Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.SharedMotionCustomGravity},Keen.VRage.Physics.Havok.HavokSessionComponent)">
             <summary> <see cref="M:Keen.VRage.Physics.Havok.HavokSessionComponent.CollectSharedMotionGravity(System.Byte**,System.Int32,Keen.VRage.DCS.Scenes.Scene,Keen.VRage.Physics.Havok.HavokSessionComponent)"/> </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.UpdateActivationState(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.ActiveTag},Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Collects entities that Havok informed have their activation state changed.
            Attaches the tag to bodies that were activated.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HavokSessionComponent.UpdateDeactivationState(Keen.VRage.DCS.Accessors.EntityData{Keen.VRage.Physics.Data.ActiveTag},Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Collects entities that Havok informed have their activation state changed.
            Removes the tag from bodies that were marked inactive.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Set(System.Object,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Havok#HavokSessionComponent}#Set(System.Byte@,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Set(Keen.VRage.Physics.Havok.RagdollDebugMenu@,Keen.VRage.Physics.Havok.HavokSessionComponent@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._sessionComponentAccessor.Get(Keen.VRage.Physics.Havok.RagdollDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Object,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Byte@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Set(Keen.VRage.Physics.Havok.RagdollDebugMenu@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder._motorsParametersAccessor.Get(Keen.VRage.Physics.Havok.RagdollDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Object,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Physics#Components#RagdollPoweredMotorsParameters}#Set(System.Byte@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Set(Keen.VRage.Physics.Havok.RagdollDebugMenu@,Keen.VRage.Physics.Components.RagdollPoweredMotorsParameters@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Physics.Havok.RagdollDebugMenu.TypeInfoHolder.MotorsParametersAccessor.Get(Keen.VRage.Physics.Havok.RagdollDebugMenu@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HktAssetType">
            <summary>
            Asset type for Havok tag files.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.IPhysicsDebugDraw">
            <summary>
            DebugDraw for havok physics
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.IPhysicsDebugDraw.Enabled">
            <summary>
            Whether to draw the meshes or not.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.IPhysicsDebugDraw.SelfHandle">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.IPhysicsDebugDraw.DrawTransparent">
            <summary>
            Whether debug meshes are drawn semi-transparent.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.IPhysicsDebugDraw.CreateImplementationTable">
            <summary>
            Create an instance of <see cref="T:Keen.VRage.Physics.Havok.DebugDrawImplementationTable"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.LargeColliderAttachmentSectionAllocatedData">
            <summary>
            Written to when a LargeColliderAttachmentState has new section bodies, to trigger a job that
            does deferred allocation of Havok physics bodies, ensuring physics determinism.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.LargeColliderAttachmentSectionDestroyedData">
            <summary>
            Written to when a LargeColliderAttachmentState has removed removed section bodies, to trigger
            a job that does deferred destruction of Havok physics bodies, ensuring physics determinism.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.NoHit">
            No hit.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.BackFaceHit">
            Back face hit.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative) unless INSIDE_HIT is set.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.FrontFaceHit">
            Front face/outside hit.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative).
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.InsideHit">
            A convex shape is hit from the inside, that is, the origin of the ray lays inside.
            Note: In this case the normal points in the same direction of the ray (dot product is positive).
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.SubTriangleIndex">
            In case flat convex quad was hit, SUB_TRIANGLE_INDEX will be set if second sub triangle was hit.
        </member>
        <member name="F:Keen.VRage.Physics.Havok.NativeFacade.HkRayCastResult.AnyHitMask">
            Any hit mask.
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HkBufferReference`1.Create(Keen.VRage.Library.Memory.Buffer{`0}*,Keen.VRage.Library.Memory.BufferReference{`0})">
            <summary>
            Create a native ready buffer reference.
            </summary>
            <param name="bufferPtr">Pre pinned reference to the internal buffer pointed to by <paramref name="bufferReference"/>.</param>
            <param name="bufferReference">A reference to a buffer the user wants to provide to native code.</param>
            <example>
            Correct usage in the case of buffer references is to first pin the reference using the fixed statement:
            <code>
            void GetValues(BufferReference&lt;int&gt; values)
            {
                fixed (Buffer&lt;int&gt;* buffer = values)
                    NativeClass.GetValues(HkBufferReference.Create(buffer, values);
            }
            </code>
            <remarks>
            <para>The <paramref name="bufferPtr"/> parameter is only required to ensure users do not forget to pin the buffer, always follow the
            pattern in the example to avoid the GC moving the buffer while native code is using it.</para>
            <para>If you have a <see cref="T:Keen.VRage.Library.Memory.Buffer`1"/> or <see cref="T:Keen.VRage.Library.Memory.Buffer`2"/> directly use one of the other provided creation methods.</para>
            </remarks>
            </example>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.HkBufferFunctions.GetPinnableReference``1(Keen.VRage.Library.Memory.BufferReference{``0})">
            <summary>
            Allows pinning the <see cref="T:Keen.VRage.Library.Memory.Buffer`1"/> pointed to by the current <see cref="T:Keen.VRage.Library.Memory.BufferReference`1"/>.
            </summary>
            <remarks>
            Assumes that the actual data on the buffer is either pinned alongside this reference (inline storage of <see cref="T:Keen.VRage.Library.Memory.Buffer`2"/>) or
            is native memory (always pinned); the latter is currently guaranteed if for unmanaged types . 
            </remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HkPoweredMotorsParams">
            <summary>
            Havok ragdoll powered motors parameters.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HkRagdoll">
            Havok binding for ragdoll simulation
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HkSession">
            <summary>
            Native session that handles multiple world to expose a single simulation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.HkSession.HkSessionCinfo">
            <summary>
            Values needed to create a native session.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.PreviousInertiaFrame">
            <summary>
            Cached center of mass from a dynamic body.
            </summary>
            <remarks>When users change the <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/> of a body this value will still hold the previous CoM which is needed to recompute the motion world CoM.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Ragdolls.RagdollBoneTag">
            <summary>
            Helper structure to translate <see cref="T:Keen.VRage.Physics.Ragdolls.RagdollBoneType"/> into flag-like tag structure used in Havok ragdolls.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.Ragdolls.RagdollBoneTag.TagValue">
            <summary>
            Direct access to tags storage.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Ragdolls.Ragdolls">
            <summary>
            Havok implementation of ragdolls.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.InternalBodyUpdateEventGroup">
            <summary>
            All Data Events that want to be informed only about external body updates should attach to this group
            All Jobs that produce internal body updates should attach to this group
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.InternalSharedMotionGravityEventGroup">
            <summary>
            All events that react to <see cref="T:Keen.VRage.Physics.Data.SharedMotionGravityData"/> should attach to this group.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Util.HkStackAllocator">
            <summary>
            Helpers for safely keeping havok types on the stack.
            </summary>
            <remarks>This is designed for types that have an explicit lifetime (default ctor and dtor).</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.Util.HkStackAllocator.Init``1(``0*@,Keen.VRage.Library.Memory.Align16{``0}@)">
            <summary>
            Initialize a type of the stack. 
            </summary>
            <returns>A token that should be disposed to invoke the type's destructor. Use with a <c>using</c> variable or statement.</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.Util.PinnedBase`1">
            <summary>
            Base class for types that need to pass a pointer to self to native code.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.VRageHavok">
            <summary>
            Havok implementation of VRage physics
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.VRageHavok.Create(System.Action{Keen.VRage.Library.Diagnostics.LogSeverity,System.String},Keen.VRage.Physics.MemoryTrackingLevel)">
            <summary>
            Bootstrap the physics engine's basic functions: memory allocators, logging services and global component registrations.
            </summary>
            <remarks>The physics engine uses static singletons for many systems, so it is important to ensure no two are ever active simultaneously.</remarks>
            <returns>A handle to the physics engine with entry points for it's basic functionality.</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokDefaultWorldManager">
            <summary>
            Havok implementation of the default world manager.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.MigrateBodies(Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo@,Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo@,System.Span{Keen.VRage.Physics.Havok.Core.HknpBodyId})">
            <summary>
            Migrates bodies from one cluster to another, moving all exposed entities.
            Constraints and motions are moved too.
            </summary>
            <param name="origin">Cluster from where to move the entities</param>
            <param name="destination">Cluster where to move the entities</param>
            <param name="entitiesToMigrate">Exposed entities that are moved between clusters</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.UpdateMutatedAabbBodyClusters(Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Iterates on entities that Havok informed have their collider AABB changed.
            These can be dynamic or static entities, and static are ensured to be contained in a world as they come from Havok.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo">
            <summary>
            Associated information for clusters.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.Index">
            <summary>
            Index on the free list (<see cref="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager._clusters"/>)
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.TreeProxyId">
            <summary>
            Leaf node reference on the dynamic AABB tree, to be able to remove the node once the cluster is destroyed.
            <see cref="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager._clusterTree"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.Bounds">
            <summary>
            Bounds of this cluster. All bodies living on the cluster world should be strictly contained by it.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.DynamicEntities">
            <summary>
            A collection of dynamic entities, for fast removal.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.Offset">
            <summary>
            An offset which this cluster is created with, meaning that the simulation is offset by it on the associated world.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.World">
            <summary>
            The associated world in which entities live on. Null for empty entries on the free list.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.IsValid">
            <summary>
            Entries can be null
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterInfo.GetInvalid">
            <summary>
            Gets an invalid cluster info.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData">
            <summary>
            Storage for values static entities have to keep because they would normally be stored in the rigidbody.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.Collider">
            <summary>
            Needed for when this static entity is created in a world.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.DestructionLayer">
            <summary>
            Needed for when this static entity is created in a world.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.EntityLayer">
            <summary>
            See <see cref="P:Keen.VRage.Physics.Components.RigidBodyComponentDefinition.EntityLayer"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.StaticTreeId">
            <summary>
            Reference to the leaf node on the dynamic AABB tree.
            Allows removal of the leaf node when the static entity is destroyed.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.QualityType">
            <summary>
            Quality of the body for when it is added to the simulation.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.MaxDepenetrationSpeed">
            <summary>
            Depenetration speed that the body will use.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StaticData.Material">
            <summary>
            Material that the body will use when it is added to the simulation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.StagedConstraintsData">
            <summary>
            Storage for constraints between pairs of static bodies (on a cluster or not).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.FindClusterCandidates(Keen.VRage.Library.Mathematics.BoundingBoxD@,Keen.VRage.Library.Memory.BufferReference{System.Int32},Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.EntityReorderEntry},Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterCandidate})">
            <summary>
            Finds the best cluster candidates based on the given AABB layout of the dynamic entities.
            </summary>
            <param name="unionClusterBounds">The union cluster total bounds, expanded to include all entities that intersect with it</param>
            <param name="dynamicEntities">A collection of dynamic entities that must be included on the cluster partitions</param>
            <param name="entries">A collection of entity entries, containing info about their bounds, cluster and static state</param>
            <param name="candidates">An output representing a collection of possible clusters to be created with their bounds and contained entities</param>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokLargeWorldManager.ClusterCandidate">
            <summary>
            Information used during cluster reorder.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper">
            <summary>
            Helpers for managing objects in a havok world. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TranslateEntityAndSubCollider(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpBodyId,System.UInt32,Keen.VRage.DCS.Accessors.DEntity@,Keen.VRage.Physics.Colliders.SubColliderKey@)">
            <summary>
            Translate a body/shape pair 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TryTranslateEntityAndSubCollider(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpBodyId,System.UInt32,Keen.VRage.DCS.Accessors.DEntity@,Keen.VRage.Physics.Colliders.SubColliderKey@)">
            <summary>
            Try to translate a body/shape pair 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TranslateEntityAndSubCollider(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.DCS.Accessors.DEntity@,Keen.VRage.Physics.Colliders.SubColliderKey@)">
            <summary>
            Translate a body/shape pair in place
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TranslateBodyEntity(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpBodyId,Keen.VRage.DCS.Accessors.DEntity@)">
            <summary>
            Translates a body to its main entity for large colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TranslateBodyEntity(Keen.VRage.Physics.Havok.Core.HknpBodyId,System.UInt64,Keen.VRage.DCS.Accessors.DEntity@)">
            <summary>
            Translates a body to its main entity for large colliders, using the given user data.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.TranslateBodyEntity(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpBodyId@)">
            <summary>
            Translates a body to its main entity for large colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.SetBodyMotionType(Keen.VRage.DCS.Accessors.DEntityContext@,Keen.VRage.Physics.Data.BodyArgs.Motion,Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Changes the motion type for a body that already is on the simulation.
            </summary>
            <param name="context">The context of the body to modify its motion</param>
            <param name="motionType">The new motion type that the body will have</param>
            <param name="session">The session that is used to get the motion properties</param>
            <remarks>This method clears and sets the necessary Data for the body, and also ensures all bodies that are sharing motion
            with the passed body change their motion type as well. They will all get a new motion if the transition is from static to kinematic/dynamic
            when attached to large colliders, or their motion will be set to the preset static if they are motion sharing.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.GetMotionPropertiesIdForMotion(System.Boolean,System.Boolean,Keen.VRage.Physics.Havok.HavokSessionComponent)">
            <summary>
            Gets a default motion properties Id from a collection for a body motion.
            </summary>
            <param name="areKinematic">If the bodies on the motion are kinematic</param>
            <param name="haveGravity">If the bodies on the motion have gravity</param>
            <param name="session">The session to get the default motion properties</param>
            <returns>A motion properties id to be used in a motion</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.HavokWorldHelper.MigrateBodies(Keen.VRage.Physics.Havok.Core.HknpWorld*,Keen.VRage.Physics.Havok.Core.HknpWorld*,System.Int32,Keen.VRage.Physics.Havok.HavokSessionComponent,System.Span{Keen.VRage.Physics.Havok.Core.HknpBodyId})">
            <summary>
            Migrates bodies from one world to another, moving all exposed entities.
            Constraints and motions are moved too.
            </summary>
            <param name="origin">World from where to move the entities</param>
            <param name="destination">World where to move the entities</param>
            <param name="destinationIndex">The index of the world where entities are being moved to</param>
            <param name="session">The havok session to get contexts</param>
            <param name="exposedEntitiesToMigrate">Exposed entities that are moved between worlds</param>
        </member>
        <member name="T:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager">
            <summary>
            Internal interface for <see cref="T:Keen.VRage.Physics.IPhysicsWorldManager"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.UpdateGravity(Keen.VRage.Library.Mathematics.Vector3)">
            <summary>
            Update the global gravity value for all worlds.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.AllocateBody(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs@)">
            <summary>
            Allocate a new body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.AllocateCharacterController(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.CharacterControllerArgs@)">
            <summary>
            Allocate character physics attached to the target entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.SetBodyCollider(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Havok.Colliders.IHavokCollider)">
            <summary>
            Set new shape to existing body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.SetBodyRagdoll(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Ragdolls.BodyRagdollArgs@)">
            <summary>
            Sets a ragdoll to existing body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.RemoveBodyRagdoll(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Removes the ragdoll from the body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.SetBodyMotionType(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs.Motion)">
            <summary>
            Changes the motion type for a body that already is on the simulation.
            </summary>
            <param name="body">The body to modify its motion</param>
            <param name="motionType">The new motion type that the body will have</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.DestroyBody(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Destroy the body (or character controller) associated with a data entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryWorlds(Keen.VRage.Library.Mathematics.BoundingBoxD@,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Memory.Ptr{Keen.VRage.Physics.Havok.Core.HknpWorld}})">
            <summary>
            Query worlds overlapping a bounding box.
            </summary>
            <param name="bounds">The bounds to test against the worlds</param>
            <param name="outWorldPointers">The found worlds that overlapped with the bounds</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryWorlds(Keen.VRage.Library.Mathematics.LineD@,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Memory.Ptr{Keen.VRage.Physics.Havok.Core.HknpWorld}})">
            <summary>
            Query worlds overlapping a line.
            </summary>
            <param name="line">A line to test against the worlds</param>
            <param name="outWorldPointers">The found worlds that overlapped with the line</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryWorlds(Keen.VRage.Library.Mathematics.BoundingSphereD@,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Memory.Ptr{Keen.VRage.Physics.Havok.Core.HknpWorld}})">
            <summary>
            Query worlds overlapping a bounding sphere.
            </summary>
            <param name="sphere">A sphere to test against the worlds</param>
            <param name="outWorldPointers">The found worlds that overlapped with the sphere</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryNonSimulatedStaticEntities(Keen.VRage.Library.Mathematics.BoundingBoxD@,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Core.WorldTransform,Keen.VRage.Physics.Havok.Colliders.IHavokCollider}})">
            <summary>
            Query static entities overlapping a bounding box that are not in any world.
            </summary>
            <param name="bounds">A bounding box to test against the static entities</param>
            <param name="staticEntities">associated entities and colliders for found static bodies that do not exist in any world</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryNonSimulatedStaticEntities(Keen.VRage.Library.Mathematics.BoundingSphereD@,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Core.WorldTransform,Keen.VRage.Physics.Havok.Colliders.IHavokCollider}})">
            <summary>
            Query static entities overlapping a sphere that are not in any world.
            </summary>
            <param name="sphere">A sphere to test against the static entities</param>
            <param name="staticEntities">associated entities and colliders for found static bodies that do not exist in any world</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.QueryNonSimulatedStaticEntities(Keen.VRage.Library.Mathematics.LineD@,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Core.WorldTransform,Keen.VRage.Physics.Havok.Colliders.IHavokCollider}})">
            <summary>
            Query static entities overlapping a line that are not in any world.
            </summary>
            <param name="line">A line to test against the static entities</param>
            <param name="staticEntities">The associated entities and colliders for found static bodies that do not exist in any world</param>
            <remarks>This tests static entities based on their AABB</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.GetWorld(System.Int32)">
            <summary>
            Gets a world from a given tag.
            </summary>
            <param name="tag">A tag that corresponds to a world</param>
            <returns>A pointer to the world associated with the tag</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.AreBodiesConnected``1(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Tells if two bodies are directly or transitively connected by a constraint.
            </summary>
            <param name="bodyA">The first body to know if it's connected to body B</param>
            <param name="bodyB">The second body to know if it's connected to body A</param>
            <typeparam name="T">Type of the constraint to filter. Use <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/> to allow any constraints.</typeparam>
            <returns>True if bodies are directly or transitively connected, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.AllocateConstraint(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs)">
            <summary>
            Allocates a new constraint between two bodies.
            </summary>
            <param name="bodyA">The first body to attach together</param>
            <param name="bodyB">The second body to attach together</param>
            <param name="args">Needed data to create a constraint</param>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.IHavokWorldManager.DestroyConstraint(Keen.VRage.Physics.Constraints.IPhysicsConstraint)">
            <summary>
            Destroy a constraint that binds two bodies together.
            Bodies will not be activated.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Havok.WorldManager.TestingWorldManager.MoveBodies(System.Span{Keen.VRage.DCS.Accessors.DEntity},System.Int32)">
            <summary>
            Move bodies from the main world into another.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.ICharacterStateMachine">
            <summary>
            Shareable state machine defining character states and their properties.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.ICharacterStateMachine.GravityFactor">
            <summary>
            Factor applied to the gravity set on the character entity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysics">
            <summary>
            Session-level physics instance
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.StepDelta">
            <summary>
            Fixed timestep value for the physics simulation
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.GlobalGravity">
            <summary>
            Global uniform gravity added to all worlds.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.Debug">
            <summary>
            Interface to the debug system for the physics engine.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.Colliders">
            <summary>
            Interface to the collider manipulation system for the physics engine.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.Ragdolls">
            <summary>
            Interface to the ragdoll management system for the physics engine.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.WorldManager">
            <summary>
            Manager of discrete physics worlds in the same session.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysics.Materials">
            <summary>
            Interface to the material manipulation system for the physics engine.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AllocateCollider``1(``0@)">
            <summary>
            Allocate a new collider from the provided arguments.
            </summary>
            <remarks>Valid types for <typeparamref name="TArgs"/> are the types in VRage.Physics that implement <see cref="T:Keen.VRage.Physics.Colliders.IColliderArgs"/>.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.HasBody(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Does the entity has a body allocated from <see cref="M:Keen.VRage.Physics.IPhysics.AllocateBody(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs@)"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AllocateBody(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs@)">
            <summary>
            Allocate physics body for target Entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetBodyCollider(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Set new shape to existing body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetBodyRagdoll(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Ragdolls.BodyRagdollArgs@)">
            <summary>
            Sets a ragdoll to existing body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.RemoveBodyRagdoll(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Removes the ragdoll from the body.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetBodyMotionType(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.BodyArgs.Motion)">
            <summary>
            Changes the motion type for a body that already is on the simulation.
            <remarks>The body must have <see cref="T:Keen.VRage.Physics.Data.RigidBodyMassProperties"/> when switching from static to kinematic or dynamic</remarks>
            </summary>
            <param name="body">The body to modify its motion</param>
            <param name="motionType">The new motion type that the body will have</param>
            <remarks>Calling this method assumes updated Entity Data, consider using <see cref="T:Keen.VRage.DCS.Annotations.DataPreciseJob"/> if this method is called inside a Job</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AreBodiesConnected``1(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Tells if two bodies are directly or transitively connected by a constraint.
            </summary>
            <typeparam name="T">Type of the constraint to filter. Use <see cref="T:Keen.VRage.Physics.Constraints.Data.IConstraintData"/> to allow any constraints.</typeparam>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AreBodiesConnected(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.Physics.IPhysics.AreBodiesConnected``1(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AreBodiesSharingMotion(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Tells if two bodies are sharing motion, meaning that they share their velocities.
            And setting <see cref="T:Keen.VRage.Physics.Data.RigidBodyData"/> on any will affect the other.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.GetBodyMaterial(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Colliders.SubColliderKey)">
            <summary>
            Get the physics material for a body.
            </summary>
            <param name="body">The body to query the material for.</param>
            <param name="subCollider">The sub collider to query the material for (if sub colliders are assigned their own materials).
            Provide <see cref="F:Keen.VRage.Physics.Colliders.SubColliderKey.Invalid"/> to get the base material for the whole body.</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.GetBodyMaterial(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Get the base material for a rigid body.
            </summary>
            <seealso cref="M:Keen.VRage.Physics.IPhysics.GetBodyMaterial(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Colliders.SubColliderKey)"/>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.DestroyBody(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Destroy previously allocated physics body on given entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AllocateCharacterController(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Data.CharacterControllerArgs@)">
            <summary>
            Allocate character physics attached to the target entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AllocateConstraint(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Physics.Constraints.Arguments.IConstraintArgs)">
            <summary>
            Allocate new constraint into the physics scene.
            It will be automatically activated when both bodies in the scene are active as well.
            </summary>
            <param name="bodyA">The first body to attach together, which is considered the "child" body of the constraint.
            Body A is being constrained to Body B.</param>
            <param name="bodyB">The second body to attach together, which is considered the "parent" body of the constraint.
            Body A is being constrained to Body B</param>
            <param name="args">Needed data to create a constraint</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AllocateMotor``1(``0@)">
            <summary>
            Allocates a motor to move an axis of a <see cref="T:Keen.VRage.Physics.Constraints.IPhysicsConstraint"/>.
            </summary>
            <param name="args">The creation arguments for the motor</param>
            <returns>A motor that can be found to one or multiple axis of a constraint</returns>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.DestroyConstraint(Keen.VRage.Physics.Constraints.IPhysicsConstraint)">
            <summary>
            Destroy a constraint that binds two bodies together.
            Bodies will not be activated.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Cast ray sweeping query.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastAABB(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.Core.Game.GameSystems.Queries.AABBCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Cast AABB sweeping query.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Cast sweeping query with artificial collider.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryPoint(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Find the overlaps and/or shortest distances between a query point and all shapes in the world.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryAABB(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.Core.Game.GameSystems.Queries.AABBQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Find all bodies intersecting the input AABB at the broad phase level.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Find the overlaps and/or shortest distances between a query shape and all other shapes in the world.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastRayAsync(Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastAABBAsync(Keen.VRage.Core.Game.GameSystems.Queries.AABBCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.CastAABB(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.Core.Game.GameSystems.Queries.AABBCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CastColliderAsync(Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryPointAsync(Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.QueryPoint(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryAABBAsync(Keen.VRage.Core.Game.GameSystems.Queries.AABBQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.QueryAABB(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.Core.Game.GameSystems.Queries.AABBQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.QueryColliderAsync(Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)">
            <summary>
            Asynchronous version of <see cref="M:Keen.VRage.Physics.IPhysics.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            The query will be executed at nearest opportunity when simulation permits
            and results will be up-to-date for the moment of delivery (not necessary moment of query).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.AttachEntities(Keen.VRage.Library.Memory.Buffer{Keen.VRage.DCS.Accessors.DEntity},Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Attaches entities together making them share the same motion.
            Entities with the same motion conform compound bodies that move together.
            You can achieve this when creating a body by specifying another body to attach to, 
            or by using this method on bodies that already exist.
            </summary>
            <param name="entitiesToAttach">Entities to attach together</param>
            <param name="target">The target Entity which Motion will be shared,
            and will attach together along with the other</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.DetachEntities(Keen.VRage.Library.Memory.Buffer{Keen.VRage.DCS.Accessors.DEntity})">
            <summary>
            Detaches bodies and makes them have independent motion instances.
            </summary>
            <param name="entitiesToDetach">Entities that sill stop having shared motion</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetManifoldCollector(Keen.VRage.Physics.BreakHandler.IManifoldCollector)">
            <summary>
            Sets a collector that reacts to manifolds being collected for entity pairs.
            </summary>
            <param name="collector">The object in charge of collecting manifolds</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetCollisionSphereCollector(Keen.VRage.Physics.BreakHandler.ICollisionSphereCollector)">
            <summary>
            Sets a collector that aggregates collision spheres after calculating exceeding impulses on collisions.
            </summary>
            <param name="collector">The object in charge of collecting collision spheres</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.RemoveManifoldCollector">
            <summary>
            Removes the existing collector to stop reacting to manifolds being collected.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.RemoveCollisionSphereCollector">
            <summary>
            Removes the existing collector to stop reacting to collision spheres being collected.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.TryGetEntityLayer(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Library.Utils.StringId@)">
            <summary>
            Get <paramref name="entity"/>'s layer
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.SetEntityLayer(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.Library.Utils.StringId)">
            <summary>
            Sets new entity layer to <paramref name="entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysics.CollectStatistics(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Data.PhysicsStatisticsNode},System.Int32)">
            <summary>
            Collects statistics for physics, indicating time measurements on all threads that happened until this point.
            Nodes are reported in a depth-first tree format.
            <remarks>Must be called after the Step to collect Step statistics</remarks>
            </summary>
            <param name="statistics">A buffer filled with depth-first nodes indicating a measurement</param>
            <param name="maxDepth">The depth for fetching statistics nodes on the tree. Minus one gets the whole tree.</param>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysicsColliders">
            <summary>
            Allows the creation and manipulation of physics colliders.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.IPhysicsColliders.DEFAULT_CONVEX_RADIUS">
            <summary>
            The default convex radius used in convex colliders.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsColliders.Empty">
            <summary>
            Shared instance of the empty collider (see <see cref="T:Keen.VRage.Physics.Colliders.EmptyColliderArgs"/>). This can be used when an empty collider is needed and there is
            no need to distinguish it from other empty colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.AllocateCollider``1(``0@)">
            <summary>
            Allocate a new collider from the provided arguments.
            </summary>
            <remarks>Valid types for <typeparamref name="TArgs"/> are the types in VRage.Physics that implement <see cref="T:Keen.VRage.Physics.Colliders.IColliderArgs"/>.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.TryLoadCollidersFromAsset(System.IO.Stream,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,System.String}})">
            <summary>
            Attempt to load all colliders from a platform specific asset file.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.TryLoadCollidersFromGLTFAsset(System.IO.Stream,Keen.VRage.Library.Memory.BufferReference{System.ValueTuple{Keen.VRage.Physics.Colliders.IPhysicsCollider,System.String}})">
            <summary>
            Attempt to load all colliders from a GLTF asset file.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.TryDeserializeColliders(System.ReadOnlySpan{System.Byte},Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.IPhysicsCollider})">
            <summary>
            Attempt to deserialize a list of colliders from a memory location.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.SerializeColliders(System.ReadOnlySpan{Keen.VRage.Physics.Colliders.IPhysicsCollider},Keen.VRage.Library.Memory.BufferReference{System.Byte},System.Boolean)">
            <summary>
            Serialize a set of colliders to a memory buffer.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.GetTransformedCollider(Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.Quaternion,System.Single,System.Boolean)">
            <summary>
            Create a copy of the specified collider with the specified transform applied to it.
            </summary>
            
            <param name="collider">The original collider to create a transformed copy of.</param>
            <param name="translation">The translation to apply to the cloned collider.</param>
            <param name="rotation">The rotation to apply to the cloned collider.</param>
            <param name="scale">The uniform scale to apply to the cloned collider.</param>
            <param name="rescaleMass">When <paramref name="scale"/> is not <c>1</c> this parameter controls whether the total mass will be rescaled to retain it's original value after the transformation.</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.CreateBlockCatalog">
            <summary>
            Create a new <see cref="T:Keen.VRage.Physics.Colliders.IGridBlockCatalog"/> that can be used with a <see cref="T:Keen.VRage.Physics.Colliders.ISparseGridCollider"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.DecomposeGeometryIntoConvexHulls(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,Keen.VRage.Physics.Geometry.PhysicsGeometryArg,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Mathematics.Vector4},Keen.VRage.Library.Memory.BufferReference{System.Int32},Keen.VRage.Physics.Colliders.DecompositionOutputInfo@)">
            <summary>
            Calculate the convex decomposition of a, geometry.
            </summary>
            <param name="parameters">The input configuration for the algorithm.</param>
            <param name="geometry">The input geometry.</param>
            <param name="outVertices">The full list of output vertices.</param>
            <param name="outHullIndices">The start index for each output hull.</param>
            <param name="outputInfo">Information about the decomposition process and resulting hulls.</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.DecomposeGeometryIntoConvexColliders(Keen.VRage.Physics.Geometry.ConvexDecompositionParameters@,Keen.VRage.Physics.Geometry.PhysicsGeometryArg,Keen.VRage.Physics.Colliders.ConvexColliderParameters,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Colliders.IPhysicsCollider},Keen.VRage.Physics.Colliders.DecompositionOutputInfo@)">
            <summary>
            Calculate the convex decomposition of a, geometry.
            </summary>
            <param name="parameters">The input configuration for the algorithm.</param>
            <param name="geometry">The input geometry.</param>
            <param name="cvxParameters">Parameters for the created convex shapes.</param>
            <param name="outColliders">The convex colliders output from decomposition.</param>
            <param name="outputInfo">Information about the decomposition process and resulting hulls that conform the colliders.</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.SimplifyGeometry(Keen.VRage.Physics.Geometry.MeshSimplificationParameters@,Keen.VRage.Physics.Geometry.SimpleGeometry)">
            <summary>
            Simplify the provided geometry.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.ComputeTotalMass(System.ReadOnlySpan{System.ValueTuple{Keen.VRage.Physics.Data.RigidBodyMassProperties,Keen.VRage.Core.RelativeTransform}})">
            <summary>
            Compute the total mass from a list of discrete mass elements.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsColliders.SetScaledMassProperties(Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Scales the mass properties of the given collider back to one unit of mass.
            In case a compound collider is provided, it will use the children information to find the Center of Mass and total volume, and the child
            colliders will have their masses scaled to the compound total. 
            </summary>
            <param name="collider">A collider that will have their masses scaled (independently)</param>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysicsSessionDebug">
            <summary>
            Interface for controlling debug features of a physics engine session (<see cref="T:Keen.VRage.Physics.IPhysics"/>).
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.DebugServerEnabled">
            <summary>
            Whether the debug server is enabled.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.EnableDebugViewers">
            <summary>
            Whether debug viewers are globally enabled or not.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.Menu">
            <summary>
            Debug Menu for physics.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.DebugViewers">
            <summary>
            The debug viewers that are available.
            </summary>
            <remarks>Debug viewers are provided by the physics engine, and not all may make sense for use in-process (some are explicitly designed
            for use with an external debugger).</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.ShapeDebugViewerName">
            <summary>
            Name of the debug viewer that draws the shapes of bodies in the scene (the most commonly used viewer).
            </summary>
        </member>
        <member name="E:Keen.VRage.Physics.IPhysicsSessionDebug.OnDebuggerStep">
            <summary>
            Event triggered every frame after the physics debugger steps. This is after the main simulation step and will not be fired if the
            debugger is not enabled. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.EnableDebugServer">
            <summary>
            Enable the debug server. Once enabled it cannot be disabled.
            </summary>
            <remarks>
            <para>The debug server allows external tools to connect to the application and inspect/interact with the physics scene.</para>
            <para>On some configurations the debug server may be enabled by default.</para>
            </remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.BeginFileRecording(System.String)">
            <summary>
            Begin recording the current physics session to the provided file. 
            </summary>
            <remarks>This path to the file. This is a regular native file path (either absolute or relative to the current directory).</remarks>
            <param name="filePath">The path to record the session to.</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.EndRecording">
            <summary>
            Finish the data recorded since the last call to <see cref="M:Keen.VRage.Physics.IPhysicsSessionDebug.BeginFileRecording(System.String)"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.ClearCaches">
            <summary>
            Clear all information that is cached between simulations steps.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.DrawSphere(Keen.VRage.Library.Mathematics.Vector3D,System.Single,Keen.VRage.Library.Mathematics.ColorSRGB)">
            <summary>
            Draws a sphere on the attached physics debug tool.
            </summary>
            <param name="point">The center of the sphere in world space</param>
            <param name="radius">The radius of the sphere</param>
            <param name="color">The color with which the sphere will be drawn</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.DrawAABB(Keen.VRage.Library.Mathematics.BoundingBoxD,Keen.VRage.Library.Mathematics.ColorSRGB)">
            <summary>
            Draws an AABB on the attached physics debug tool.
            </summary>
            <param name="aabb">An axis-aligned bounding box in world space</param>
            <param name="color">The color with which the box will be drawn</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.DrawLine(Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.ColorSRGB)">
            <summary>
            Draws a line on the attached physics debug tool.
            </summary>
            <param name="from">The origin of the line to draw in world space</param>
            <param name="to">The destination of the line to draw in world space</param>
            <param name="color">The color with which the line will be drawn</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.DrawArrow(Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.Vector3,Keen.VRage.Library.Mathematics.ColorSRGB)">
            <summary>
            Draws an arrow on the attached physics debug tool.
            </summary>
            <param name="from">The origin of the arrow to draw in world space</param>
            <param name="direction">The direction and length (direction * length) of the arrow to draw</param>
            <param name="color">The color with which the arrow will be drawn</param>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsSessionDebug.DrawText(System.String,Keen.VRage.Library.Mathematics.Vector3D,Keen.VRage.Library.Mathematics.ColorSRGB)">
            <summary>
            Draws a 3D text on the attached physics debug tool.
            </summary>
            <param name="text">The text to draw</param>
            <param name="position">The position of the text to be drawn in world space</param>
            <param name="color">The color with which the line will be drawn</param>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer">
            <summary>
            Represents an individual debug viewer.
            </summary>
            <remarks>The name of the debug viewer can represent a hierarchy, when that is the case each level is separated by a '/'.</remarks>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer.Name">
            <summary>
            Name of the debug viewer.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IPhysicsSessionDebug.IDebugViewer.Enabled">
            <summary>
            Whether the viewer is enabled or not.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysicsWorldManager">
            <summary>
            Manager for physics worlds inside the havok session.
            </summary>
            <remarks>The physics simulation works with single precision numbers, as a result entities are split into multiple simulation worlds
            with local offsets. This manager is responsible for deciding when to create new worlds and how to split entities between them.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IPhysicsWorldManager.GetWorlds(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.IPhysicsWorldManager.WorldInfo})">
            <summary>
            Gets worlds in this manager.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.IPhysicsWorldManager.WorldInfo">
            <summary>
            Information about one of the physics worlds.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.IPhysicsWorldManager.WorldInfo.Bounds">
            <summary>Bounding box of the world.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.IPhysicsWorldManager.WorldInfo.Center">
            <summary>Absolute position of the world origin.</summary>
        </member>
        <member name="F:Keen.VRage.Physics.IPhysicsWorldManager.WorldInfo.Tag">
            <summary>Unique identifier for this world.</summary>
            <remarks>This number is an opaque identifier that may only make sense to this particular manager.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.IVRagePhysics">
            <summary>
            Engine-level physics interface
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.IVRagePhysics.DEFAULT_PORT">
            <summary>
            Indicates that we want to use a default port
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IVRagePhysics.Colliders">
            <summary>
            Asset processor that can import and manipulate user authored assets from a content pipeline.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IVRagePhysics.Materials">
            <summary>
            Interface to the material management system for the physics engine.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.IVRagePhysics.Ragdolls">
            <summary>
            Interface to the ragdoll management system for the physics engine.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.GetFloatingPointControlWord">
            <summary>
            Gets the floating-point control word for the calling thread.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.EnableFloatingPointDenormalFlushing(System.Boolean)">
            <summary>
            Enables or disables the floating-point denormal flushing, setting the control word.
            This affects the way some rounding operations are made in the FPU.
            </summary>
            <param name="enable">True to enable denormal flushing, false to set it off</param>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.AddToSession(Keen.VRage.DCS.Builders.SceneBuilder@,Keen.VRage.DCS.Builders.EntityBuilder@,Keen.VRage.Physics.SceneSettings@,System.Nullable{System.UInt16})">
            <summary>
            Adds necessary components to starting Session.
            It is expected that created <see cref="T:Keen.VRage.DCS.Components.Entity"/> implements <see cref="T:Keen.VRage.Physics.IPhysics"/> feature after this call.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.AllocateCharacterStateMachine(Keen.VRage.Physics.Data.CharacterStateMachineArgs@)">
            <summary>
            Allocate a character state machine.
            <remarks>A character state machine is not bound to a simulation and can be re-used and/or shared across characters.</remarks>
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.CollectMessages(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Collect Havok messages rather than immediately asserting/throwing. The user is expected to handle any warnings/errors appropriately.
            This is meant for short-term deferral, e.g. during model processing in the editor, and to afford the caller the opportunity to remap
            the messages to something more presentable before displaying them to the end-user.
            </summary>
            <param name="messageIdsToIgnore">Set of message id's to ignore and not collect.</param>
            <returns>A new <see cref="T:Keen.VRage.Physics.Utils.MessageCollector"/>, which should be used to respond to the messages after the work is done.</returns>
            <remarks>The collector will automatically unregister itself and stop collecting messages upon disposal.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.CollectMessages">
            <summary>
            Collect Havok messages rather than immediately asserting/throwing. The user is expected to handle any warnings/errors appropriately.
            This is meant for short-term deferral, e.g. during model processing in the editor, and to afford the caller the opportunity to remap
            the messages to something more presentable before displaying them to the end-user.
            </summary>
            <returns>A new <see cref="T:Keen.VRage.Physics.Utils.MessageCollector"/>, which should be used to respond to the messages after the work is done.</returns>
            <remarks>The collector will automatically unregister itself and stop collecting messages upon disposal.</remarks>
        </member>
        <member name="M:Keen.VRage.Physics.IVRagePhysics.OnCollectorDisposed(Keen.VRage.Physics.Utils.MessageCollector)">
            <summary>
            The physics components uses this internally to automatically unregister the collector when it gets disposed.
            </summary>
            <param name="collector">The message collector being disposed.</param>
        </member>
        <member name="T:Keen.VRage.Physics.IWorldManagerSettings">
            <summary>
            Interface that tags a type as the initialization parameters for a particular world manager.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.IMaterialLibrary">
            <summary>
            Holds and manages materials to be used by bodies on the simulation. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.Add(Keen.VRage.Physics.Materials.MaterialConfiguration@)">
            <summary>
            Adds a material to the library. It can later be used to add bodies that use the material or configure sub-colliders/triangles.
            </summary>
            <param name="configuration">The material configuration</param>
            <returns>An Id to identify the created material instance, or <see cref="P:Keen.VRage.Physics.Materials.MaterialId.Invalid"/> if it could not be created</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.Get(Keen.VRage.Physics.Materials.MaterialId)">
            <summary>
            Gets a read-only configuration for a material in the library given an Id.
            </summary>
            <param name="id">The Id of an existing material in the library to get its configuration</param>
            <returns>The configuration of the given material Id. This will assert/crash if there is no associated material for the Id</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.Update(Keen.VRage.Physics.Materials.MaterialId,Keen.VRage.Physics.Materials.MaterialConfiguration@)">
            <summary>
            Updates material properties on an existing entry on the library.
            </summary>
            <param name="id">The Id of the existing material to modify</param>
            <param name="configuration">The new configuration to be applied to the material</param>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.Remove(Keen.VRage.Physics.Materials.MaterialId)">
            <summary>
            Removes a material from the library
            </summary>
            <param name="id">The Id of the existing material to remove</param>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.FindByName(System.String)">
            <summary>
            Finds a material by name.
            </summary>
            <param name="name">The name of the material to find</param>
            <returns>A valid <see cref="T:Keen.VRage.Physics.Materials.MaterialId"/> if a material with the given name could be found, <see cref="P:Keen.VRage.Physics.Materials.MaterialId.Invalid"/> otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.AllocatePalette">
            <summary>
            Allocates a palette to be used for composite colliders that can hold many materials
            as they hold many sub-colliders or triangles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialLibrary.Reset">
            <summary>
            r
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.IMaterialPalette">
            <summary>
            A palette links library materials to sub-colliders or triangles on composite colliders.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialPalette.Add(Keen.VRage.Physics.Materials.MaterialId)">
            <summary>
            Adds a material to the palette.
            The material must come from the global <see cref="T:Keen.VRage.Physics.Materials.IMaterialLibrary"/>,
            and the resulting value is the internal tracker for a material that
            must be used when configuring leaves.
            </summary>
            <param name="material">An identifier belonging to an already-registered material on the library</param>
            <returns>An internal identifier that serves to connect the global material with sub-colliders or triangles</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialPalette.Add(Keen.VRage.Physics.Materials.MaterialConfiguration@)">
            <summary>
            Adds a new, non-existing material to the palette.
            The material must not have been registered on the global <see cref="T:Keen.VRage.Physics.Materials.IMaterialLibrary"/>,
            and the resulting value is the internal tracker for a new material that must be used when configuring leaves.
            </summary>
            <remarks>The material will be registered when associated colliders are created</remarks>
            <param name="configuration">A configuration to create the material on the palette</param>
            <returns>An internal identifier that serves to connect the global material with sub-colliders or triangles</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Materials.IMaterialPalette.Get(System.UInt16)">
            <summary>
            Get a material from a given shape tag.
            </summary>
            <param name="shapeTag">A shape tag, retrieved for example from <see cref="M:Keen.VRage.Physics.Colliders.ICompositeCollider.GetSubColliderOrTriangle(Keen.VRage.Physics.Colliders.SubColliderKey,Keen.VRage.Physics.Colliders.IPhysicsCollider@,Keen.VRage.Physics.Colliders.TriangleOrQuad@,System.UInt16@)"/>.</param>
            <returns>The material associated with the shape tag on the palette.</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.CombinePolicy">
            <summary>
            Tells how values are combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.CombinePolicy.GeometricMean">
            <summary>
            Use sqrt(valueA * valueB).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.CombinePolicy.Min">
            <summary>
            Use min(valueA, valueB).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.CombinePolicy.Max">
            <summary>
            Use max(valueA, valueB).
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.CombinePolicy.ArithmeticMean">
            <summary>
            Use (valueA + valueB) / 2.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.CombinePolicy.Mul">
            <summary>
            Use frictionA * frictionB.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MassChangerCategory.Ignore">
            <summary>
            Do not apply the mass changer on this object. (default)
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MassChangerCategory.Debris">
            <summary>
            Reduce the mass of this object if it collides with Heavy.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy">
            <summary>
            If this object collides with an object of category Debris, increase this mass by the factor stored in <see cref="F:Keen.VRage.Physics.Materials.MaterialConfiguration.MassChangerHeavyObjectFactor"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.MaterialConfiguration">
            <summary>
            Needed to create or update materials, which define how bodies behave during a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.StaticFriction">
            <summary>
            Operates when bodies are at rest; it is the force that prevents bodies from moving or sliding.
            If a force is applied to a body large enough to overcome static friction, the body begins to move/slide.
            /// Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.DynamicFriction">
            <summary>
            When bodies are touching but moving, dynamic friction replaces static friction for the duration of the contact,
            being a force that slows a body down.
            As soon as the relative velocity between the two bodies in contact reaches zero again, static friction comes back.
            Can hold values from 0 to 1.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.MaxImpulse">
            <summary>
            Max impulse allowed on contacts for each sub-step. Clipped impulse will be reported via <see cref="T:Keen.VRage.Physics.Data.BreakableBodyImpulseData"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.Restitution">
            <summary>
            Tells how much kinetic energy is absorbed along the line of impact
            between the two objects. Can hold values from 0 to 1.
            Also see <see cref="F:Keen.VRage.Physics.Materials.MaterialConfiguration.RestitutionCombinePolicy"/> on how it is combined with a colliding material.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.WeldingTolerance">
            <summary>
            Welding tolerance is used when the Body Quality is set to a type which supports welding, generally characters.
            Welding will fix up internal edge collisions, e.g. when an object slides over a landscape made of connected
            triangles and the object hits an internal triangle edge. If two triangles are not perfectly aligned, the
            m_weldingTolerance specifies a vertical distance or 'step height' where 2 triangle would be treated connected.
            So if the landscape has a small step smaller than this WeldingTolerance, it will be completely smoothed.
            <remarks>
            Final welding tolerance will be calculated from the max between both body materials and the other collider materials.
            If welding tolerance is larger than colliders maximum penetration allowed then the collider MaxPenetrationAllowed is used.
            </remarks>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.MassChangerHeavyObjectFactor">
            <summary>
            The mass changer factor if <see cref="F:Keen.VRage.Physics.Materials.MaterialConfiguration.MassChangerCategory" /> is set to <see cref="F:Keen.VRage.Physics.Materials.MassChangerCategory.Heavy"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.RestitutionCombinePolicy">
            <summary>
            Sets how restitution is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.FrictionCombinePolicy">
            <summary>
            Sets how friction is combined on the two materials for bodies participating in a collision.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Materials.MaterialConfiguration.MassChangerCategory">
            <summary>
            Defines the behavior of the mass proportion of the attached bodies when colliding with other bodies.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Materials.MaterialConfiguration.Name">
            <summary>
            Name for this material, must be unique.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Materials.MaterialId">
            <summary>
            Identifier for physics materials.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Materials.MaterialId.Invalid">
            <summary>
            Empty <see cref="T:Keen.VRage.Physics.Materials.MaterialId"/>, meaning there is either no material assigned or the material creation had a problem.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Materials.MaterialId.IsValid">
            <summary>
            Tells if a material Id is valid or not. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.MemoryTrackingLevel">
            <summary>
            How detailed the physics system's native memory tracking will be.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.MemoryTrackingLevel.Minimal">
            <summary>
            Amount of leaked memory is tracked.
            </summary>
            <remarks>Minimal performance impact.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.MemoryTrackingLevel.Advanced">
            <summary>
            Individual allocations are tracked and reported when leaking.
            </summary>
            <remarks>Medium performance impact.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.MemoryTrackingLevel.AdvancedWithCallStacks">
            <summary>
            Individual allocations as well as call stacks are collected and reported when leaking.
            </summary>
            <remarks>High performance impact.</remarks>
        </member>
        <member name="T:Keen.VRage.Physics.PhysicsCollidersExtensions">
            <summary>
            Extension methods for <see cref="T:Keen.VRage.Physics.IPhysicsColliders"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsCollidersExtensions.GetDebugGeometry(Keen.VRage.Physics.Colliders.IPhysicsCollider)">
            <summary>
            Allocate a new <see cref="T:Keen.VRage.Physics.Geometry.SimpleGeometry"/> and read the debug geometry from <paramref name="collider"/> into it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsCollidersExtensions.BuildFromModel(Keen.VRage.Physics.IPhysicsColliders,Keen.VRage.Library.Utils.HalfVector4[],System.Collections.Generic.List{Keen.VRage.Core.Model.MeshPartInfo},Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Library.Utils.StringId})">
            <summary>
            Create a mesh collider form a model made out of vertices and parts.
            (TODO: SE2-6254) It is only valid to be used for queries, adding it to a body will lead to assertions.
            </summary>
            <param name="processor">The physics collider to extend and aggregate this method to, also to allocate the mesh physics collider</param>
            <param name="vertices">A collection of vertices that form the model</param>
            <param name="partInfos">The part infos that hold indices that point to vertices to form triangles</param>
            <param name="materials">The materials used for tagging triangles. Triangles referenced by <see cref="T:Keen.VRage.Physics.Colliders.SubColliderKey"/>s will return 
            tags associated to the materials on index order (e.g. triangles with material at index zero have tag zero,
            triangles with material at index one have tag one)</param>
            <returns>A created collider from the given model</returns>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsCollidersExtensions.GetBoundingBox(Keen.VRage.Physics.Colliders.IPhysicsCollider,Keen.VRage.Core.WorldTransform@)">
            <summary>
            Get a broadphase bounding box for this collider, transformed to a world coordinates.
            </summary>
            <param name="collider">The collider to get the bounds</param>
            <param name="worldTransform">A world transform to translate the bounds to world space</param>
            <returns>A bounding-box that represents the broadphase bounds of the collider, transformed into world space</returns>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsCollidersExtensions.AllocateStandingPencil(Keen.VRage.Physics.IPhysicsColliders,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,Keen.VRage.Library.Mathematics.Vector3)">
            <summary>
            Creates a XZ-oriented pencil that contains three sections with different radii.
            The base is at zero height.
            </summary>
            <param name="colliders">The Colliders API to allocate the Collider</param>
            <param name="totalHeight">The total height of the pencil</param>
            <param name="baseHeight">The height of the first section of the pencil (from the bottom-up). This defines the taper angle at the base.
            Must never be greater than "totalHeight".</param>
            <param name="topHeight">The height of the third section of the pencil (from the bottom-up). This defines the taper angle at the top.
            Must never be greater than "totalHeight - baseHeight".</param>
            <param name="radius">The radius on the mid section of the pencil.</param>
            <param name="baseRadius">The radius at the first section of the pencil (from the bottom-up)</param>
            <param name="topRadius">The radius at the third section of the pencil (from the bottom-up)</param>
            <param name="subdivisions">The amount of subdivisions that the pencil will have, defining how close to a real cylinder it will be,
            but defining more planes and affecting performance.</param>
            <param name="convexRadius">The convex radius that the pencil will have on every edge</param>
            <param name="offset">Offset to add to the shape.</param>
            <returns>Convex collider arguments to create a pencil</returns>
        </member>
        <member name="T:Keen.VRage.Physics.PhysicsDebugExtensions">
            <summary>
            Extension methods for <see cref="T:Keen.VRage.Physics.IPhysicsSessionDebug"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsDebugExtensions.GetViewer(Keen.VRage.Physics.IPhysicsSessionDebug,System.String)">
            <summary>
            Find a viewer by name.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsDebugExtensions.GetShapeViewer(Keen.VRage.Physics.IPhysicsSessionDebug)">
            <summary>
            Get the debug viewer that draws the shapes of bodies in the scene.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.PhysicsDebugExtensions.CaptureFramesToPath(Keen.VRage.Physics.IPhysicsSessionDebug,System.String,System.Int32)">
            <summary>
            Capture a fixed number of frames from the current session to a file.
            </summary>
            <remarks>Only one such recording can be performed at a time.</remarks>
            <param name="debug">The session debug instance.</param>
            <param name="path">Path to the destination file.</param>
            <param name="numberOfFrames">The number of simulation frames to capture.</param>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.ColliderQueryArgs">
            <summary>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryColliderAsync(Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderQueryArgs.Transform">
            <summary>
            Transformation of the collider
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderQueryArgs.Collider">
            <summary>
            The queried collider
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderQueryArgs.MaxDistance">
            <summary>
            Maximum distance to probe around the collider bounds.
            <see cref="F:Keen.VRage.Physics.Queries.NearestQueryHit.SeparatingDistance"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.ColliderCastArgs">
            <summary>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastColliderAsync(Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderCastArgs.Transform">
            <summary>
            Transform (origin point and rotation) of the collider query
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderCastArgs.Direction">
            <summary>
            Direction and length of the collider query
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderCastArgs.Collider">
            <summary>
            The swept collider
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.ColliderNearestQueryHit">
            <summary>
            <see cref="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.QueryPoint(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderNearestQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Library.Mathematics.Quaternion)"/>
            <see cref="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderNearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Library.Mathematics.Quaternion)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderNearestQueryHit.Position">
            <summary>
            Position of query hit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderNearestQueryHit.SeparatingNormal">
            <summary>
            Separating normal between query and hit collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderNearestQueryHit.SeparatingDistance">
            <summary>
            Distance between query and hit collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderNearestQueryHit.SubCollider">
            <summary>
            Hit SubCollider key set only when the collider is composite.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderNearestQueryHit.MaterialId">
            <summary>
            Material of the sub-collider when the collider is composite.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.ColliderSweepQueryHit">
            <summary>
            <see cref="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderSweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Library.Mathematics.Quaternion)"/>
            <see cref="M:Keen.VRage.Physics.Colliders.IPhysicsCollider.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.ColliderSweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Library.Mathematics.Quaternion,Keen.VRage.Physics.CollisionPreset)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.Position">
            <summary>
            Position of the cast hit in collider local space.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.Normal">
            <summary>
            Surface normal of cast hit in local coordinates.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.Fraction">
            <summary>
            Fraction (of the original ray) or absolute distance to the hit position, depending on how the query cast was set up.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.SubCollider">
            <summary>
            Hit SubCollider key set only when the collider is composite.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.MaterialId">
            <summary>
            Material of the sub-collider when the collider is composite.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsInsideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a convex collider is hit from the inside, that is, the origin of the ray lays inside.
            Note: In this case the normal points in the same direction of the ray (dot product is positive).
            </summary>
            <returns>True if the collider was hit from the inside</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsOutsideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a convex collider is hit from the outside, that is, the origin of the ray lays outside.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative).
            </summary>
            <returns>True if the collider was hit from the outside</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsFrontSideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a triangle was hit from its front.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative)
            unless <see cref="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsInsideHit"/> returns true.
            </summary>
            <returns>True if the triangle was hit from the front</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsBackSideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a triangle was hit from its front.
            Note: In this case the normal points in the direction of the ray (dot product is positive)
            unless <see cref="M:Keen.VRage.Physics.Queries.ColliderSweepQueryHit.IsInsideHit"/> returns true.
            </summary>
            <returns>True if the triangle was hit from the back</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.NearestQueryHit">
            <summary>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryPoint(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryPointAsync(Keen.VRage.Core.Game.GameSystems.Queries.PointQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.NearestQueryHit},Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.QueryColliderAsync(Keen.VRage.Physics.Queries.ColliderQueryArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.Position">
            <summary>
            World position of query hit.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.SeparatingNormal">
            <summary>
            Separating normal between query and hit collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.SeparatingDistance">
            <summary>
            Distance between query and hit collider.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.Body">
            <summary>
            Entity detected by the query
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.SubCollider">
            <summary>
            Hit SubCollider key set only when the collider is composite.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.NearestQueryHit.MaterialId">
            <summary>
            Material of the body, or from the sub-collider if the associated collider is composite.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Queries.SweepQueryHit">
            <summary>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastRay(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastRayAsync(Keen.VRage.Core.Game.GameSystems.Queries.RayCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastCollider(Keen.VRage.Library.Memory.BufferReference{Keen.VRage.Physics.Queries.SweepQueryHit},Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            <see cref="M:Keen.VRage.Physics.IPhysics.CastColliderAsync(Keen.VRage.Physics.Queries.ColliderCastArgs@,Keen.VRage.Physics.CollisionPreset)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.Position">
            <summary>
            World position of the raycast hit. This is the point of collision - to find the collided position of a swept collider, use Fraction.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.Normal">
            <summary>
            Surface normal of the query hit in world coordinates.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.Fraction">
            <summary>
            Fraction (of the original query) or absolute distance to the hit position, depending on how the query was set up.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.Body">
            <summary>
            Entity detected by the query.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.SubCollider">
            <summary>
            Hit SubCollider key set only when the collider is composite.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Queries.SweepQueryHit.MaterialId">
            <summary>
            Material of the body, or from the sub-collider if the associated collider is composite.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsInsideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a convex collider is hit from the inside, that is, the origin of the ray lays inside.
            Note: In this case the normal points in the same direction of the ray (dot product is positive).
            </summary>
            <returns>True if the collider was hit from the inside</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsOutsideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a convex collider is hit from the outside, that is, the origin of the ray lays outside.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative).
            </summary>
            <returns>True if the collider was hit from the outside</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsFrontSideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a triangle was hit from its front.
            Note: In this case the normal points in the opposite direction of the ray (dot product is negative)
            unless <see cref="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsInsideHit"/> returns true.
            </summary>
            <returns>True if the triangle was hit from the front</returns>
        </member>
        <member name="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsBackSideHit">
            <summary>
            Only valid for ray-cast queries.
            Tells if a triangle was hit from its front.
            Note: In this case the normal points in the direction of the ray (dot product is positive)
            unless <see cref="M:Keen.VRage.Physics.Queries.SweepQueryHit.IsInsideHit"/> returns true.
            </summary>
            <returns>True if the triangle was hit from the back</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.BodyRagdollArgs">
            <summary>
            Arguments for setting a ragdoll for a body. 
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.IRagdollAsset">
            <summary>
            Represents a loaded ragdoll that can be attached to an entities.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.IRagdollData">
            <summary>
            Represents a loaded ragdoll that can be attached to an entities.
            This data can be reused when creating multiple ragdolls.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Ragdolls.IRagdollData.GetHighSkeletonBones">
            <summary>
            Get high (animation) skeleton. This skeleton corresponds to the animator bone transforms that ragdoll expects as target pose. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Ragdolls.IRagdollData.GetLowSkeletonBones">
            <summary>
            Get low (ragdoll) skeleton. This skeleton corresponds to the bones that are simulated by the ragdoll.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Ragdolls.IRagdollData.GetRagdollBodiesCount">
            <summary>
            Get number of bodies the ragdoll has. This might not necessarily be the same as the number of bones in low skeleton (due to terminal bones).
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Ragdolls.IRagdollData.GetRagdollBodyNames">
            <summary>
            Get bone names of the bodies corresponding to the low (ragdoll) skeleton.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.IRagdolls">
            <summary>
            Interface for manipulating with ragdolls on engine level.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Ragdolls.IRagdolls.TryLoadRagdollFromAsset(System.IO.Stream,Keen.VRage.Physics.Ragdolls.IRagdollData@)">
            <summary>
            Tries to load ragdoll from a platform specific asset file.
            </summary>
            <param name="sourceStream">The HKT data stream to load ragdoll from.</param>
            <param name="ragdollData">
            Data of the ragdoll.
            This instance can be stored and is later used to create ragdoll instances in simulation.</param>
            <returns>Whether the ragdoll was loaded successfully from the file.</returns>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.RagdollAsset">
            <summary>
            Asset containing ragdoll data.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.RagdollBoneType">
            <summary>
            Specifies the type of the ragdoll bone.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Ragdolls.RagdollState">
            <summary>
            States that a ragdoll can be in.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Ragdolls.RagdollState.TorsoKeyframed">
            <summary>
            Limbs are driven
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Ragdolls.RagdollState.TorsoRightArmKeyframed">
            <summary>
            Limbs except right hand are driven
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Ragdolls.RagdollState.TorsoLeftArmKeyframed">
            <summary>
            Limbs except left hand are driven
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.Ragdolls.RagdollState.TorsoBothArmsKeyframed">
            <summary>
            Only legs are driven
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.SceneSettings">
            <summary>
            <see cref="M:Keen.VRage.Physics.IVRagePhysics.AddToSession(Keen.VRage.DCS.Builders.SceneBuilder@,Keen.VRage.DCS.Builders.EntityBuilder@,Keen.VRage.Physics.SceneSettings@,System.Nullable{System.UInt16})"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.DebugServerName">
            <summary>
            Name used to identify the physics debug server.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.RegisterDebugMenus">
            <summary>
            Whether to register the physics debug menus.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.GlobalGravity">
            <summary>
            Gravity applied to all dynamic bodies in current session
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.StepFrequency">
            <summary>
            Step frequency in Hz.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.AllowVariableTimeStep">
            <summary>
            Enabled optimizations for stepping the simulation at different intervals each frame.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.EnableBreakHandler">
            <summary>
            Enables the Break Handler, used to report manifolds that exceed allowed impulses.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.WorldManager">
            <summary>World Manager settings to use for the session.</summary>
            <remarks>If none is provided a default instance of <see cref="T:Keen.VRage.Physics.Components.DefaultWorldManagerSettings"/> is used instead.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.ConstraintsSettings">
            <summary>
            Configuration parameters for constraints, deciding how they are grouped together.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.LinearSpeedLimit">
            <summary>
            The maximum linear speed that is allowed for all bodies except characters.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.AngularSpeedLimit">
            <summary>
            The maximum angular speed that is allowed for all bodies except characters.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.CharacterSpeedLimit">
            <summary>
            The maximum linear speed that is allowed for characters.  
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.CharacterAngularSpeedLimit">
            <summary>
            The maximum angular speed that is allowed for characters.
            </summary>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.LinearDamping">
            <summary>
            Linear velocity damping factor.
            </summary>
            <remarks>Damping works with an exponential falloff, every step all body linear velocities are reduced by <c>stepTime * LinearDamping</c>
            (<c>stepTime</c> is the step duration in seconds).</remarks>
            <remarks>Default: <c>0</c></remarks>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.AngularDamping">
            <summary>
            Angular velocity damping factor.
            </summary>
            <remarks>Damping works with an exponential falloff, every step all body angular velocities are reduced by <c>stepTime * AngularDamping</c>
            (<c>stepTime</c> is the step duration in seconds).</remarks>
            <remarks>Default: <c>0</c></remarks>
        </member>
        <member name="F:Keen.VRage.Physics.SceneSettings.CharacterRestitutionMinLinearSpeedDifference">
            <summary>
            The minimum linear speed difference between a character and another rigid-body
            required to apply restitution to the character.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Utils.IProgressMonitor">
            <summary>
            Represents a monitor for an operation that takes a long time to complete.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.Utils.IProgressMonitor.ShouldCancel">
            <summary>
            Whether the user wants to cancel the operation.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Utils.IProgressMonitor.OnProgress(System.Single)">
            <summary>
            Notify of the progress on the operation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Utils.MessageCollector">
            <summary>
            When a collector is active, messages will be added to the collector rather than immediately logging,
            asserting or throwing, allowing the user to defer handling them.
            </summary>
            <seealso cref="T:Keen.VRage.Physics.IVRagePhysics"/>
        </member>
        <member name="M:Keen.VRage.Physics.Utils.MessageCollector.#ctor(Keen.VRage.Physics.IVRagePhysics)">
            <summary>
            When a collector is active, messages will be added to the collector rather than immediately logging,
            asserting or throwing, allowing the user to defer handling them.
            </summary>
            <seealso cref="T:Keen.VRage.Physics.IVRagePhysics"/>
        </member>
        <member name="F:Keen.VRage.Physics.Utils.MessageCollector.Messages">
            <summary>
            Messages raised while this collector was active.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.Utils.MessageCollector.Message">
            <summary>
            A log message raised by the implementation.
            </summary>
        </member>
        <member name="M:Keen.VRage.Physics.Utils.MessageCollector.Message.#ctor(System.UInt32,Keen.VRage.Library.Diagnostics.LogSeverity,System.String)">
            <summary>
            A log message raised by the implementation.
            </summary>
        </member>
        <member name="T:Keen.VRage.Physics.VRagePhysics">
            <summary>
            Holder of a singleton instance of the physics subsystem.
            </summary>
            <remarks>The physics subsystem has to be initialized elsewhere (via registration to the <see cref="T:Keen.VRage.Library.Utils.SingletonManager"/>)
            before it can be used here. <see cref="M:Keen.VRage.Physics.Havok.VRageHavok.Create(System.Action{Keen.VRage.Library.Diagnostics.LogSeverity,System.String},Keen.VRage.Physics.MemoryTrackingLevel)"/> does that automatically.</remarks>
        </member>
        <member name="F:Keen.VRage.Physics.VRagePhysics._instance">
            <summary>
            Shared instance of the physics engine implementation.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.VRagePhysics.Colliders">
            <summary>
            Shortcut to <see cref="P:Keen.VRage.Physics.VRagePhysics.Instance"/>.<see cref="P:Keen.VRage.Physics.IVRagePhysics.Colliders"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Physics.VRagePhysics.Materials">
            <summary>
            Shortcut to <see cref="P:Keen.VRage.Physics.VRagePhysics.Instance"/>.<see cref="P:Keen.VRage.Physics.IVRagePhysics.Materials"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Method builder for AsyncVoid methods.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
            Create the method builder.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
            Start the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Set the boxed state machine, unused.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>
            Notify about an exception while executing the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>
            Signal that the state machine has completed.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ExtractMaterialNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractMaterialNameRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
    </members>
</doc>
