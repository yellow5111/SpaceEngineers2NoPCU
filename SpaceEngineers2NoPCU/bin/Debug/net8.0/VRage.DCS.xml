<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.DCS</name>
    </assembly>
    <members>
        <member name="T:Keen.VRage.DCS.Accessors.DataMarshal">
            <summary>
            An unsafe class that provides a set of methods to access the underlying Data representations of <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DataMarshal.GetDataPointer``1(Keen.VRage.DCS.Scenes.Scene,Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags)">
            <summary>
            Get typed Data pointer for given DEntity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DataMarshal.GetDataPointer(Keen.VRage.DCS.Scenes.Scene,Keen.VRage.DCS.Accessors.DEntity,System.Int32,Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags)">
            <summary>
            Get untyped Data pointer for given DEntity
            Same as <see cref="M:Keen.VRage.DCS.Accessors.DEntityContext.GetWritePtr``1"/> (Creates data if needed)
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DataMarshal.TryGetDataPointer``1(Keen.VRage.DCS.Scenes.Scene,Keen.VRage.DCS.Accessors.DEntity,System.Boolean)">
            <summary>
            Get typed Data pointer for given DEntity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DataMarshal.TryGetDataPointer(Keen.VRage.DCS.Scenes.Scene,Keen.VRage.DCS.Accessors.DEntity,System.Int32,System.Boolean)">
            <summary>
            Get untyped Data pointer for given DEntity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DataMarshal.TryRemove(Keen.VRage.DCS.Scenes.Scene,Keen.VRage.DCS.Accessors.DEntity,System.Int32)">
            <summary>
            Try remove untyped Data from given DEntity
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DCSDebuggerHelper">
            <summary>
            Debugee side code for the DCS debugger. Used to improve performance by serializing the required data.
            Changing the DTO objects requires changes on the DCS Debugger as well.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DEntity">
             <summary>
             Data entity.
             Unique identifier for column of data-oriented data.
            
             While ECS Entity and Data Entity often map 1 to 1, it is not mandatory or required
             and Data entities and their data should be allocated based on usage instead.
             </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntity.Empty">
            <summary>
            Empty <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntity.IsEmpty">
            <summary>
            True for instances that don't hold reference to any real <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DEntityArchetype">
            <summary>
            Query API for <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> type
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntityArchetype.TypeIds">
            <summary>
            <see cref="T:Keen.VRage.DCS.Internal.TypeId`1">TypeIds</see> of Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntityArchetype.Types">
            <summary>
            <see cref="T:System.Type">Types</see> of Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntityArchetype.SizeOfEntity">
            <summary>
            Cumulated size of Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.DEntityArchetype.TotalBytesPerEntity">
            <summary>
            Data size per Entity including Data paddings.
            Does not include change bits
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.GetType(System.Int32)">
            <summary>
            <see cref="T:System.Type"/> of Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> at given <param name="index">index</param>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.GetTypes(System.Span{System.Type})">
            <summary>
            All runtime <see cref="T:System.Type">Types</see> in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.GetTypes(System.Span{Keen.VRage.DCS.Internal.RuntimeDataInfo.Info})">
            <summary>
            <see cref="T:Keen.VRage.DCS.Internal.RuntimeDataInfo"/> for all Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.IsCompatible(System.Int32[])">
            <summary>
            Returns true if the archetype fits into the component/data constraints
            Where index 0 is the number of types for MustHave.
            Where index 1+(Value at 0) is the type ids for MustHave.
            Values after index 1+(Value at 0) are DoesNotHaves.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.GetDataSizes(System.Span{System.Int32})">
            <summary>
            Allocation sizes of each Data in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.EnumerateEntities">
            <summary>
            Get enumerator for all entities contained in this <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityArchetype.GetDataPointersForEntity(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Get pointers for all Data attached to the specified <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DEntityArchetype.EntityEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DEntityArchetype.DataPointerEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.DEntityContext">
            <summary>
            Data Entity alone is just a pure identifier (ID).
            Without Scene instance you can't access any data.
            EntityContext wraps these two together and provides convenient access methods.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.Get``1">
            <summary>
            Get T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.Set``1(``0)">
            <summary>
            Attach or update T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.TryWrite``1(``0)">
            <summary>
            Write a new value of given Data, only if given Data already exists on the entity. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGet``1(``0@)">
            <summary>
            Try get T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.GetWritePtr``1">
            <summary>
            Attach new T Data to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>, if not present, and return reference to writable storage
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGetWritePtr``1">
            <summary>
            Try get writable reference to T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            Null ref when data is not present on this entity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.GetReadPtr``1">
            <summary>
            Get readable reference to T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            Throws when data is not present on this entity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGetReadPtr``1">
            <summary>
            Try get readable reference to T Data attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            Null ref when data is not present on this entity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.Has``1">
            <summary>
            Check if T Data is attached to this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.TryRemove``1">
            <summary>
            Try remove T Data from this <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
            <returns>true if data was attached to the <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.ToString">
            <summary>
            Get the entity indices and, if available, it's debug name as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.DEntityContext.ToDataString">
            <summary>
            Print info string with all Data
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.EntityData`1">
            <summary>
            Job argument.
            Gives you access to data of different data entity.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.EntityData`1.Item(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.GetWritePtr``1"/>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.EntityData`1.Item(Keen.VRage.DCS.Accessors.DEntity,System.Boolean)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.EntityData`1.ReadFrom(Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.IsPresentOn(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Check whether T Data are attached to Data <param name="entity">entity</param>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.WriteTo(Keen.VRage.DCS.Accessors.DEntity,`0)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.Set``1(``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.TryWriteTo(Keen.VRage.DCS.Accessors.DEntity,`0)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryWrite``1(``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.GetWritePtr(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.GetWritePtr``1"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.TryGetWritePtr(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGetWritePtr``1"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.ReadFrom(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.Get``1"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.TryReadFrom(Keen.VRage.DCS.Accessors.DEntity,`0@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGet``1(``0@)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.TryGetReadPtr(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGetReadPtr``1"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.EntityData`1.TryRemoveFrom(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryRemove``1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.EntityData`2">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.EntityData`3">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.EntityData`4">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.EntityData`5">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.Optional`1">
            <summary>
            Represents Data that may or may not be provided/present.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.OptionalWritable`1">
            <summary>
            Job argument.
            Represents Data that may or may not be provided/present.
            Gives you control of if you actually write the data or not.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.OptionalWritable`1.WritableValue">
            <summary>
            Get writable reference to the T Data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.OptionalWritable`1.SetChanged">
            <summary>
            Explicitly mark the Data as changed
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1">
            <summary>
            Job argument.
            ReadOnly counterpart of <see cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/>.
            You should prefer <see cref="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1"/> over <see cref="T:Keen.VRage.DCS.Accessors.EntityData`1"/> when you don't need the write access
            as it allows the DCS system to schedule concurrent execution of Jobs with read-only data access.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1.Item(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Get T Data attached to Data <param name="entity">entity</param>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1.IsPresentOn(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.EntityData`1.IsPresentOn(Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1.ReadFrom(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.EntityData`1.ReadFrom(Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1.TryReadFrom(Keen.VRage.DCS.Accessors.DEntity,`0@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.EntityData`1.TryReadFrom(Keen.VRage.DCS.Accessors.DEntity,`0@)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1.TryGetReadPtr(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.EntityData`1.TryGetReadPtr(Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`2">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`3">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`4">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`5">
            <inheritdoc cref="T:Keen.VRage.DCS.Accessors.ReadOnlyEntityData`1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.SceneOps">
            <summary>
            Limited API for in-Job <see cref="T:Keen.VRage.DCS.Scenes.Scene"/> operations.
            Full access to <see cref="T:Keen.VRage.DCS.Scenes.Scene"/> is not allowed in threaded Jobs.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.#ctor(Keen.VRage.DCS.Scenes.Scene)">
            <summary>
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.RemoveEntity(Keen.VRage.DCS.Accessors.DEntity)">
            <inheritdoc cref="M:Keen.VRage.DCS.Scenes.Scene.RemoveEntity(Keen.VRage.DCS.Accessors.DEntity)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.AddEntity``1(Keen.VRage.DCS.Accessors.EntityData{``0},``0)">
            <inheritdoc cref="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``1(``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.AddEntity``2(Keen.VRage.DCS.Accessors.EntityData{``0},Keen.VRage.DCS.Accessors.EntityData{``1},``0,``1)">
            <inheritdoc cref="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``2(``0,``1)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.AddEntity``3(Keen.VRage.DCS.Accessors.EntityData{``0},Keen.VRage.DCS.Accessors.EntityData{``1},Keen.VRage.DCS.Accessors.EntityData{``2},``0,``1,``2)">
            <inheritdoc cref="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``3(``0,``1,``2)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.AddEntity``4(Keen.VRage.DCS.Accessors.EntityData{``0},Keen.VRage.DCS.Accessors.EntityData{``1},Keen.VRage.DCS.Accessors.EntityData{``2},Keen.VRage.DCS.Accessors.EntityData{``3},``0,``1,``2,``3)">
            <inheritdoc cref="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``4(``0,``1,``2,``3)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.SceneOps.op_Implicit(Keen.VRage.DCS.Scenes.Scene)~Keen.VRage.DCS.Accessors.SceneOps">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Accessors.Writable`1">
            <summary>
            Job argument.
            Alternative for taking data by `ref`.
            Gives you control of if you actually write the data or not.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Accessors.Writable`1.WritableValue">
            <summary>
            Get writable reference to the T Data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Accessors.Writable`1.SetChanged">
            <summary>
            Explicitly mark the Data as changed
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.AfterAttribute">
            <summary>
            Job update group annotation.
            Annotated job group gets scheduled after specified job group.
            <code>
            [After(typeof(DrainJobGroup))]
            public class AfterDrainJobGroup : JobGroup { }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.AfterAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.AllowMultipleAttribute">
            <summary>
            Only annotated <see cref="T:Keen.VRage.DCS.Components.Component"/>s may appear multiple time on single <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.BeforeAttribute">
            <summary>
            Job update group annotation.
            Annotated job group gets scheduled before specified job group.
            <code>
            [Before(typeof(DrainJobGroup))]
            public class BeforeDrainJobGroup : JobGroup { }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.BeforeAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ConfigurationAttribute">
            <summary>
            Use to annotate in-<see cref="T:Keen.VRage.DCS.Components.Component"/> fields and properties you want
            the DCS to auto-inject with <see cref="T:Keen.VRage.DCS.Components.Component"/> from <see cref="T:Keen.VRage.Library.Definitions.DefinitionManager"/> for you.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ServiceAttribute">
            <summary>
            Use to annotate in-<see cref="T:Keen.VRage.DCS.Components.Component"/> fields and properties you want
            the DCS to auto-inject with Service.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ComponentAttribute">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Component"/> dependency attribute.
            Use to annotate in-<see cref="T:Keen.VRage.DCS.Components.Component"/> fiends and properties you want
            the DCS to auto-inject with Peer <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> for you.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.ComponentAttribute.Tag">
            <summary>
            Unique identifier of requested <see cref="T:Keen.VRage.DCS.Components.Component"/>.
            If not specified, <see cref="T:Keen.VRage.DCS.Components.DefaultTag"/> is used.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.ComponentAttribute.WeakDependency">
            <summary>
            Set to true to break circular dependencies.
            Weak dependencies are not filled until <see cref="T:Keen.VRage.DCS.Annotations.PostInitAttribute"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DataConstraintAttribute">
            <summary>Internal</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.DataConstraintAttribute.Type">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.DataConstraintAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.OnAddedAttribute">
            <summary>
            Event job annotation.
            Triggered when new data of given type appears on data entity.
            <code>
            [DrainJobGroup]
            [OnAdded(typeof(TankState))]
            private void OnStateAdded(Entity entity, TankState newState) { ... }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.OnAddedAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.OnChangedAttribute">
            <summary>
            Event job annotation.
            Triggered when existing data of given type change on data entity.
            <code>
            [DrainJobGroup]
            [OnChanged(typeof(TankState))]
            private void OnStateChanged(Entity entity, TankState newState) { ... }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.OnChangedAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.OnRemovedAttribute">
            <summary>
            Event job annotation.
            Triggered when existing data of given type get removed from data entity.
            <code>
            [DrainJobGroup]
            [OnRemoved(typeof(TankState))]
            private void OnStateRemoved(Entity entity, TankState newState) { ... }
            </code>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.AllowSelfInvoke">
            <summary>
            Allows Jobs to record Data Events during their own run and execute them on next Tick
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DataEventGroupAttribute">
            <summary>
            Jobs in the same DataEventGroup never invoke each other
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DataEventAttribute">
            <summary>
            All jobs that intend to be Data Event need to contain this attribute in some way
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.TypedDataEventAttribute">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DataPreciseJob">
            <summary>
            Manual override for custom specification of DEntity Data precisions for a given Job
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DefinitionAttribute">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Component"/> <see cref="T:Keen.VRage.DCS.Annotations.DefinitionAttribute"/> attribute.
            Use to annotate in-<see cref="T:Keen.VRage.DCS.Components.Component"/> fields and properties you want
            the DCS to auto-inject with <see cref="T:Keen.VRage.DCS.Components.Component"/> <see cref="T:Keen.VRage.DCS.Annotations.DefinitionAttribute"/> for you.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DoesNotHaveAttribute">
            <summary>
            Job annotation.
            Annotated job is applicable only on entities that have specified data.
            <code>
            [DrainJobGroup]
            [DoesNotHave(typeof(GasTankData))]
            private void OnStateChanged(Entity entity, TankState newState) { ... }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.DoesNotHaveAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DuringAttribute">
            <summary>
            Job update group annotation.
            Annotated job group gets scheduled within specified job system.
            Simplifies calls so following is equivalent.
            <code>
            [During(typeof(SomeJobSystem))]
            public class InsideJobGroup : JobGroup { }
            
            [After(typeof(SomeJobSystem.Begin))]
            [Before(typeof(SomeJobSystem.End))]
            public class InsideJobGroup : JobGroup { }
            </code>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ExternallySynchronizedAttribute">
            <summary>
            Annotated <see cref="T:Keen.VRage.DCS.Annotations.JobGroup"/> is intended to be synchronized externally
            - External <see cref="T:Keen.VRage.DCS.Annotations.UpdateOrderAttribute"/> pointing to this <see cref="T:Keen.VRage.DCS.Annotations.JobGroup"/>
            - Custom Scene builder
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ForceJobParallelAttribute">
            <summary>
            Manual override forcing the decorated job to run on threads. The job itself is responsible for ensuring thread safety.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.HideInPreviewAttribute">
            <summary>
            Annotation for components that should not be used during preview.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.InvocationStub">
            <summary>
            Annotations for generated code
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.InvocationStubData">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.InvocationStubData.DataAccess">
            <summary/>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.JobContextAttribute">
             <summary>
             Use to annotate Job argument responsible for bearing Job context into Job invocation.
            
             Following JobContextFactory overloads are supported:
             TWarpContext BeginWarp();
             TWarpContext BeginWarp(int maxEntities);
             </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.JobContextAttribute.AutoInstantiate">
            <summary>
            When set to <see langword="true"/>, the <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/> will try to automatically instantiate the JobContext.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.JobContextAttribute.ShareInstances">
            <summary>
            When set to <see langword="true"/>, <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/> will create only one instance of <see cref="P:Keen.VRage.DCS.Annotations.JobContextAttribute.JobContextType"/> and share the instance between all Jobs.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.JobContextAttribute.JobContextType">
            
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.JobContextAttribute.#ctor">
            <summary>
            Use this overload to annotate JobContext types, arguments and factories
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.JobContextAttribute.#ctor(System.Type)">
            <summary>
            Use this overload to annotate WarpContext and connect it to its JobContext.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.JobGroup">
            <summary>
            Job group definitions should derive from this attribute.
            <code>
            public class DrainJobGroup : JobGroup {}
            </code>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.JobSystem">
            <summary>
            Encapsulates nested job groups and job systems and provides job sync points.
            <br/>
            Nested jobs will execute sequentially in order of declaration, See: <see cref="T:Keen.VRage.DCS.Annotations.NotSequentialAttribute"/>
            <br/>
            Use to synchronize significant systems with external world
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.JobGroupOrderAttribute">
            <summary>
            Autogenerated attribute of the declaration order of system JobGroups
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.JobGroupOrderAttribute.#ctor(System.Type[])">
            <summary>
            Autogenerated attribute of the declaration order of system JobGroups
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.InitAttribute">
             <summary>
             Assume exclusive access to the entire <see cref="T:Keen.VRage.DCS.Components.Entity"/> tree (up and down) during Init.
             Access to Entities out of current tree and/or global systems is prohibited (unless specified otherwise).
            
             Should Init fail, <see cref="T:Keen.VRage.DCS.Annotations.DestructorAttribute"/> will be called for all <see cref="T:Keen.VRage.DCS.Components.Component"/>s that already finished Init, as well as the throwing <see cref="T:Keen.VRage.DCS.Components.Component"/>
             </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.PostInitAttribute">
             <inheritdoc cref="T:Keen.VRage.DCS.Annotations.InitAttribute"/>
            
             Should PostInit fail, <see cref="T:Keen.VRage.DCS.Annotations.DestructorAttribute"/> will be called for all <see cref="T:Keen.VRage.DCS.Components.Component"/>s on <see cref="T:Keen.VRage.DCS.Components.Entity"/>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.PreDestroyAttribute">
            <summary>
            Runs before all <see cref="T:Keen.VRage.DCS.Annotations.DestructorAttribute"/>s
            <see cref="T:Keen.VRage.DCS.Components.Component"/>s should stay valid, but can be used to destroy sub-resources and/or childs
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.DestructorAttribute">
            <summary>
            Inverse operator of <see cref="T:Keen.VRage.DCS.Annotations.InitAttribute"/>
            Invocation order is always inverse to Inits
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.MustHaveAttribute">
            <summary>
            Job annotation.
            Annotated job is applicable only on entities that have specified data.
            <code>
            [DrainJobGroup]
            [MustHave(typeof(GasTankData))]
            private void OnStateChanged(Entity entity, TankState newState) { ... }
            </code>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.MustHaveAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.NoCodeGenAttribute">
            <summary>
            For when you need to pause code generations
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.NoDisposeAttribute">
            <summary>
            Disables automatic Data dispose for annotated member
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.NotSequentialAttribute">
            <summary>
            Opt out of implicit job system ordering
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ReserveDataAttribute`1">
            <summary>
            Use to annotate indicate which Data storage should be pre-reserved for the <see cref="T:Keen.VRage.DCS.Components.Component"/>
            right away during <see cref="T:Keen.VRage.DCS.Components.Entity"/> allocation.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.ReserveDataAttribute">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.SerializerAttribute">
            <summary>
            Assume exclusive access to the entire <see cref="T:Keen.VRage.DCS.Components.Entity"/> tree (up and down) during Serialization,
            as well as free access to global systems.
            Returned ObjectBuilder should be complete and immutable snasphot.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.CustomSignalAttribute">
            <summary>
            Is used for methods to customize how compiler generates signal implementation
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.IObservableProperty">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.IObservablePropertyVisitor">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.Prop`2">
            <summary>
            TODO: SE2-7430
            Ugly wrapper to make SyncProperties API bearable. Will be removed so don't relly on it
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.FutureGeneratedProperty">
            <summary>
            TODO: SE2-7430
            Example how generated properties should look like
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.FutureGeneratedProperty.TValue">
            <summary>
            This is type of the property value
            => int, float, string, ...
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.ObservablePropertyBinding">
            <summary>
            <see cref="T:Keen.VRage.DCS.Annotations.Signals.IObservableProperty"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.Signals.ObservablePropertyBinding.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            <see cref="T:Keen.VRage.DCS.Annotations.Signals.IObservableProperty"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.ReadObservablePropertyOp">
            <summary>
            Will read observable property inti <see cref="F:Keen.VRage.DCS.Annotations.Signals.ReadObservablePropertyOp.Binding"/> target
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp">
            <summary>
            Will attach <see cref="F:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp.Binding"/> to <see cref="F:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp.Entity"/>
            Users is expected to invoke <see cref="F:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp.DisposeCallbackOut"/> or <see cref="T:Keen.VRage.DCS.Annotations.Signals.DetachObservablePropertyBindingOp"/> when done to release any registered events
            Does not observe any <see cref="F:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp.Entity"/> lifetime events, users is expected to take care of that
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.DetachObservablePropertyBindingOp">
            <summary>
            Inverse of <see cref="T:Keen.VRage.DCS.Annotations.Signals.AttachObservablePropertyBindingOp"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SignalAttribute">
            <summary>
            A base class for all signal types
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SignalSignature">
            <summary>
            Holds information about particular signal
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SignalTriggerAttribute">
            <summary>
            Is used for Property/Method to denote that it's a signal trigger
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SyncPropertyAttribute">
            <summary>
            Is used for
            1) fields to denote that compiler should generate SyncProperty implementation
            2) methods to receive updates of specific property
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SyncPropertyFlags">
            <summary>
            <see cref="T:Keen.VRage.DCS.Annotations.Signals.SyncPropertyAttribute"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.Signals.SyncPropertySetterAttribute">
            <summary>
            Sync property setter information
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.SparseUpdateAttribute">
            <summary>
            Allows annotated Job to run at lower frequency than <see cref="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.SparseUpdateAttribute.UpdateInterval">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.SparseUpdateAttribute.#ctor(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Annotations.UpdateOrderAttribute">
            <summary>Internal</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Annotations.UpdateOrderAttribute.Type">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Annotations.UpdateOrderAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.DEntityBuilder">
            <summary>
            Fluent builder for <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.DEntityBuilder.Scene">
            <summary>
            <see cref="F:Keen.VRage.DCS.Builders.DEntityBuilder.Scene"/> to put the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> to
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Builders.DEntityBuilder.Data">
            <summary>
            Data that should be attached to the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Builders.DEntityBuilder.Archetype">
            <summary>
            <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> entity will be placed to
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.Set``1(``0)">
            <summary>
            Set value of T Data that will be attached to the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.Set(System.Int32,System.Byte@,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.DEntityBuilder.Set``1(``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.GetOrAdd``1(System.Boolean@)">
            <summary>
            Get or add writable reference to T Data that will be attached to the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.TryGet``1">
            <summary>
            Try get writable reference to existing T Data that will be attached to the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.Remove``1">
            <summary>
            Remove T Data from builder
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.BuildOne">
            <summary>
            Instantiate one <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>, add it the specified <see cref="F:Keen.VRage.DCS.Builders.DEntityBuilder.Scene"/> and attached specified <see cref="P:Keen.VRage.DCS.Builders.DEntityBuilder.Data"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.BuildRange(System.Span{Keen.VRage.DCS.Accessors.DEntity})">
            <summary>
            Instantiate range of <see cref="T:Keen.VRage.DCS.Accessors.DEntity">DEntities</see>, add them to the specified <see cref="F:Keen.VRage.DCS.Builders.DEntityBuilder.Scene"/> and attach specifiend <see cref="P:Keen.VRage.DCS.Builders.DEntityBuilder.Data"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.Empty(Keen.VRage.DCS.Scenes.Scene)">
            <summary>
            Create Empty <see cref="T:Keen.VRage.DCS.Builders.DEntityBuilder"/> for given <see cref="F:Keen.VRage.DCS.Builders.DEntityBuilder.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.ForScene(Keen.VRage.DCS.Scenes.Scene)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.DEntityBuilder.Empty(Keen.VRage.DCS.Scenes.Scene)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.WithInitialTypes(System.Type[])">
            <summary>
            Set Data <see cref="T:System.Type">Types</see> that shold be attached to the newly created <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with `default` Data values
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.AddUnsafeData``1(Keen.VRage.DCS.Builders.DEntityBuilder.DataNode{``0}*)">
            <summary>
            1) Make sure the storage outlives DEntity allocation
            2) Data duplicates are not test, first comes wins (not last!)
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.AddUnsafeData(Keen.VRage.DCS.Builders.DEntityBuilder.DataNode*)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.DEntityBuilder.AddUnsafeData``1(Keen.VRage.DCS.Builders.DEntityBuilder.DataNode{``0}*)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.DEntityBuilder.CloneEntity(Keen.VRage.DCS.Accessors.DEntityContext)">
            <summary>
            Create new <see cref="T:Keen.VRage.DCS.Builders.DEntityBuilder"/> that will clone existing <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.DEntityBuilder.DataNode">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.DEntityBuilder.DataNode`1">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityAllocator">
            <summary>
            Allocates new <see cref="T:Keen.VRage.DCS.Components.Entity"/> based on provided set of <see cref="T:Keen.VRage.DCS.Components.Component">Components</see>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Builders.EntityAllocator.CompositeKey">
            <summary>
            Unique key for <see cref="T:Keen.VRage.DCS.Components.Entity"/> archetype.
            Use <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> to compare two keys for equality.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.GetComponentIndex``1">
            <summary>
            Return index of given component within this Entity Composite
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.PreallocateDataSlots(Keen.VRage.DCS.Builders.DEntityBuilder@,Keen.VRage.DCS.Builders.DEntityBuilder.DataNode*)">
            <summary>
            <see cref="F:Keen.VRage.DCS.Builders.EntityAllocator.RequiredDataPreallocationNodes"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.BuildOne(Keen.VRage.DCS.Accessors.DEntityContext,System.ReadOnlySpan{System.Object},System.ReadOnlySpan{System.Object},Keen.VRage.DCS.Components.Entity)">
            <summary>
            Instantiate new <see cref="T:Keen.VRage.DCS.Components.Entity"/> with specified set of <param name="objectBuilders">objectBuilders</param> and <param name="definitions">definitions</param>.
            <param name="dataEntity">dataEntity</param> will be used as backing entity for the newly created <see cref="T:Keen.VRage.DCS.Components.Entity"/>.
            <param name="entityStub"></param> <see cref="T:Keen.VRage.DCS.Components.Entity"/> stub (uninitialized Entity) can be provided to be used instead of creating new one. Used when you want to keep the references.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.SerializeComponents(Keen.VRage.DCS.Components.Entity,System.ReadOnlySpan{System.Object})">
            <summary>
            Serialize <see cref="T:Keen.VRage.DCS.Components.Entity"/> <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> into ObjectBuilders
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.DestroyEntity(Keen.VRage.DCS.Components.Entity,System.Int32)">
            <summary>
            Invoke destructors on <see cref="T:Keen.VRage.DCS.Components.Entity"/> <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> and remove backing <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> and Data from <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.GetEntityCompositeKey(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Get composite key or existing instance of <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            See <see cref="P:Keen.VRage.DCS.Builders.EntityAllocator.CompositeKey"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityAllocator.MarkThread(System.Boolean)">
            <summary>
            This is used to detect thread-unsafe code during Entity's Init/PostInit   
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityAllocator.ParallelInitGuard">
            <summary>
            Annotates section of a code that builds entity
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityBuilder">
            <summary>
            Fluent <see cref="T:Keen.VRage.DCS.Components.Entity"/> builder.
            Use to build new <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/> from scratch and optionally instantiate new <see cref="T:Keen.VRage.DCS.Components.Entity"/> into <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithName(System.String)">
            <summary>
            Set <see cref="F:Keen.VRage.DCS.Builders.EntityBuilder.DebugName"/> for the newly created <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithComponent``1(System.Object)">
            <summary>
            Add given <see cref="T:Keen.VRage.DCS.Components.Component"/> to the new <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithComponent``1(Keen.VRage.Library.Utils.StringId)">
            <summary>
            Add given <see cref="T:Keen.VRage.DCS.Components.Component"/> to the new <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithComponent``1(Keen.VRage.Library.Utils.StringId[])">
            <summary>
            Add given <see cref="T:Keen.VRage.DCS.Components.Component"/> to the new <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithComponent(Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo)">
            <summary>
            Add given <see cref="T:Keen.VRage.DCS.Components.Component"/> to the new <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithComponents(Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])">
            <summary>
            Add given <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> to the new <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.WithData``1(``0)">
            <summary>
            Set data to backing <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Fork">
            <summary>
            Make copy of this <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Create``1(System.String,``0@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.EntityBuilder.Create(System.String,Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Create``2(System.String,``0@,``1@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.EntityBuilder.Create(System.String,Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Create``3(System.String,``0@,``1@,``2@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.EntityBuilder.Create(System.String,Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Create``4(System.String,``0@,``1@,``2@,``3@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Builders.EntityBuilder.Create(System.String,Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])"/>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.Create(System.String,Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo[])">
            <summary>
            Instantiate one <see cref="T:Keen.VRage.DCS.Components.Entity"/> with given <see cref="T:Keen.VRage.DCS.Components.Component">Components</see>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.BuildOne">
            <summary>
            Instantiate one <see cref="T:Keen.VRage.DCS.Components.Entity"/> and add it to the <see cref="P:Keen.VRage.DCS.Builders.EntityBuilder.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.CompileObjectBuilder">
            <summary>
            Compile <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/> from specified <see cref="T:Keen.VRage.DCS.Components.Component"/> data.
            Automatically performs validation of <see cref="T:Keen.VRage.DCS.Components.Component"/> inputs and dependency ordering.
            Note that parts of the builder data are directly used for the new Composition, so no further modification should be done to the submitted Component data.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.FixTags(System.Type,Keen.VRage.Library.Utils.StringId[])">
            <summary>
            Inject default tags for specified <see cref="T:Keen.VRage.DCS.Components.Component"/> if needed
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.ForScene(Keen.VRage.DCS.Scenes.Scene)">
            <summary>
            Create new <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/> for given <see cref="P:Keen.VRage.DCS.Builders.EntityBuilder.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.ForDEntity(Keen.VRage.DCS.Builders.DEntityBuilder)">
            <summary>
            Create new <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/> for given <see cref="T:Keen.VRage.DCS.Builders.DEntityBuilder"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntityBuilder.FromEntityObjectBuilder(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder)">
            <summary>
            Create new <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/> from an existing <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityBuilder.ComponentMalformation">
            <see cref="M:Keen.VRage.DCS.Builders.EntityBuilder.ResolveComponent(Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo,Keen.VRage.DCS.Builders.EntityBuilder.ComponentMalformation)"/>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityBuilder.ComponentBuildInfo">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Component"/>
            <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityBuilderException">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.ComponentMalformationException">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntityCompositeDependencyOrderBuildStrategy">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.EntitySerializer">
            <summary>
            Used to serialized and deserialize <see cref="T:Keen.VRage.DCS.Components.Entity"/> from and to <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.EntitySerializer._allocators">
            <summary>
            Composite key or Definition -> EntityAllocator
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.EntitySerializer._definitions">
            <summary>
            Composite key -> Definition
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.EntitySerializer.OnBeforeEntityDestroyed">
            <summary>
            Automatically cleared upon invocation
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.BuildFrom(Keen.VRage.DCS.Builders.DEntityBuilder,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder)">
            <summary>
            Instantiate new <see cref="T:Keen.VRage.DCS.Components.Entity"/> with attached <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> based on provided build data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.BuildWithEntity(Keen.VRage.DCS.Accessors.DEntityContext,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder)">
            <summary>
            Instantiate new <see cref="T:Keen.VRage.DCS.Components.Entity"/> with attached <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> based on provided build data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.DestroyEntity(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Request to destroy <see cref="T:Keen.VRage.DCS.Components.Entity"/>.
            Note that this may not be synchronous operation, actual work may be delayed based on current load (there must be no observable side effects cased by such optimizations)
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.DestroyEntityImpl(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Destroy <see cref="T:Keen.VRage.DCS.Components.Entity"/> <see cref="T:Keen.VRage.DCS.Components.Component"/>s and recycle <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.Serialize(Keen.VRage.DCS.Components.Entity,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder)">
            <summary>
            Serialize <see cref="T:Keen.VRage.DCS.Components.Entity"/> into <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.EntitySerializer.RegisterDynamicComposite(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <summary>
            Gives user-supplied implementation chance to
            1) De-duplicate similar definitions, or otherwise replace the definition
            2) Know about presence
            3) Deny (incompatible) dynamic definitions in contexts where not applicable
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.IJobsExtension">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Builders.IJobsExtension.ConfigureScene(Keen.VRage.DCS.Builders.SceneBuilder)">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Builders.IJobsExtension.ConfigureJob(System.Reflection.MethodInfo,Keen.VRage.DCS.Builders.SceneBuilder.JobInfo@)">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.JobsExtensionAttribute">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.ISignalTableBuilder">
            <summary>
            Optionally augments signal handler table composition
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.ISignalTableBuilder.InspectLocalHandler(Keen.VRage.DCS.Builders.HandlerInfo,System.Boolean@)">
            <summary>
            Reflects known handlers on given entity composition.
            Implementation can decide whether given handler should be invoked locally or will handled externally
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.ISignalTableBuilder.InspectSyncProperty(Keen.VRage.DCS.Builders.SyncPropertyInfo,System.Boolean@)">
            <summary>
            Reflects known sync property on given entity composition
            Implementation can decide whether given sync property can be set on this side of replication
            </summary>
            <param name="syncPropertyInfo"></param>
            <param name="canBeSet"></param>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.ISignalTableBuilder.GetSyntheticHandlers(System.Type)">
            <summary>
            Get list of synthetic handlers that shall be invoked
            during local trigger of specified <paramref name="signalType"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.ISignalTableBuilder.PostProcess(Keen.VRage.Library.Collections.ListDictionary{System.Type,Keen.VRage.DCS.Components.SignalHandler})">
            <summary>
            Allow the ISignalTableBuilder to modify the final signal handlers list of the entity
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.ISignalTableBuilder.OnComposed(System.Object)">
            <summary>
            Final callback to pair <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/> with <see cref="M:Keen.VRage.DCS.Builders.EntityAllocator.GetEntityCompositeKey(Keen.VRage.DCS.Components.Entity)"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.HandlerInfo">
            <summary>
            Signal handler information
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SyncPropertyInfo">
            <summary>
            Sync property information
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.JobContextBuilder">
            <summary>
            Automatically builds Job contexts for Jobs
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.JobContextBuilder.SharedJobContexts">
            <summary>
            Temp storage for Job Contexts that are shared between multiple invocations of <see cref="M:Keen.VRage.DCS.Builders.JobContextBuilder.BuildJobContextIfNeeded(System.Reflection.MethodInfo)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Builders.JobContextBuilder.UserObject">
            <summary>
            Same as <see cref="P:Keen.VRage.DCS.Scenes.Scene.UserObject"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.JobContextBuilder.BuildJobContextIfNeeded(System.Reflection.MethodInfo)">
            <summary>
            Builds Job context for given 
            </summary>
            <param name="jobMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.JobContextBuilder.TryFindJobContextArgument(System.Reflection.MethodInfo)">
            <summary>
            For a Job method, find argument that is responsible for carrying Job or Warp context
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.JobContextBuilder.BuildJobContext(System.Type)">
            <summary>
            Build Job context from factory function or make new object
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.JobContextBuilder.TryFindJobContextFactory(System.Type)">
            <summary>
            Find plausible method for automatic construction of given `jobContextType`
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder">
            <summary>
            Use to create <see cref="P:Keen.VRage.DCS.Builders.SceneBuilder.Scene"/> and configure Job pipeline.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.SceneBuilder.ResolveSequentialJobSystemDependencies">
             <summary>
             Sets up sequential job dependencies inside systems
            
             Is called automatically when the scene is built
             </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.SceneBuilder.AddJobSystem``1">
            <summary>
            Can be used to register a JobSystem that is used implicitly 
            </summary>
            <typeparam name="TJobSystem"></typeparam>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.SceneBuilder.DontRunJobsOnStagingEntities">
            <summary>
            <see cref="T:Keen.VRage.DCS.CoreData.StagingTag"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Builders.SceneBuilder.BuildJobContexts(Keen.VRage.DCS.Builders.JobContextBuilder)">
            <summary>
            Optionally call this before first <see cref="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)"/> to automatically build eligible JobContexts for allocated <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
            <param name="contextBuilder">Optional custom job context builder. If not supplied the default one is used instead.</param>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobInfo.DataInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobInfo.DataType">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobInfo.EventInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobInfo.EventType">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobGroupInfo">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Builders.SceneBuilder.JobGroupInfo.AutomaticDependenciesSubset">
             <summary>
             Subset of dependencies added from prefix, postfix, or sequential Job System dependencies.
            
             This is to differentiate explicit and automatic dependencies in the Job Graph
             </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Builders.SceneBuilder.JobSystemIndex">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Builders.SceneBuilder.JobSystemIndex.GetEnvelopedSystems">
            <summary>
            If a contained job runs <em>before</em> a system
            and another contained job runs <em>after</em> the same system,
            this system will effectively completely envelop the other system during runtime
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.Component">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Entity"/>'s gameplay state and logic keeper
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Component.Entity">
            <summary>
            Owning <see cref="P:Keen.VRage.DCS.Components.Component.Entity"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Component.DEntity">
            <inheritdoc cref="P:Keen.VRage.DCS.Components.Entity.DEntity"/>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Component.Data">
            <inheritdoc cref="P:Keen.VRage.DCS.Components.Entity.Data"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Component.GetData``1">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.Get``1"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Component.TryGetData``1(``0@)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryGet``1(``0@)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Component.SetData``1(``0)">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.Set``1(``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Component.TryRemoveData``1">
            <inheritdoc cref="M:Keen.VRage.DCS.Accessors.DEntityContext.TryRemove``1"/>
        </member>
        <member name="T:Keen.VRage.DCS.Components.CompositionData">
            <summary>
            Hold info for specific <see cref="T:Keen.VRage.DCS.Components.Entity"/> Composition.
            Shared across Entities of the same Composition.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.CompositionData.Item(Keen.VRage.Library.Utils.StringId)">
            <inheritdoc cref="P:System.Collections.Generic.Dictionary`2.Item(`0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.CompositionData.ContainsKey(Keen.VRage.Library.Utils.StringId)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.CompositionData.TryGetValue(Keen.VRage.Library.Utils.StringId,System.Int32@)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="T:Keen.VRage.DCS.Components.CompositionData.SignalsMap">
            <summary />
        </member>
        <member name="F:Keen.VRage.DCS.Components.CompositionData.SignalsMap.SignalIndex">
            <summary>
            Indexed by <see cref="T:Keen.VRage.DCS.Components.Component"/> index
            Points to <see cref="F:Keen.VRage.DCS.Components.CompositionData.SignalsMap.SignalHandlers"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.CompositionData.NamedPropertiesMap">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Components.CompositionData.NamedPropertyInfo">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Components.SignalHandler">
            <summary>
            Signal handler information
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Components.SignalHandler.ENTITY_COMPONENT_INDEX">
            <summary>
            <see cref="F:Keen.VRage.DCS.Components.SignalHandler.ComponentIndex"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Components.SignalHandler.Callsite">
            <summary>
            delegate*&lt;object, args...&gt;
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.DefaultTagAttribute">
            <summary>
            Component can override <see cref="T:Keen.VRage.DCS.Components.DefaultTag"/> value for <see cref="T:Keen.VRage.DCS.Components.Component"/> type with this attribute.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.DefaultTag">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> with no assigned tags will be assigned <see cref="T:Keen.VRage.DCS.Components.DefaultTag"/>.
            All Exclusive <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> will usually do with just <see cref="T:Keen.VRage.DCS.Components.DefaultTag"/>,
            non-exclusive <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> will need to have assigned custom unique Tags.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.DefaultTag`1">
            <summary>
            Accessor for value of <see cref="T:Keen.VRage.DCS.Components.DefaultTag"/> of T <see cref="T:Keen.VRage.DCS.Components.Component"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.DefaultTag`1.Get(Keen.VRage.Library.Utils.StringId)">
            <summary>
            Use provided tag if valid, otherwise return default tag for T
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.Entity">
            <summary>
            Unique identifier for immutable set of <see cref="T:Keen.VRage.DCS.Components.Component"/> instances
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Entity.Data">
            <summary>
            Accessor for attached Data Entity Data
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Entity.Scene">
            <summary>
            <see cref="P:Keen.VRage.DCS.Components.Entity.Scene"/> this <see cref="T:Keen.VRage.DCS.Components.Entity"/> belongs to
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Entity.DEntity">
            <summary>
            Attached Data Entity
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.Entity.DebugName">
            <summary>
            Debug name
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Components.Entity.ExternalHandlers">
            <summary>
            ExternalHandlersVersion is pooled object.
            A new version of it gets retrieved from pool on subscribe/unsubscribe if invocation of this signal type is in progress
            There are a few places that are in charge of returning it to pool
            1) EntityAllocator.DestroyEntity
            2) Handlers invocation  - though InvocationToken (if modification happens during invocation)
            3) Unsubscribe - when the handler list gets empty
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.Get``1(Keen.VRage.Library.Utils.StringId)">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Components.Component"/> of type T
            </summary>
            <param name="tag">Optionally specify Tag identifier of the requested <see cref="T:Keen.VRage.DCS.Components.Component"/></param>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.Get(Keen.VRage.Library.Utils.StringId)">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Components.Component"/> based on specified <param name="tag">Tag</param>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.TryGet``1(Keen.VRage.Library.Utils.StringId)">
            <inheritdoc cref="M:Keen.VRage.DCS.Components.Entity.Get``1(Keen.VRage.Library.Utils.StringId)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.TryGet(Keen.VRage.Library.Utils.StringId)">
            <inheritdoc cref="M:Keen.VRage.DCS.Components.Entity.Get(Keen.VRage.Library.Utils.StringId)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.Has``1(``0@,System.Func{``0,System.Boolean})">
            <summary>
            Check whether <see cref="T:Keen.VRage.DCS.Components.Entity"/> contains <see cref="T:Keen.VRage.DCS.Components.Component"/> with specified properties
            Reserved only for interfaces or with conditional - throws assert otherwise.
            </summary>
            <typeparam name="TFeature">Type of required <see cref="T:Keen.VRage.DCS.Components.Component"/></typeparam>
            <param name="feature">First matching component is returned here</param>
            <param name="conditional">Optionally specify custom function further constraining required properties of the <see cref="T:Keen.VRage.DCS.Components.Component"/></param>
            <returns>True if component was found, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.All``1(System.Func{``0,System.Boolean})">
            <summary>
            Enumerate all <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> that match specified type
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.ForEach``1(System.Action{``0},System.Boolean)">
            <summary>
            Enumerate all <see cref="T:Keen.VRage.DCS.Components.Component">Components</see> that match specified type
            </summary>
            <param name="action">Callback hat will process the <see cref="T:Keen.VRage.DCS.Components.Component">Components</see></param>
            <param name="reverse">Enumeration can optionally proceed in reverse order</param>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.FromDataEntity(Keen.VRage.DCS.Accessors.DEntityContext)">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Components.Entity"/> attached to given DataEntity.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.TryGetFromDataEntity(Keen.VRage.DCS.Accessors.DEntityContext)">
            <inheritdoc cref="M:Keen.VRage.DCS.Components.Entity.FromDataEntity(Keen.VRage.DCS.Accessors.DEntityContext)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.Entity.GetComposition">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/> from entity.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.EntityFunctions">
            <summary>
            Helpers for <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.IsInterface``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Check whether <see cref="T:Keen.VRage.DCS.Components.Entity"/> contains <see cref="T:Keen.VRage.DCS.Components.Component"/> with specified properties.
            Use only for interfaces or with conditional. Using this for Component without conditional will cause assert 
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.IsInterface``1(Keen.VRage.DCS.Components.Entity,``0@,System.Func{``0,System.Boolean})">
            <summary>
            Check whether <see cref="T:Keen.VRage.DCS.Components.Entity"/> contains <see cref="T:Keen.VRage.DCS.Components.Component"/> with specified properties
            Use only for interfaces or with conditional. Using this for Component without conditional will cause assert 
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.AsInterface``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Check whether <see cref="T:Keen.VRage.DCS.Components.Entity"/> contains <see cref="T:Keen.VRage.DCS.Components.Component"/> with specified properties
            Use only for interfaces or with conditional. Using this for Component without conditional will cause assert 
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.Single``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Find exactly one occurrence of TFeature on <see cref="T:Keen.VRage.DCS.Components.Entity"/>, throw if none or multiple
            <seealso cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.SingleOrDefault``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Find exactly one occurrence of TFeature on <see cref="T:Keen.VRage.DCS.Components.Entity"/>, null if none, throw if or multiple
            <seealso cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.First``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Find first occurrence of TFeature on <see cref="T:Keen.VRage.DCS.Components.Entity"/>, throw if none found
            <seealso cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.FirstOrDefault``1(Keen.VRage.DCS.Components.Entity,System.Func{``0,System.Boolean})">
            <summary>
            Find first occurrence of TFeature on <see cref="T:Keen.VRage.DCS.Components.Entity"/>, null if none found
            <seealso cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.EntityFunctions.GetSceneUnsafe(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Use only if you are sure that it's safe to access scene from Init
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.IEntityLifetimeTracker">
            <summary>
            <see cref="T:Keen.VRage.Library.Threading.ILifetimeAdapter"/> for <see cref="T:Keen.VRage.DCS.Components.Entity"/> and <see cref="T:Keen.VRage.DCS.Components.Component"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.GetInSceneLifetime(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Get lifetime that is invalidated when <see cref="T:Keen.VRage.DCS.Components.Entity"/> exits current active simulation.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.TryGetInSceneLifetime(Keen.VRage.DCS.Components.Entity,System.Boolean)">
            <inheritdoc cref="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.GetInSceneLifetime(Keen.VRage.DCS.Components.Entity)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.GetAllocationLifetime(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Get lifetime that is invalidated when <see cref="T:Keen.VRage.DCS.Components.Entity"/> gets destroyed.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.TryGetAllocationLifetime(Keen.VRage.DCS.Components.Entity,System.Boolean)">
            <inheritdoc cref="M:Keen.VRage.DCS.Components.IEntityLifetimeTracker.GetAllocationLifetime(Keen.VRage.DCS.Components.Entity)"/>
        </member>
        <member name="T:Keen.VRage.DCS.Components.IEntityLifetime">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.IEntityLifetimeTracker"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Components.IEntityLifetime.IsExpired">
            <summary>
            <see cref="M:Keen.VRage.Library.Threading.ILifetimeAdapter.IsExpired(System.Object)"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.LifetimeToken">
            <summary>
            Minimal implementation of <see cref="T:Keen.VRage.DCS.Components.IEntityLifetime"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Components.SimpleEntityLifetime">
            <summary>
            Default <see cref="T:Keen.VRage.DCS.Components.IEntityLifetimeTracker"/> for <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.CommandBufferAttribute">
            <summary>
            This annotation tells the compiler where to store generated commands
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.CommandBufferAttribute.#ctor(System.Type,System.String)">
            <summary>
            Contract version without any instance argument
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.CommandBufferAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Contract version with automatically included instance argument identified by `instanceMember`
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.ReplayAttribute">
            <summary>
            This tells compiler where to put code for command buffer consumption
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.ReplayAttribute.ConcurrentReplay">
            <summary>
            Set to true if you expect Replay to happen concurrently with recording
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.OnBeforeCommandAttribute">
            <summary>
            Annotated method is invoked before each submitted command
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.OnAfterCommandAttribute">
            <summary>
            Annotated method is invoked after each submitted command
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.NoOnBeforeCommandAttribute">
            <summary>
            Annotated command doesn't invoke <see cref="T:Keen.VRage.DCS.Contracts.OnBeforeCommandAttribute"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.NoOnAfterCommandAttribute">
            <summary>
            Annotated command doesn't invoke <see cref="T:Keen.VRage.DCS.Contracts.OnAfterCommandAttribute"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.CommandAttribute">
            <summary>
            Identifies Commands on CommandBuffer in generated code
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.CommandAttribute.Type">
            
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.CommandAttribute.Kind">
            
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.CommandAttribute.CommandEnum">
            
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.CommandAttribute.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.BufferCommandsAttribute">
            <summary>
            Command buffers are auto-decorated with this attribute
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.BufferCommandsAttribute.CommandsEnum">
            
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.BufferCommandsAttribute.#ctor(System.Type)">
            
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.ContractHandlerAttribute">
            <summary>
            Attach this attribute to an interface which should be <see langword="partial"/>-expanded root of Contract handlers.
            Interfaces for satellite Contracts will be generated to the same namespace.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHandlerAttribute.#ctor(System.Type)">
            
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHandlerAttribute.#ctor(System.Type,System.Type)">
            
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.EntityContractHandlerAttribute">
            <summary>
            Attach this attribute to a class which should be <see langword="partial"/>-expanded to implement
            Contract Commands for Entity Components in current assembly.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.EntityContractHandlerAttribute.#ctor(System.String,System.String)">
            <summary />
            <param name="entityToComponentMember">System will call this method to translate Entity identifier to Component</param>
            <param name="entityToDataContextMember">System will call this method to translate Entity identifier to Data-oriented representation of entity</param>
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.CommandHandlerAttribute">
            <summary>
            Decorates generated contract interface and its stubs.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.CommandHandlerAttribute.CommandId">
            
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.CommandHandlerAttribute.CommandsEnum">
            
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.CommandHandlerAttribute.#ctor(System.Type,System.Int32)">
            
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.EntityInstanceHandlerAttribute">
            <summary>
            Decorates generated instance contract stubs.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.EntityInstanceHandlerAttribute.InterfaceType">
            
        </member>
        <member name="P:Keen.VRage.DCS.Contracts.EntityInstanceHandlerAttribute.ComponentType">
            
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.EntityInstanceHandlerAttribute.#ctor(System.Type,System.Type)">
            
        </member>
        <member name="T:Keen.VRage.DCS.Contracts.ContractHelpers">
            <summary>
            Helpers for contracts
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHelpers.BuildHandlerTable``1(System.Object,System.Boolean)">
            <summary>
            Build handler table for given `TCommandBuffer` and `system`
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHelpers.AssertAllCommandsHandled``1(System.ValueTuple{System.Object,System.IntPtr}[])">
            <summary>
            Make sure given table can handle all commands for given command buffer type
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHelpers.PullInterfaceHandlersFrom(System.ValueTuple{System.Object,System.IntPtr}[],System.Object,System.Type)">
            <summary>
            Populate handler table with interface handlers from given `system`
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Contracts.ContractHelpers.GetCommandsForCommandBuffer(System.Type)">
            <summary>
            Returns info about Commands enum for given command buffer type
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.CoreData.DebugName">
            <summary>
            Distinguished debug name Data 
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.CoreData.InstanceBind`1">
            <summary>
            Distinguished Data type to bind references with Data Entity
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.CoreData.InstanceBind">
            <summary>
            <see cref="T:Keen.VRage.DCS.CoreData.InstanceBind`1"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.CoreData.StagingTag">
            <summary>
            See DCS Reference Manual for detailed description of staged DEntity behavior
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.DCSCoreConfiguration">
            <summary>
            Core settings for DCS.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.JobOrderSeed">
            <summary>
            Seed for randomizing DCS job order.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.LogJobs">
            <summary>
            Whether Jobs should be written to the logs.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#DCSCoreConfiguration}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#DCSCoreConfiguration}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.DCS.DCSCoreConfiguration@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfiguration.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#DCSCoreConfiguration}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Set(Keen.VRage.DCS.DCSCoreConfiguration@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.JobOrderSeedAccessor.Get(Keen.VRage.DCS.DCSCoreConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Set(Keen.VRage.DCS.DCSCoreConfiguration@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.LogJobsAccessor.Get(Keen.VRage.DCS.DCSCoreConfiguration@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Set(Keen.VRage.DCS.DCSCoreConfiguration@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfiguration.TypeInfoHolder.PreserveDeterministicJobOrderAccessor.Get(Keen.VRage.DCS.DCSCoreConfiguration@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition">
            <summary>
            Definition for migrating component guids on entities
            When replacing entities with another, some component Guid's may not match up. This definition is to help resolve component guid mapping for those entities
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Migrations">
            <summary>
             Key = From, Value = To
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Version">
            <summary>
            The maximum version these migrations will be applied.
            When the save's version is less than this version, the changes will apply.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#ComponentMigrationsDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#ComponentMigrationsDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#ComponentMigrationsDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Set(System.Object,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Set(System.Byte@,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Set(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition@,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Get(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentReferenceSuggesterAttribute">
            <summary>
            Suggests tags that can be used to reference a component of the provided <see cref="P:Keen.VRage.DCS.Definitions.ComponentReferenceSuggesterAttribute.ComponentType"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentTagsSuggesterAttribute">
            <summary>
            Suggests tags that current component can be referenced by in current prefab
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition">
            <summary>
            Compiled composition of <see cref="T:Keen.VRage.DCS.Components.Entity"/> <see cref="T:Keen.VRage.DCS.Components.Component">Components</see>
            Each array element corresponds to a Component.
            Components are ordered in (any) dependency order.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.IBuildStrategy">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.IBuildStrategy.Build(Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Builder@)">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.IBuildStrategy.CompileDependencyOrder(Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Builder@,System.Span{System.Int32})">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.IBuildStrategy.IterateDependencies(System.Int32,Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Builder)">
            <summary>
            Iterates all dependencies of a given component index
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Builder">
            <summary />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.ComponentCountAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.IdsAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TypesAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Definitions#Definition}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Definitions#Definition}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Definitions#Definition}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Definitions#Definition}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.DefinitionsAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Utils#StringId}}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Utils.StringId}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Utils#StringId}}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Utils#StringId}}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Collections#Immutable#ImmutableArray{Keen#VRage#Library#Utils#StringId}}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Utils.StringId}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Collections.Immutable.ImmutableArray{System.Collections.Immutable.ImmutableArray{Keen.VRage.Library.Utils.StringId}}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagsAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Int32}}#Set(System.Object,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Int32}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Int32}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Int32}}#Set(System.Byte@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder._tagIndexAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,System#Int32}}#Set(System.Object,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,System#Int32}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,System#Int32}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{Keen#VRage#Library#Utils#StringId,System#Int32}}#Set(System.Byte@,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@,Keen.VRage.Library.Collections.Readers.DictionaryReader{Keen.VRage.Library.Utils.StringId,System.Int32}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinition.TypeInfoHolder.TagIndexAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder">
            <inheritdoc cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder#ComponentInfo}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#Definition}#Set(System.Object,Keen.VRage.Library.Definitions.Definition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#Definition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#Definition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Definitions#Definition}#Set(System.Byte@,Keen.VRage.Library.Definitions.Definition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,Keen.VRage.Library.Definitions.Definition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.DefinitionAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Set(System.Object,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Type}#Set(System.Byte@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo.TypeInfoHolder.TypeAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TagSlots">
            <summary>
            Maps tags to the ID of a component
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Guid}}#Set(System.Object,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{Keen#VRage#Library#Utils#StringId,System#Guid}}#Set(System.Byte@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,System.Collections.Generic.Dictionary{Keen.VRage.Library.Utils.StringId,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.TagSlotsAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder#ComponentInfo}}#Set(System.Object,Keen.VRage.Library.Collections.KeyedList{System.Guid,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder#ComponentInfo}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder#ComponentInfo}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,Keen#VRage#DCS#Definitions#EntityCompositeDefinitionObjectBuilder#ComponentInfo}}#Set(System.Byte@,Keen.VRage.Library.Collections.KeyedList{System.Guid,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Set(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@,Keen.VRage.Library.Collections.KeyedList{System.Guid,Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.ComponentInfo}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder.TypeInfoHolder.ComponentsAccessor.Get(Keen.VRage.DCS.Definitions.EntityCompositeDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition">
            <summary>
            Definition for migrating entity composite definitions.
            Converting from an old planet prefab into a new planet prefab for example.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Migrations">
            <summary>
             Key = From, Value = To
             GUIDs of <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/>s
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Version">
            <summary>
            The maximum version these migrations will be applied.
            When the save's version is less than this version, the changes will apply.
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#EntityMigrationsDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#DCS#Definitions#EntityMigrationsDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.DCS.Definitions.EntityMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#EntityMigrationsDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Set(System.Object,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#Readers#DictionaryReader{System#Guid,System#Guid}}#Set(System.Byte@,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Set(Keen.VRage.DCS.Definitions.EntityMigrationsDefinition@,Keen.VRage.Library.Collections.Readers.DictionaryReader{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.MigrationsAccessor.Get(Keen.VRage.DCS.Definitions.EntityMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.DCS.Definitions.EntityMigrationsDefinition@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinition.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.DCS.Definitions.EntityMigrationsDefinition@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Migrations">
            <summary>
             Key = From, Value = To
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Version">
            <summary>
            The maximum version these migrations will be applied.
            When the save's version is less than this version, the changes will apply.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#ComponentMigrationsDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Set(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Get(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.DCS.Definitions.ComponentMigrationsDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Migrations">
            <summary>
             Key = From, Value = To
             GUIDs of <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/>s
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Version">
            <summary>
            The maximum version these migrations will be applied.
            When the save's version is less than this version, the changes will apply.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Definitions#EntityMigrationsDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,System#Guid}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Set(Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.MigrationsAccessor.Get(Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.DCS.Definitions.EntityMigrationsDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Internal.ComponentInfoIndexer">
            <summary>
            Collects DCS Component info
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.IndexedComponentAttribute">
            <summary>
            Attribute used by <see cref="T:Keen.VRage.DCS.Internal.RuntimeComponentInfo"/> to quickly get all DCS Components in current assembly
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.ReferenceHandle`1">
            <summary>
            Reference type handler for unmanaged Data
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Internal.ReferenceHandle`1.IsEmpty">
            <summary>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Internal.ReferenceHandle`1.Value">
            <summary>
            The reference instance
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Internal.ReferenceHandle`1.#ctor(`0)">
            <summary>
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Keen.VRage.DCS.Internal.ReferenceHandle`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Internal.ReferenceManagerChecker">
            <summary>
            Helper for <see cref="T:Keen.VRage.DCS.Internal.ReferenceManager"/> to check that resources are accessed correctly and are freed only once.
            </summary>
            <remarks>
            If you get assert from this class, check that you are not manually disposing DCS data fields - that is done automatically by DCS.
            </remarks>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeComponentInfo">
            <summary>
            Runtime info for <see cref="T:Keen.VRage.DCS.Components.Component">Components</see>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Internal.RuntimeComponentInfo.InstanceBindTypeId">
            <summary>
            <see landword="default" /> means no bind
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeComponentInfo.RuntimeComponentInfoException">
            <summary>
            Thrown when there is an issue with RuntimeComponentInfos
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeDataInfo">
            <summary>
            Runtime info for DCS Data
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeDataInfo.Info">
            <inheritdoc cref="T:Keen.VRage.DCS.Internal.RuntimeDataInfo"/>
        </member>
        <member name="F:Keen.VRage.DCS.Internal.RuntimeDataInfo.Info.TypeId">
            <summary>
            <see cref="T:Keen.VRage.DCS.Internal.TypeId`1"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Internal.RuntimeDataInfo.Info.Size">
            <summary>
            Active Data size, including intra-filed padding and struct end padding
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeDataInfo.Info.DisposeCallbackT">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Internal.RuntimeDataInfo.DisposeData``1(``0@)">
            <summary>
            Run dispose callbacks for T Data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Internal.RuntimeDataInfo.Of(System.Int32)">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Internal.RuntimeDataInfo"/> for <see cref="T:Keen.VRage.DCS.Internal.TypeId`1"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Internal.RuntimeDataInfo.Of(System.Type)">
            <summary>
            Get <see cref="T:Keen.VRage.DCS.Internal.RuntimeDataInfo"/> for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Internal.RuntimeDataInfo.NeedsDispose``1">
            <summary>
            Whether T Data need to be explicitly disposed via <see cref="M:Keen.VRage.DCS.Internal.RuntimeDataInfo.DisposeData``1(``0@)"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.RuntimeDataInfo.SynthData">
            <summary>
            Dummy struct representing synthetic type
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Internal.TypeId`1">
            <summary>
            Integral type identifier for Data <see cref="T:System.Type"/>
            See <see cref="T:Keen.VRage.DCS.Internal.RuntimeDataInfo"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.NamespaceDoc">
            <summary>
            Originally, we had a big problem with scaling the code processing to many threads. We gained very little by running code
            on multiple threads (tens of percents instead of hundreds). Cache thrashing was the main reason and it is explained along with examples
            in <see href="https://docs.google.com/document/d/1seoiaPbi1PXEC5MRaBmg6rJMCE3LaZPzO5w3ftWR_xg/edit#">this document</see>.
            
            Also, we had a big issue with over-reliance on inheritance in block entities design, making it inflexible to create new types of blocks.
            In the VRage3, we want to employ a component system relying on composition instead of inheritance and having the data oriented counterpart,
            the DCS, helping to solve the cache thrashing and allow safe and performant scaling of multi threaded processing.
            
            The data oriented part of the system is introduced in
            <see href="https://docs.google.com/presentation/d/1rc2bCkmIMbxkY9epRAkN67u5CxUxn6q7l8b-rbJJkw0/edit#slide=id.p">this presentation</see>.
            Its connection to the object oriented part along with the entity lifetime in
            <see href="https://docs.google.com/presentation/d/1yzJ_S9vJ4yGyueIK69Eg7sh5NC2AnvoixufzY5DgSWg/edit#slide=id.p">this presentation</see>.
            Design for the block and grid gameplay components in Game 2 in
            <see href="https://docs.google.com/document/d/1G5SE0bytoYnxRg9A9b1sE0WDm-xBhmaMEJ9jqgC-ncM/edit#heading=h.kb9ul3ewi5bq">this document</see>.
            
            See <see href="https://docs.google.com/document/u/1/d/1s8pLHV4HxnUAX14YGzYLzD3BdqbuDrjEP0qa2If69Bw/edit">reference manual</see> for
            more information.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder">
            <summary>
            Serialized <see cref="T:Keen.VRage.DCS.Components.Entity"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.Definition">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Entity"/> Composite type
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.ObjectBuilders">
            <summary>
            ObjectBuilders for <see cref="T:Keen.VRage.DCS.Components.Component"/> in order dictated by <see cref="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.Definition"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.DebugName">
            <summary>
            Debug name assigned to the <see cref="T:Keen.VRage.DCS.Components.Entity"/> upon instantiation
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#ObjectBuilders#EntityObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Object,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Byte@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DefinitionAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Set(System.Object,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Set(System.Byte@,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.TypeInfoHolder.DebugNameAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderFunctions">
            <summary>
            Functions to manipulate entity object builders.
            <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderFunctions.TryGetIndexOf(Keen.VRage.DCS.Definitions.EntityCompositeDefinition,System.ReadOnlySpan{Keen.VRage.Library.Utils.StringId},System.Boolean@)">
            <summary>
            Get index of matching objectBuilder. 
            </summary>
            <param name="composite">Composite for matching</param>
            <param name="matchingTags">Tags to be matched</param>
            <param name="uniqueMatch">Whether component was uniquely identified or not. False when matchingTags are spread among multiple components.</param>
            <returns></returns>
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderFunctions.ComponentSpec">
            
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder">
            <summary>
            Partial implementation of generated serializer for <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>.
            Used to auto-update old EntityObjectBuilders in saves
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Definition">
            <summary>
            <see cref="T:Keen.VRage.DCS.Components.Entity"/> Composite type
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.ObjectBuilders">
            <summary>
            ObjectBuilders for <see cref="T:Keen.VRage.DCS.Components.Component"/> in order dictated by <see cref="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder.Definition"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.DebugName">
            <summary>
            Debug name assigned to the <see cref="T:Keen.VRage.DCS.Components.Entity"/> upon instantiation
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#ObjectBuilders#EntityObjectBuilderObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Object,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Byte@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DefinitionAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Set(System.Object,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#KeyedList{System#Guid,System#Object}}#Set(System.Byte@,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,Keen.VRage.Library.Collections.KeyedList{System.Guid,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.ObjectBuildersAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Set(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder.TypeInfoHolder.DebugNameAccessor.Get(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderValidationHelper">
            <summary>
            Helper for validating EntityObjectBuilders
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Profiling.IJobContracts">
            <summary>
            Implement this to collect information about jobs from <see cref="T:Keen.VRage.DCS.Profiling.JobCommandBuffer"/>.
            <see cref="T:Keen.VRage.DCS.Profiling.JobDataConsumer"/> implements this interface and can be used as the basis for a job data consumer class.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Profiling.JobCommandBuffer">
            <summary>
            Class for collecting information about jobs
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Profiling.JobDataConsumer">
            <summary>
            Class that collects data produced by <see cref="T:Keen.VRage.DCS.Profiling.JobCommandBuffer"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene">
            <summary>
            Storage for DEntity Data and Job pipeline.
            Access Data via <see cref="T:Keen.VRage.DCS.Accessors.DEntityContext"/> and run Job pipeline via <see cref="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)"/>.
            Use <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/> to create instance of <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            See <see cref="N:Keen.VRage.DCS.Accessors"/> and <see cref="N:Keen.VRage.DCS.Annotations"/> for more details.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.SyncArchetypes(Keen.VRage.DCS.Scenes.Scene.EventGroup)">
            <summary>
            Some archetypes, especially staging ones, are not run by any jobs
            so their memory is not defragmented at any point during the Tick, thus we need to do this once upon a time manually.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.Archetype">
            <summary>
            Dynamically sized data structure!!!
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Scenes.Scene.Archetype.AliasedTypeIds">
            <summary>
            See <see cref="F:Keen.VRage.DCS.Internal.RuntimeDataInfo.Info.AliasedTypes"/>
            { AliasedTypeId, DataIndex } x AliasedTypeIdsCount
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.Archetype.IsCompatible(System.Int32[],System.Span{System.Int32})">
            <summary>
            Returns true if the archetype fits into the component/data constraints
            Where index 0 is the number of types for MustHave.
            Where index 1+(Value at 0) is the type ids for MustHave.
            Values after index 1+(Value at 0) are DoesNotHaves.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.Archetype.DeleteEntity(System.Int32,Keen.VRage.DCS.Scenes.Scene,System.Boolean)">
            <summary>
            Mark Entity slot for recycling and dispose Data if needed
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.Archetype.CompactEntityStorage(Keen.VRage.DCS.Scenes.Scene,System.Int32,System.Int32)">
            <summary>
            Assumes lock(_archetypeStorageSync)
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.Archetype.ChunkStorage">
            <summary>
            Dynamically sized data structure!!!
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.ExecuteInParallel">
            <summary>
            Moves execution to Parallel and on Dispose back to DCS
            No-op when executed from non-DCS thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.IsCurrentThreadDCS">
            <summary>
            Returns <see langword="true"/> for threads that execute synchronously with the current <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            There can be multiple active DCS threads at the same time, for example when executing Data-oriented Jobs.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.MoveToDCS">
            <summary>
            Moves execution to a DCS thread.
            Callbacks are executed sequentially (no threading).
            <seealso cref="M:Keen.VRage.DCS.Scenes.Scene.IsCurrentThreadDCS"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.MoveToDCS``1">
            <summary>
            Moves execution to the specific stage of DCS
            <seealso cref="M:Keen.VRage.DCS.Scenes.Scene.MoveToDCS"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.ComputeDuring``1(System.Type,``0,System.Func{``0,Keen.VRage.Library.Threading.Task},Keen.VRage.DCS.Components.Entity)">
            <summary>
            <paramref name="taskFactory"/> will be executed (started and finished) when DCS at <paramref name="jobSystem"/> stage
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.FinishDuring``1(Keen.VRage.Library.Threading.Task@)">
            <summary>
            Can be used when caller is sure that current stage is <typeparamref name="TJobSystem"/>.
            <paramref name="task"/> will be finished until <typeparamref name="TJobSystem"/>'s End job group
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.FinishBefore``1(Keen.VRage.Library.Threading.Task@)">
            <summary>
            <paramref name="task"/> will be finished until <typeparamref name="TJobSystem"/>'s Begin job group
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.DCSToken">
            <summary>
            The <see cref="T:Keen.VRage.DCS.Scenes.Scene.DCSToken"/> is a custom awaitable type that allows the user to move the execution flow of an asynchronous
            method to the DCS 
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DCSToken.#ctor(Keen.VRage.DCS.Scenes.Scene,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:Keen.VRage.DCS.Scenes.Scene.DCSToken"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DCSToken.GetAwaiter">
            <summary>
            Get the Awaiter which is the same instance.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DCSToken.GetResult">
            <summary>
            The SM calls the GetResult method to dispatch any exceptions the task might have raised while it processed, 
            in this case we have a fake task, so it does not produce exceptions.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DCSToken.OnCompleted(System.Action)">
            <summary>
            Sends the next action to the queue.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DCSToken.OnCompleted(Keen.VRage.Library.Threading.ICompletion)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.ParallelSection">
            <summary>
            Moves execution to DCS on Dispose
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.ParallelSection.#ctor(Keen.VRage.DCS.Scenes.Scene)">
            <summary>
            Moves execution to DCS on Dispose
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.CBToken">
            <summary>
            <see cref="M:Keen.VRage.DCS.Scenes.Scene.OpenCommandBufferIfNeeded(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.CommandBuffer.TryGetDataPtr(Keen.VRage.DCS.Accessors.DEntity,System.Int32,System.IntPtr)">
            <returns>True if null `archetypePtr` means tracked deletion of the Data</returns>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.#ctor(System.Collections.Generic.List{Keen.VRage.DCS.Builders.SceneBuilder.JobInfo},System.Collections.Generic.List{System.Type},System.Collections.Generic.Dictionary{System.Type,Keen.VRage.DCS.Builders.SceneBuilder.JobSystemIndex})">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.Dispose">
            <summary>
            Dispose all resources held by the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            <see cref="T:Keen.VRage.DCS.Scenes.Scene"/> can't be resurrected/reused after this call
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.GetArchetype(System.Span{System.Int32})">
            <summary>
            Get or allocate <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> for specified set of <see cref="T:Keen.VRage.DCS.Internal.TypeId`1">TypeIds</see>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.GetArchetypeOf(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Get current <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> of existing <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity(System.Nullable{Keen.VRage.DCS.Accessors.DEntityArchetype},Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Create new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> of the specified <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/>.
            Important: Data storage of allocated entity is not initialized and may contain garbage.
                       Make sure to initialize it properly before use!
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.RemoveEntity(Keen.VRage.DCS.Accessors.DEntity)">
            <summary>
            Remove specified <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> from the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags">
            <summary>
            <see cref="M:Keen.VRage.DCS.Scenes.Scene.GetDataPointer(Keen.VRage.DCS.Accessors.DEntity,System.Int32,Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.MarkWrite">
            <summary>
            Mark data as written by this access
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.AddIfNeeded">
            <summary>
            Will create new data if needed
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.ClearStorage">
            <summary>
            Pre-clear the storage for newly allocated Data
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.WriteAccess">
            <summary>
            <see cref="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.MarkWrite"/>
            <see cref="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.AddIfNeeded"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.ClearAndWrite">
            <summary>
            <see cref="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.WriteAccess"/>
            <see cref="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.ClearStorage"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.DataPointerQueryFlags.InitWrite">
            <summary>
            Does not mark the data as written but expects that user
            fully writes the Data and doesn't leave the storage uninitialized
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)">
            <summary>
            Run Job pipeline once
            </summary>
            <param name="doSync">When <see langword="true"/>, invokes <see cref="M:Keen.VRage.DCS.Scenes.Scene.DoSync"/> before and after <see cref="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)"/></param>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.DoSync">
            <summary>
            Performs internal maintenance to improve Data access times and free outstanding memory.
            Exclusive with <see cref="M:Keen.VRage.DCS.Scenes.Scene.Tick(System.Boolean)"/> and other DEntity operations. See notes on <see cref="F:Keen.VRage.DCS.Scenes.Scene._entityIndexSyncGuard"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.SceneDebuggerContext">
            <summary>
            Debug functionality related to the DCS Debugger.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene._entityIndexSyncGuard">
             It is safe to invoke following methods concurrently...
             <see cref="M:Keen.VRage.DCS.Scenes.Scene.AllocateEntity(Keen.VRage.DCS.Scenes.ArchetypeRef,Keen.VRage.DCS.Accessors.DEntity)"/>
             <see cref="M:Keen.VRage.DCS.Scenes.Scene.UpdateEntityIndex(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Scenes.ArchetypeRef,System.Int32)"/>
             <see cref="M:Keen.VRage.DCS.Scenes.Scene.GetEntityIndex(Keen.VRage.DCS.Accessors.DEntity)"/>
             <see cref="M:Keen.VRage.DCS.Scenes.Scene.DeleteEntity(Keen.VRage.DCS.Accessors.DEntity)"/>
            
             ... under following conditions:
             1) <see cref="M:Keen.VRage.DCS.Scenes.Scene.SyncEntities"/> is exclusive with all other calls
             2) <see cref="M:Keen.VRage.DCS.Scenes.Scene.ExpandEntityIndex(System.Int32,System.Boolean)"/> is exclusive with all other calls
             3) Queries for one entity are never concurrent (currently not asserted, too expensive)
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.EntityAliveStates">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.IsEntityAlive(Keen.VRage.DCS.Accessors.DEntity,Keen.VRage.DCS.Scenes.Scene.EntityAliveStates)">
            <summary>
            This method is strictly for debugging.
            No, it is not safe to keep Entity handles forever and check this method before using them!
            Use proper lifetime methods, state of this changes concurrently with simulation!
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.EventGroup">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.ParallelThreadSequenceBehavior">
            <summary>
            What should sequence-checking methods return when queried from outside of DCS thread
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.GetArchetype(System.Type[])">
            <summary>
            Get or allocate <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> for specified set of <see cref="T:System.Type">Types</see>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.GetArchetype(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Get or allocate <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype"/> for specified set of <see cref="T:System.Type">Types</see>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.PreallocateEntityIndex(System.Int32)">
            <summary>
            Pre-allocate storage for specified amount of new entities to minimize allocations during large updates
            </summary>
            <param name="requiredCapacity">How meany new entities on top of existing entities do you expect</param>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.EnumerateEntities">
            <summary>
            Return list of all alive <see cref="T:Keen.VRage.DCS.Accessors.DEntity">DEntities</see> in the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.EnumerateArchetypes">
            <summary>
            Return list of all <see cref="T:Keen.VRage.DCS.Accessors.DEntityArchetype">archetypes</see> in the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            May contain archetypes with no entities
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.QueryArchetypes(System.Span{System.Int32},System.Int32,Keen.VRage.Library.Memory.BufferReference{Keen.VRage.DCS.Accessors.DEntityArchetype})">
            <summary>
            Query archetypes that meed specific set or required and denied Data types.
            <seealso cref="P:Keen.VRage.DCS.Internal.TypeId`1.Value"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.QueryEntities(System.Span{System.Int32},System.Int32)">
            <summary>
            Query archetypes that meed specific set or required and denied Data types.
            <seealso cref="P:Keen.VRage.DCS.Internal.TypeId`1.Value"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity(System.Type[])">
            <summary>
            Add new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with specified Data <see cref="T:System.Type">Types</see> into the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``1(``0)">
            <summary>
            Add new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with specified Data into the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``2(``0,``1)">
            <summary>
            Add new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with specified Data into the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``3(``0,``1,``2)">
            <summary>
            Add new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with specified Data into the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.AddEntity``4(``0,``1,``2,``3)">
            <summary>
            Add new <see cref="T:Keen.VRage.DCS.Accessors.DEntity"/> with specified Data into the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.Stats">
            <summary>
            <see cref="M:Keen.VRage.DCS.Scenes.Scene.GetStats(Keen.VRage.DCS.Scenes.Scene.Stats,System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.Stats.TotalAllocatedMemory">
            <summary>
            This number only counts allocations, does not sub frees.
            <see cref="T:Keen.VRage.DCS.Scenes.Scene"/> rarely returns memory it once acquired, so this is not off THAT much.
            Treat this as upper bound.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.JobInfo.TypeConstraints">
            <summary>
            Must have count
            Must have TypeIds
            Mush not have TypeIds
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.JobInfo.RuntimeTypeIds">
            <summary>
            Data arguments TypeIds (JobRuntime.DataPointerCount)
            Writable TypeIds (JobRuntime.WritableDataCount)
            Full write TypeIds (JobRuntime.FullWriteDataCount)
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Scenes.Scene.JobInfo.JobGroupOrderedIndex">
            <summary>
            Index in jobGroupsOrdered
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.JobRuntime.RunLayout">
            <summary>
            Dynamically sized data structure!!!
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Scenes.Scene.JobRuntime.RunLayout.EventTriggerStorage">
            <summary>
            Dynamically sized data structure!!!
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Scenes.Scene.UserObject">
            <summary>
            Free storage for whatever context data the <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>-owning layer might need
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Scenes.Scene.DebugName">
            <summary>
            Scene name used for debugging purposes
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Scenes.Scene.EntitySerializer">
            <summary>
            Used to serialized and deserialize <see cref="T:Keen.VRage.DCS.Components.Entity"/> from and to <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Scenes.Scene.EntityLifetimeTracker">
            <summary>
            Used for async/await execution and cancellation policy
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Scenes.Scene.JobContextFor(System.Int32)">
            <summary>
            Get or set Job context for specified job
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EntityCloner">
            <summary>
            Custom cloner for <see cref="T:Keen.VRage.DCS.Components.Entity"/> to allow for various cloning strategies provided through <see cref="T:Keen.VRage.DCS.Serialization.IEntityCloningContext"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EntityCloningContext">
            <summary>
            <see cref="T:Keen.VRage.DCS.Serialization.IEntityCloningContext"/> that creates new Entity stubs as replacements
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EntityProxySerializationContext">
            <summary>
            Context holding information for proxy serialization of entities about what entity to pair with what key. 
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EntityProxySerializer">
            <summary>
            Proxy serializer for entities.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EntityProxySerializer.ProxySerializer.Convert(Keen.VRage.Library.Serialization.SerializationContext,System.Int32@,Keen.VRage.DCS.Components.Entity@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBMigration">
            <summary>
            Describes how an older entity composite can be translated into it's up-to-date version
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBMigration.EntityObjectBuilder">
            <summary>
            EOB for grabbing new object builders during a migration. Clone before using.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBMigration.Removes">
            <summary>
            Collection of indices for components GUIDS that are no longer present in the latest version of the Entity Composite.
            Ordered by largest index to least.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBMigration.Inserts">
            <summary>
            Collection of object builders that will be inserted at a given index.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBMigration.Swaps">
            <summary>
            Collection of components that were present in both old/new versions but with different positions
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBMigration.Replaces">
            <summary>
            Collection of Object Builders for components that exist, but have the wrong type of Object builder.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBSnapshot">
            <summary>
            Snapshot of entity's composition
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Serialization#EOBSnapshot}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Object,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#DCS#Definitions#EntityCompositeDefinition}#Set(System.Byte@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Set(Keen.VRage.DCS.Serialization.EOBSnapshot@,Keen.VRage.DCS.Definitions.EntityCompositeDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.DefinitionAccessor.Get(Keen.VRage.DCS.Serialization.EOBSnapshot@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Guid}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Set(Keen.VRage.DCS.Serialization.EOBSnapshot@,System.Collections.Immutable.ImmutableArray{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ComponentsAccessor.Get(Keen.VRage.DCS.Serialization.EOBSnapshot@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Set(System.Object,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Immutable#ImmutableArray{System#Type}}#Set(System.Byte@,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Set(Keen.VRage.DCS.Serialization.EOBSnapshot@,System.Collections.Immutable.ImmutableArray{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBSnapshot.TypeInfoHolder.ObjectBuildersAccessor.Get(Keen.VRage.DCS.Serialization.EOBSnapshot@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBUpdateContext">
            <summary>
            Describes how an older entity composite can be translated into it's up-to-date version
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.Snapshots">
            <summary>
            Collection of object builders for a given <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/>
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.Version">
            <summary>
            Version of the save so migrations can be selectively done
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.Migrations">
            <summary>
            Collection of migrations describing how to translate an older composite into a new one
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.Migrate(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilderObjectBuilder)">
            <summary>
            Migrates if a migration for the EOBOB exists
            </summary>
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Serialization#EOBUpdateContext}#Serializer">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Set(Keen.VRage.DCS.Serialization.EOBUpdateContext@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.SnapshotsAccessor.Get(Keen.VRage.DCS.Serialization.EOBUpdateContext@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Object,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Version}#Set(System.Byte@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Set(Keen.VRage.DCS.Serialization.EOBUpdateContext@,System.Version@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.VersionAccessor.Get(Keen.VRage.DCS.Serialization.EOBUpdateContext@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBMigration}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBMigration}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBMigration}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBMigration}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBMigration}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBMigration}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Set(Keen.VRage.DCS.Serialization.EOBUpdateContext@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBMigration}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContext.TypeInfoHolder.MigrationsAccessor.Get(Keen.VRage.DCS.Serialization.EOBUpdateContext@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.IEntityCloningContext">
            <summary>
            Contexts usable by <see cref="T:Keen.VRage.DCS.Serialization.EntityCloner"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.IEntityCloningContext.Clone(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Clone entity
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.IEntityProxySerializationContext">
            <summary>
            Interface for various contexts of <see cref="T:Keen.VRage.DCS.Serialization.EntityProxySerializer"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.IEntityProxySerializationContext.GetEntity(System.Int32)">
            <summary>
            Get entity from id
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.IEntityProxySerializationContext.GetEntityId(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Get id from entity
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.SimpleNamedObjectSerializer`3">
            <summary>
            Abstract base class for named object serializers.
            </summary>
            <typeparam name="TSerializer">Type of the serializer.</typeparam>
            <typeparam name="TValue">Type of the serialized value.</typeparam>
            <typeparam name="TName">Type of the proxy "name" used to serialize the value.</typeparam>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Snapshots">
            <summary>
            Collection of object builders for a given <see cref="T:Keen.VRage.DCS.Definitions.EntityCompositeDefinition"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#Serialization#EOBUpdateContextObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Set(System.Object,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#Guid,Keen#VRage#DCS#Serialization#EOBSnapshot}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Set(Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@,System.Collections.Generic.Dictionary{System.Guid,Keen.VRage.DCS.Serialization.EOBSnapshot}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder.TypeInfoHolder.SnapshotsAccessor.Get(Keen.VRage.DCS.Serialization.EOBUpdateContextObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Signals.EntityInternalSignalsApi">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Signals.EntityInternalSignalsApi.InvocationToken">
            <summary>
            Give an access to ExternalHandlers.
            When work with handlers is done <see cref="M:Keen.VRage.DCS.Signals.EntityInternalSignalsApi.InvocationToken.Dispose"/> must be called
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Signals.ExternalHandlersVersion">
            <summary>
            Represent a version of External Handlers
            It mimics C# delegate behaviour where it copies it's content every time modification happens
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.TaskExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.TaskExtensions.DCSContinuation.Activate">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.BitOps.SetBitThreadSafe(System.Span{System.Byte},System.Int32)">
            <summary>
            Does not guarantee any external synchronization,
            but ensures that multiple writes of different values result in proper OR-merge of the cumulative inputs
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.BitOps.HighMaskUL(System.Int32)">
            <returns>High N-bit mask</returns>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.BitOps.LowMaskUL(System.Int32)">
            <returns>Low N-bit mask</returns>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.BitOps.PruneBitField(System.UInt64*,System.UInt64*,System.Int32)">
            <summary>
            Takes `bitField` and removes each bit where corresponding bit in `deleteBits` is set,
            shrinking/shifting the `bitField` in the process.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.CBMarshal">
            <summary>
            Commonly used function to read and write <see cref="T:Keen.VRage.DCS.Utils.CommandBufferBase"/> data
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.Read``1(System.Byte@,System.IntPtr@,System.IntPtr)">
            <summary>
            Use to read next typed data in the command buffer
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.ReadNullable``1(System.Byte@,System.IntPtr@,System.IntPtr)">
            <inheritdoc cref="M:Keen.VRage.DCS.Utils.CBMarshal.Read``1(System.Byte@,System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.ReadObject(System.Byte@,System.IntPtr@,System.IntPtr,Keen.VRage.DCS.Utils.CommandBufferBase.WithObjects)">
            <inheritdoc cref="M:Keen.VRage.DCS.Utils.CBMarshal.Read``1(System.Byte@,System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.ReadDynamic(System.Byte@,System.IntPtr@,System.IntPtr,System.Int32)">
            <summary>
            Use to read next dynamic data in the command buffer
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.Write``1(System.Byte@,System.IntPtr@,System.Int32,``0)">
            <summary>
            Use to write next typed data in the command buffer
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.WriteNullable``1(System.Byte@,System.IntPtr@,System.Int32,System.Nullable{``0})">
            <inheritdoc cref="M:Keen.VRage.DCS.Utils.CBMarshal.Write``1(System.Byte@,System.IntPtr@,System.Int32,``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.WriteObject(System.Byte@,System.IntPtr@,System.Int32,Keen.VRage.DCS.Utils.CommandBufferBase.WithObjects,System.Object)">
            <inheritdoc cref="M:Keen.VRage.DCS.Utils.CBMarshal.Write``1(System.Byte@,System.IntPtr@,System.Int32,``0)"/>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CBMarshal.WriteDynamic(System.Byte@,System.IntPtr@,System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Use to write next dynamic data into the command buffer
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.CommandBufferBase">
            <summary>
            Multi-producer command buffer
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.Utils.CommandBufferBase._activeBuffer">
            <summary />
        </member>
        <member name="F:Keen.VRage.DCS.Utils.CommandBufferBase._committedBuffers">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.#ctor">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.Reset">
            <summary>
            Reset the command buffer for new use
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.AllocWriteBuffer(System.Int32)">
            <summary>
            Allocates <param name="allocationSize">allocationSize</param> bytes of storage for write
            Use in concert with <see cref="T:Keen.VRage.DCS.Utils.CBMarshal"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.AllocateNewBuffer(System.Int32)">
            
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.ReadBuffer(System.Int32,System.IntPtr@,System.IntPtr@)">
            <summary>
            Returns readable range of the specified buffer.
            Use in concert with <see cref="T:Keen.VRage.DCS.Utils.CBMarshal"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.CommandBufferBase.WithObjects">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.Utils.CommandBufferBase.WithObjects._objects">
            <summary>
            Motivation of ValueTuple usage is to create array of structs, not array of classes. 
            Array of structs will avoid the performance penalty from array covariance.
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CommandBufferBase.WithObjects.Reset">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Utils.ComponentSetAdapter`1">
            <summary>
            Adapter for <see cref="T:Keen.VRage.Library.Memory.Set"/> of <see cref="T:Keen.VRage.DCS.Components.Component"/>
            - Add support for required IEquatable interface
            - Use Component.DEntity hash code to ensure stable iteration between different runs 
            </summary>
            <typeparam name="T">the wrapped Component type</typeparam>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.CyclicDependencyException">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Utils.CyclicDependencyException.Root">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.Utils.CyclicDependencyException.CyclicDependencies">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.CyclicDependencyException.#ctor(System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.Utils.FixedBlockAllocator">
            <summary>
            TODO: Move to VRage.Lib
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.FixedBlockAllocator.DataBlockHeader">
            
        </member>
        <member name="T:Keen.VRage.DCS.Utils.GraphExporter">
            <summary>
            Exports the job graph
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.GraphExporter.DumpJobs(Keen.VRage.DCS.Builders.SceneBuilder,System.String,System.String)">
            <summary>
            Dumps jobs of a <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/> into a text file inside <see cref="F:Keen.VRage.DCS.Utils.GraphExporter.JOBS_DUMP_FOLDER"/> directory
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.GraphExporter.JobGroupSource">
             <summary>
             Where does this job come from
            
             Only supports engine and game for now
             </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.ICommandBufferSerializer`1">
            <summary>
            See Keen.VRage.DCS.Tests.CommandBuffers.CustomSerializerTests
            </summary>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.ICommandBufferSerializer`1.GetPayloadSize(`0@)">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.ICommandBufferSerializer`1.Serialize(System.Byte@,System.IntPtr@,System.Int32,`0@)">
            <summary />
        </member>
        <member name="M:Keen.VRage.DCS.Utils.ICommandBufferSerializer`1.Deserialize(System.Byte@,System.IntPtr@,System.IntPtr)">
            <summary />
        </member>
        <member name="T:Keen.VRage.DCS.Utils.CommandBufferSerializerAttribute">
            <summary>
            Same as <see cref="T:Keen.VRage.DCS.Utils.ICommandBufferSerializer`1"/>, but usable for ref structs
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.PackedUInt32">
            <summary>
            JIT is dummy and always spills unpacked structs to stack on callee side
            https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgAIBhAWACgBvO8584gZnNwygFcwNyABWxgA1jAAmAVQCSAOwxtSTFo1osNrDjwCWC8gDE8GANwrNW8rv0BlADYQA7iYvlz5AL7v3xAIxIrPQEAcRgMGxhIOQkACmExSVkFJXJsAEp3NVdWAHZUgDp7JzN1Fi9aDyA=
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.TheeOneInt">
            <inheritdoc cref="T:Keen.VRage.DCS.Utils.PackedUInt32"/>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.SwapPool`1">
            <summary>
            Fastest pool for low contention
            Juggles one instances, allocating new one if last one is currently in use.
            Does not check leaks => You are free to not return instance (for example when it grows too large), but you're also not protected from leaks
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Keen.VRage.DCS.Utils.Top">
            <summary>
            Stable Topological sort
            </summary>
            <returns>Stable-sorted sequence</returns>
            <exception cref="T:Keen.VRage.DCS.Utils.CyclicDependencyException">upon failure</exception>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.Top.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.HashSet{``0}})">
            <inheritdoc cref="T:Keen.VRage.DCS.Utils.Top"/>
        </member>
        <member name="M:Keen.VRage.DCS.Utils.Top.DependencyLevels``1(``0[],System.Func{``0,System.Collections.Generic.HashSet{``0}},System.Func{``0,``0,System.Int32})">
            <summary>
            Topological dependency levels, or longest path from root for each node given a top-sorted list of nodes.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.Validation.EntityComponentDefinitionLocator">
            <summary>
            Helper for working with validators
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.JobOrderSeed">
            <summary>
            Seed for randomizing DCS job order.
            </summary>
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.LogJobs">
            <summary>
            Whether Jobs should be written to the logs.
            </summary>
        </member>
        <member name="T:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#DCS#DCSCoreConfigurationObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Object,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Int32}#Set(System.Byte@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Set(Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.JobOrderSeedAccessor.Get(Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Set(Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder.TypeInfoHolder.LogJobsAccessor.Get(Keen.VRage.DCS.DCSCoreConfigurationObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:DCSDebugView">
            <summary>
            Provides pretty printing of common DCS data
            </summary>
        </member>
        <member name="M:DCSDebugView.ToString(Keen.VRage.DCS.Scenes.Scene,System.Text.StringBuilder)">
            <summary>
            Pretty print <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>, all <see cref="T:Keen.VRage.DCS.Accessors.DEntity">DEntities</see> and their Data
            </summary>
        </member>
        <member name="M:DCSDebugView.ToString(Keen.VRage.DCS.Accessors.DEntityContext,System.Text.StringBuilder)">
            <summary>
            Pretty print <see cref="T:Keen.VRage.DCS.Accessors.DEntity" /> and its Data
            </summary>
        </member>
        <member name="M:DCSDebugView.ToString``1(``0,System.Text.StringBuilder)">
            <summary>
            Pretty print Data (or any other struct)
            </summary>
        </member>
        <member name="M:DCSDebugView.ToString(System.Type,System.IntPtr,System.Text.StringBuilder)">
            <summary>
            Pretty print Data (or any other struct) at give location
            </summary>
        </member>
        <member name="M:DCSDebugView.Box(System.IntPtr,System.Type)">
            <summary>
            Get boxed view of Data
            </summary>
        </member>
        <member name="T:SceneBuilderExtensions">
            <summary>
            Helpers for <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/>
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Method builder for AsyncVoid methods.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
            Create the method builder.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
            Start the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Set the boxed state machine, unused.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>
            Notify about an exception while executing the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>
            Signal that the state machine has completed.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
    </members>
</doc>
