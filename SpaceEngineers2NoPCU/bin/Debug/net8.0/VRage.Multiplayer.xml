<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Multiplayer</name>
    </assembly>
    <members>
        <member name="T:Keen.VRage.Multiplayer.Annotations.Clients">
            <summary>
            Signal handlers marked with this attribute will be called on clients (from server or client itself)
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Annotations.ReaderCallbackAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Annotations.ReplicateAttribute">
            <summary>
            Mandatory attribute for all streamed models. Object and its parents are probed for this attribute.
            Only object in the hierarchy that contains this attribute will get replicated.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Annotations.Server">
            <summary>
            Signal handlers marked with this attribute will be called on server (from client or server itself)
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Annotations.SyncFromClients">
            <summary>
            Permits client-to-server synchronization of annotated sync properties and Data
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientId">
            <summary>
            Representation of ClientId
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientId.#ctor(System.Int32)">
            <summary>
            Representation of ClientId
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientServerInfo.BindingsBasedClientServerInfo">
            <summary>
            Detects which prefabs belong to server and which to client
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientServerInfo.ClientServerInfoPostProcessor">
            <summary>
            Creates <see cref="P:Keen.VRage.Multiplayer.ClientServerInfo.ClientServerInfoPostProcessor.ClientServerInfo"/> each validation cycle.
            To access <see cref="P:Keen.VRage.Multiplayer.ClientServerInfo.ClientServerInfoPostProcessor.ClientServerInfo"/> don't forget to put <see cref="T:Keen.VRage.Library.Definitions.AfterAttribute`1"/> on your post processor.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientServerInfo.CompositeBindingsConfigurationExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.CompositeBindingsConfigurationExtensions.AddJobsBasedOnPairings(Keen.VRage.Core.Game.Systems.SessionBuilder,Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo)">
            <summary>
            Add jobs to the <paramref name="builder"/> based on <see cref="T:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition"/>s
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo">
            <summary>
            Can be used to check whether an entity composition is for server or client
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.ServerComponentTypes">
            <summary>
            Server component types
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.ClientComponentTypes">
            <summary>
            Client component types
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.IsServer(Keen.VRage.DCS.Definitions.EntityCompositeDefinition)">
            <summary>
            Returns true if the given composite is intended to be on server
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.IsClient(Keen.VRage.DCS.Definitions.EntityCompositeDefinition)">
            <summary>
            Returns true if the given composite is intended to be on client
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.AddComponent(System.Type,Keen.VRage.Library.Definitions.Definition,System.Object,System.Boolean)">
            <summary>
            Adds additional dependency 
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfo.HasClientPairing(System.Guid)">
            <summary>
            Whether a prefab has pairing
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfoConfigurationProvider">
            <summary>
            Allows configuration-request intercepting
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ClientServerInfo.IClientServerInfoConfigurationProvider.TryGetConfiguration(System.Type,Keen.VRage.Library.Definitions.Configuration@)">
            <summary>
            Called when a configuration is requested
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition">
            <summary>
            Defines a pairing between a server composition and a client prefab.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.ServerComposite">
            <summary>
            The server composite definition to pair to a client.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.ClientPrefab">
            <summary>
            A paired prefab that contains object builders which will receive the server composition.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.ReplicatedData">
            <summary>
            The types that are set to the client entity from the server Data Entity.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Multiplayer#Data#PrefabBindingDefinition}#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameSerializer">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#NameType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer{Keen#VRage#Multiplayer#Data#PrefabBindingDefinition}#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Keen#VRage#Library#Serialization#INamedObjectSerializer#ShouldSerializeAsName(Keen.VRage.Library.Serialization.SerializationContext,System.Object@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Data#PrefabBindingDefinition}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ServerCompositeAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ClientPrefabAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Set(System.Object,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Set(System.Byte@,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinition.TypeInfoHolder.ReplicatedDataAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinition@)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.ServerComposite">
            <summary>
            The server composite definition to pair to a client.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.ClientPrefab">
            <summary>
            A paired prefab that contains object builders which will receive the server composition.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.ReplicatedData">
            <summary>
            The types that are set to the client entity from the server Data Entity.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Data#PrefabBindingDefinitionObjectBuilder}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ServerCompositeAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ClientPrefabAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Set(System.Object,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Collections#MergeableList{System#Type}}#Set(System.Byte@,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Set(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@,Keen.VRage.Library.Collections.MergeableList{System.Type}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder.TypeInfoHolder.ReplicatedDataAccessor.Get(Keen.VRage.Multiplayer.Data.PrefabBindingDefinitionObjectBuilder@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator">
            <summary>
            <see cref="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator.Start``1(Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext,System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            <typeparam name="TResult">TResult</typeparam> of type <see cref="T:System.DBNull"/> is used as <see cref="T:System.Void"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator.Finish``1(Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext,``0,System.Exception)">
            
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator.MoveToClient(Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext,System.Runtime.CompilerServices.IAsyncStateMachine,Keen.VRage.Multiplayer.NetworkStories.ClientRequest)">
            
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator.MoveToServer(Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext,System.Runtime.CompilerServices.IAsyncStateMachine,Keen.VRage.Multiplayer.NetworkStories.ServerRequest)">
            
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext">
            <summary>
            <see cref="T:Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator"/>
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext.Skipped">
            <summary>
            True if story was skipped/aborted (see <see cref="M:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext.SkipStory"/>)
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryContext.SkipStory">
            <summary>
            Skip/abort this story
            If this is called while the story is currently transitioned/moved to the remote side, 
            it will take one extra tick to finalize on the original side and be removed from the "stories in progress" collection.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory">
            <summary>
            Describes multi-step communication/negotiation intent between client and server
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory`1">
            <inheritdoc cref="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory"/>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.MoveTo">
            <summary>
            Transition network story to remote context
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.NetworkStories.MoveTo.Client(Keen.VRage.Multiplayer.ClientId)">
            <summary>
            TODO: Resolve how clients will be identified
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.ServerRequest">
            
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.ClientRequest">
            
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryMethodBuilder`1">
            <summary>
            <see cref="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory`1"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStoryMethodBuilder">
            <summary>
            <see cref="T:Keen.VRage.Multiplayer.NetworkStories.NetworkStory"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.NetworkStories.SkipNetworkStoryException">
            <summary>
            Special exception used to signal the NetworkStory it should be canceled/aborted
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.IFrameSerializer">
            <summary>
            Implementing types can be used to store serialized command buffer commands.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.IsBlackListed(System.String)">
            <summary>
            Checks whether a signal is blacklisted and should be ignored.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.SetStorage(Keen.VRage.Multiplayer.Replay.IRecordingStorage)">
            <summary>
            Adds the storage to serialize to.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.ClearStorage">
            <summary>
            Clears the current storage.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.AddSignalType(System.String)">
            <summary>
            Adds signal type name;
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.AddObject(System.Object)">
            <summary>
            Adds the reference struct to the list of references to serialize.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.AddObject(System.Type,System.ReadOnlySpan{System.Byte})">
            <summary>
            In case of ref structs pass in the type and the first byte to reconstruct it.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.Serialize">
            <summary>
            Serializes the signal. Assumes that signal type is added along with the arguments.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.Discard">
            <summary>
            Discards the signal data for the current signal after determining its not serializable.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IFrameSerializer.Deserialize(Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Deserializes the signal into a list of objects for the command buffer.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.IRecordingStorage">
            <summary>
            Implementing types can be used to store the data read from the buffer.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IRecordingStorage.WriteIntoStorage(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Write the arguments into storage.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IRecordingStorage.ReadFromStorage(System.Int32)">
            <summary>
            Read the next signal from the storage.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.IReplayNarrator">
            <summary>
            Interface implemented by custom network story narrators to allow the user to suspend / resume story narration.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.IReplayNarrator.Session">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IReplayNarrator.SuspendCapture">
            <summary>
            Suspend the capture of the signals while a signal is being replayed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IReplayNarrator.ResumeCapture">
            <summary>
            Resume the capture of signals.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.IReplayNarratorProvider">
            <summary>
            Can provide a custom network story narrator to handle network stories on recording on replay.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IReplayNarratorProvider.TryGetStoryNarrator(Keen.VRage.Multiplayer.NetworkStories.INetworkStoryNarrator@)">
            <summary>
            Looks for a custom story narrator if present.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.PayloadConversionHelper">
            <summary>
            Helper methods to convert the InProcessPayload to underlying data and vice versa.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.RecorderReaderAttribute">
            <summary>
            Decorates generated recorder deserializer code.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.RecorderReaderAttribute.CommandId">
            
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.RecorderReaderAttribute.Name">
            
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.RecorderReaderAttribute.CommandsEnum">
            
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.RecorderReaderAttribute.#ctor(System.Type,System.Int32,System.String)">
            
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.RecorderFrameSerializer">
            <summary>
            Serializer for the recorder frames.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SerializedPayload">
            <summary>
            Wrapper for the data in the serialized payload that marks it should be converted back to payload.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.SerializedPayload@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#SerializedPayload}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Object}#Set(System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Object}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Object}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Object}#Set(System.Byte@,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Set(Keen.VRage.Multiplayer.Replay.SerializedPayload@,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SerializedPayload.TypeInfoHolder.PayloadAccessor.Get(Keen.VRage.Multiplayer.Replay.SerializedPayload@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.ReplayRecorderIndexer">
            <summary>
            Collects recorder commands and stores them in <see cref="F:Keen.VRage.Multiplayer.Replay.ReplayRecorderIndexer.Table"/> field
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.ReplayRecorderIndexer.RecorderCommand">
            <summary>
            Represents the recorder for a specific signal type
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.ReplayRecorderModule">
            <summary>
            Marks an assembly that contains serializers and deserializers for DCS signals and points to a type that stores them.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.ReplayRecorderTableBuilder">
            <summary>
            Builds reader tables for replay tool. See <see cref="M:Keen.VRage.Multiplayer.Replay.ReplayRecorderTableBuilder.BuildReaderTables"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SignalInfo">
            <summary>
            Information for reconstructing the signal.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.ReplayToolUtilities">
            <summary>
            Various utilities for replay tool functionality
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredComponentWrapper">
            <summary>
            Wraps the entity for the purposes of serialization.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponentWrapper.#ctor(Keen.VRage.DCS.Components.Component)">
            <summary>
            Wraps the entity for the purposes of serialization.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredComponent">
            <summary>
            Struct that represents a serialized entity based on position and guid.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#StoredComponent}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Object,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Utils#StringId}#Set(System.Byte@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Library.Utils.StringId@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.TagAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredComponent@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Multiplayer#Replay#StoredEntity}#Set(System.Object,Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Multiplayer#Replay#StoredEntity}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Multiplayer#Replay#StoredEntity}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Multiplayer#Replay#StoredEntity}#Set(System.Byte@,Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredComponent@,Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredComponent.TypeInfoHolder.EntityAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredComponent@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredComponentWrapperSerializer">
            <summary>
            Serializer for the StoredEntityWrapper.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredEntityWrapper">
            <summary>
            Wraps the entity for the purposes of serialization.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntityWrapper.#ctor(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Wraps the entity for the purposes of serialization.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredEntity">
            <summary>
            Struct that represents a serialized entity based on position and guid.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#StoredEntity}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredEntity@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsValidAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredEntity@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSessionAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Object,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Boolean}#Set(System.Byte@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredEntity@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IsSingleAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Object,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Guid}#Set(System.Byte@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredEntity@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.IdAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Set(System.Object,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{Keen#VRage#Library#Mathematics#Vector3D}#Set(System.Byte@,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredEntity@,Keen.VRage.Library.Mathematics.Vector3D@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredEntity.TypeInfoHolder.PositionAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredEntity@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IEntityLocator.GetEntity(System.Guid,Keen.VRage.Library.Mathematics.Vector3D)">
            <summary>
            Locates an entity of a given type and position in the scene.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IEntityLocator.GetSingleEntity(System.Guid)">
            <summary>
            Locates an entity that's expected to exist one in the scene.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.IEntityLocator.GetSession">
            <summary>
            Gets the active session.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.EntityPositionLocatorContext">
            <summary>
            Context for serializing entity and component wrappers that helps rematch to existing entities.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.EntityPositionLocatorContext.#ctor(Keen.VRage.Core.Game.Systems.Session)">
            <summary>
            Context for serializing entity and component wrappers that helps rematch to existing entities.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredEntityWrapperSerializer">
            <summary>
            Serializer for the StoredEntityWrapper.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper">
            <summary>
            Wraps the network story state machine for the purposes of serialization.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#StoredStateMachineWrapper}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.StateMachineTypeAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#String}#Set(System.Byte@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.BuilderTypeAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Object}}#Set(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Object}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Object}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,System#Object}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.FieldsAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#Library#Definitions#Definition}}#Set(System.Object,System.Collections.Generic.Dictionary{System.String,Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#Library#Definitions#Definition}}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#Library#Definitions#Definition}}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{System#Collections#Generic#Dictionary{System#String,Keen#VRage#Library#Definitions#Definition}}#Set(System.Byte@,System.Collections.Generic.Dictionary{System.String,Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Set(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@,System.Collections.Generic.Dictionary{System.String,Keen.VRage.Library.Definitions.Definition}@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper.TypeInfoHolder.DefinitionFieldsAccessor.Get(Keen.VRage.Multiplayer.Replay.StoredStateMachineWrapper@)">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper">
            <summary>
            Serialized type that represents the NetworkStoryMethodBuilder
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#MethodBuilderWrapper}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.MethodBuilderWrapper.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SessionWrapper">
            <summary>
            An empty struct that marks a session should be put in its place
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Replay.SessionWrapper@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SessionWrapper.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replay.SessionWrapper.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Replay#SessionWrapper}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replay.SessionWrapper.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replay.SessionWrapper.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SessionWrapper.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replay.SessionWrapper.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ReplicationContext">
            <summary>
            Addresses a replication environment for a Scene.
            Represents a "side of execution", can be Client or Server.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.ReplicationContext.Identifier">
            <summary>
            A unique identifier that is shared across remote contexts.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ReplicationContext.#ctor(System.Int32)">
            <summary>
            Creates a Replication Context from a unique identifier.
            </summary>
            <param name="identifier">The identifier for this context</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.ReplicationContext.Equals(Keen.VRage.Multiplayer.ReplicationContext)">
            <summary>
            Tells if a context is the same as this instance.
            </summary>
            <param name="other">The other context to compare</param>
            <returns>True if both contexts are the same, false otherwise</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.ReplicationEventContext">
            <summary>
            Context provided for all network events.
            Can be used to identify callers and validate required (access) rights.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ExclusiveTag">
            <summary>
            Data tag that signifies an entity is not currently replicated to any other session. It is exclusive to the current session
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.NullOnAnyReplicationFailAttribute">
            <summary>
            The parameter will replicate to a null value if replication fails - even in the case when the pairing for the object never existed.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.INullOnAnyReplicationFail">
            <summary>
            interface common to all NullIfNeverExisted types
            corresponds to <see cref="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.NullOnAnyFail"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.NullOnAnyReplicationFail`1">
            <summary>
            Specify the translate to null, even in the case where the remote entity would never have a pair
            Only use this to wrap NetworkStory parameters, since the replication failure attributes cannot be used there
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.NullOnReplicationFailAttribute">
            <summary>
            The parameter will replicate to a null value if replication fails - it will still throw if the pairing for the object never existed.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.INullOnReplicationFail">
            <summary>
            interface common to all NullOnReplicationFail types
            corresponds to <see cref="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Null"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.NullOnReplicationFail`1">
            <summary>
            Specify the "translate to null" strategy when the wrapped object replication fails
            Only use this to wrap NetworkStory parameters, since the replication failure attributes cannot be used there
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy">
            <summary>
            Possible responses to a remote signal parameter 
            that failed to replicate to a live object
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Throw">
            <summary>
            Throw an exception (default behavior)
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Skip">
            <summary>
            Ignore/swallow the signal (handler won't be invoked)
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Null">
            <summary>
            Pass a null value to the signal handler
            Still throws if the local pair isn't found for a remote instance
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.NullOnAnyFail">
            <summary>
            Pass a null value to the signal handler even if the local pair wasn't found for the remote instance.
            Regular null strategy would throw in this case.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.OnReplicationFailAttribute">
            <summary>
            Base attribute class used to configure the replication behavior of signal parameters
            that legitly fail to replicate due to "natural causes" (e.g. mapping to a server side entity that
            has just been destroyed but whose destruction event hasn't reached the client yet due to network latency)
            <seealso cref="M:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext.TranslateObject(System.Object,Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy,System.Boolean@)"/>
            seealso: VRage.DCS.Generator.InProcessReplicationReaderCallbackGenerator
            seealso: VRage.DCS.Generator.InProcessReplicationTranslationTableGenerator
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.IReplicationFailureStrategy">
            <summary>
            interface common to all types that provide a replication failure strategy
            types implementing this interface are expected to implement the following property
            - private T _value (where T is the wrapped type, e.g. Entity/Component...)
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategyHelpers">
            <summary>
            Helper class for Replication Failure Strategies
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategyHelpers.GetStrategy(System.Type,Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy@,System.Type@)">
            <summary>
            Attempt to extract replication failure strategy and wrapped value type from an input IReplicationFailureStrategy wrapper type
            Otherwise, return sensible defaults (Throw)
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.SkipOnReplicationFailAttribute">
            <summary>
            Ignore the signal associated to this parameter if replication fails.
            Corresponding signal handlers will not be invoked on remote end.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.ISkipOnReplicationFail">
            <summary>
            interface common to all SkipOnReplicationFail types
            corresponds to <see cref="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Skip"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.SkipOnReplicationFail`1">
            <summary>
            Abort/cancel the entire network story if this field fails to replicate
            Only use this to wrap NetworkStory parameters, since the replication failure attributes cannot be used there
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.IThrowOnReplicationFail">
            <summary>
            interface common to all ThrowOnReplicationFail types
            corresponds to <see cref="F:Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy.Throw"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.ThrowOnReplicationFail`1">
            <summary>
            Throws exception in the network story if this field fails to replicate
            Only use this to wrap NetworkStory parameters, since the replication failure attributes cannot be used there
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.EntityTranslationContext">
            <summary>
            Cloning context for Entity proxy serialization. Allows for translation of entities from server version to client version using <see cref="T:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.HandlerConstructor">
            <summary>
            Single process constructor.
            Saves handlers that should be called during signal synchronization.
            Injects a handler that saves signal to command buffer
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplication">
            <summary>
            For direct replication between 2 <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>s
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationComponent">
            <summary>
            Host for the <see cref="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplication"/>
            TODO: The InProcessReplication should be eventually converted to Component fully, but Editor is not ready for that yet
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationReadersIndexer">
            <summary>
            Collects replication command buffer readers and stores them in <see cref="F:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationReadersIndexer.Readers"/> field
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationReadersModule">
            <summary>
            Marks an assembly that contains readers and points to a type that stores them
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationSessionComponent.PostInvoke(System.Action{Keen.VRage.Multiplayer.Replications.InProcess.SceneContext})">
            <summary>
            Sends invoke to other scene
            - Invocation is synchronized with local Scene
            - Invocation is synchronized with remote Scene
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationSessionComponent.InProcessPayload">
            <summary>
            Payload for passing entity data between sessions in the same process
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationSessionComponent.InProcessPayload.InProcessPayloadSerializer">
            <summary>
            Custom serializer for <see cref="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationSessionComponent.InProcessPayload"/> to skip transition from byte-span to byte-array and back
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationTranslationTable">
            <summary>
            Collects translation helpers for Signals and Network stories
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplicationTranslationTable.Translate(System.IntPtr,Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext,System.Byte@,Keen.VRage.Multiplayer.Replications.FailureStrategies.ReplicationFailureStrategy,System.Boolean@)">
            <summary>
            Helper for calling naked translation function pointer
            NOTE: the arguments after tranlationFuncPtr must match InProcessReplicationTranslationTableGenerator.MethodSignatureForType()
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.IReplicationPairingProvider">
            <summary>
             interface to get paired entity
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.IReplicationPairingProvider.GetPairedObject``1(``0)">
            <summary>
            Translate local object into remote one
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.RemoteOnly">
            <summary>
            Signal handlers marked with this attribute will be called only on opposite side
            Example: if you trigger signal on client, handler will be called only on server and vice versa
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext">
            <summary>
            Use in <see cref="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplication"/> replay readers to get
            necessary info for instance translations and remote signal triggers
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext.MarkDestroyed(System.Object)">
            <summary>
            There is a small window when Entity exists on client after it's just been destroyed on server.
            In order to prevent client signals from being replayed on dangling entity references on the server side,
            we flag these entities as "known but destroyed" so that we can safely ignore client signals involving
            these recently destroyed entities until the client has acknowledged the entity destruction (and RemoveObjectPair is called on server)
            
            This "tombstone" marker helps us distinguish between replicated entities that we've recently destroyed,
            and invalid/non-replicated entities we should not know about
            <seealso cref="T:Keen.VRage.Multiplayer.Replications.InProcess.ServerSceneContext"/>
            <seealso cref="T:Keen.VRage.Multiplayer.Replications.FailureStrategies.OnReplicationFailAttribute"/>
            </summary>
            <param name="localInstance">the local object we want to replace by a tombstone in the entity pairings</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext.AddSkippedEntities(System.Collections.Generic.HashSet{Keen.VRage.DCS.Components.Entity},System.Boolean)">
            <summary>
            Add remote entities that should be skipped during translation
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.ReplayContext.RemoveSkippedEntities(System.Collections.Generic.HashSet{Keen.VRage.DCS.Components.Entity})">
            <summary>
            Remove remote entities from skipped entities
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.SceneContext">
            <summary>
            <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>-specific data of <see cref="T:Keen.VRage.Multiplayer.Replications.InProcess.InProcessReplication"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.InProcess.ServerSceneContext.CreateBundle(Keen.VRage.Multiplayer.Replications.InProcess.ServerSceneContext.EntityBundleReplicationData,System.Collections.Generic.HashSet{Keen.VRage.DCS.Components.Entity})">
            <summary>
            Create a new EntityBundle from the provided EntityBundleReplicationData
            Entities in output bundle are guaranteed to be alive, but not necessarily in scene (can be staged)
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.SimpleReplicationMappingSessionComponentObjectBuilder">
            <summary>
            The object builder for SimpleReplicationMappingSessionComponent
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.InProcess.SimpleReplicationMappingSessionComponent">
            <summary>
            Simple replication mapping component that's not tied to client / server network components.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ReaderSignature">
            <summary>
            Unsafe delegate wrapper, so we don't declare delegate signature every time
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext">
            <summary>
            Manages replication for a Client <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext.#ctor(Keen.VRage.Multiplayer.ReplicationContext)">
            <summary>
            Creates a client replication context.
            </summary>
            <param name="context">The context this belongs to</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext.ProcessMessage``1(Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType,``0}@)">
            <summary>
            Processes the arrival of a Message from the Transport Layer.
            </summary>
            <typeparam name="TContent">The type for the content of this Message</typeparam>
            <param name="message">The <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.TransportMessage`2"/> that arrived on the attached Transport Layer</param>
            <exception cref="T:System.NotImplementedException">Thrown by headers that could not be understood by the client</exception>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext.ProcessDataOverride(System.Object@)">
            <summary>
            Processes a Data Override message.
            Inserts the Data received into the Entity Data related to the Entity indicated in the Message Content.
            </summary>
            <param name="messageContent">Information about the Data to be overridden</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext.ProcessCreation(System.Object@)">
            <summary>
            Processes an Entity creation message.
            Creates an Entity with a received Entity Object Builder and adds pairings.
            </summary>
            <param name="messageContent">A generic message content, containing the pairing and <see cref="T:Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder"/></param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ClientSceneReplicationContext.ProcessDestruction(System.Object@)">
            <summary>
            Processes an Entity destruction message.
            Destroys the Entity pointed to by the Message and removes its local pairing.
            </summary>
            <param name="messageContent">Contains the pairing of the Entity to destroy</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegister">
            <summary>
            Represents a register of replicated Data that is sent trough the Replication System.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegister.Pairing">
            <summary>
            The identifier for the Data holder across Contexts.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegister.TypeId">
            <summary>
            The Type Id for the Data that is transferred.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegister.Data">
            <summary>
            The actual Data in bytes.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry">
            <summary>
            Manages Data replication for Entities, and ensures its delivery using the Transport Layer.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry._pendingData">
            <summary>
            Per-Entry counter and tokens to actually know when Data has been delivered to all destinations.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry._tokens">
            <summary>
            Indicates which Entry belongs to each <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/>, to react when Data is acknowledged or dismissed.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry._remoteTransport">
            <summary>
            The Transport Layer to send Messages holding Entity Data.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.SetTransport(Keen.VRage.Multiplayer.Transport.IRemoteTransport)">
            <summary>
            Sets the Transport for the Data Registry, making the Registry listen to its events.
            </summary>
            <param name="transport">The Transport to send Messages and listen to acknowledgement</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.OnMessagesAcknowledged(Keen.VRage.Multiplayer.ReplicationContext,System.Collections.Generic.List{Keen.VRage.Multiplayer.Transport.Messages.MessageToken})">
            <summary>
            Informs that Messages have been received on a specific remote context.
            </summary>
            <param name="context">The context where the Messages are from</param>
            <param name="tokens">A list of tokens related to Messages that arrived on the remote context</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.OnMessagesFailed(Keen.VRage.Multiplayer.ReplicationContext,System.Collections.Generic.List{Keen.VRage.Multiplayer.Transport.Messages.MessageToken})">
            <summary>
            Informs that Messages have not been received on a specific remote context.
            </summary>
            <param name="context">The context where the Messages are from</param>
            <param name="tokens">A list of tokens related to Messages that have not arrived on the remote context</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.Override``1(Keen.VRage.DCS.Components.Entity,System.Object,``0@,System.Collections.Generic.List{Keen.VRage.Multiplayer.ReplicationContext})">
            <summary>
            Overrides Data from an <seealso cref="T:Keen.VRage.DCS.Components.Entity"/> with a pairing, and sends it to a collection of remote contexts.
            </summary>
            <typeparam name="T">The type of the <seealso cref="T:Keen.VRage.DCS.Components.Entity"/> Data to send</typeparam>
            <param name="source">The <seealso cref="T:Keen.VRage.DCS.Components.Entity"/> that owns the Data</param>
            <param name="pairing">The pairing for this <seealso cref="T:Keen.VRage.DCS.Components.Entity"/>, replicated across contexts</param>
            <param name="data">The actual Data to be sent</param>
            <param name="contexts">The remote contexts to send this Data to</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityDataEntry">
            <summary>
            Represents a key for the DataRegistry, which is used for book-keeping
            and knowing which data from which Entity is addressed.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityDataEntry.#ctor(Keen.VRage.DCS.Components.Entity,System.Type)">
            <summary>
            Represents a key for the DataRegistry, which is used for book-keeping
            and knowing which data from which Entity is addressed.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityTokenEntry">
            <summary>
            A container for Data and Tokens. Arrival for this Data has not yet been confirmed on all destinations.
            </summary>
            <param name="PendingDestinationCounter"></param>
            <param name="Tokens"></param>
            <param name="Register"></param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityTokenEntry.#ctor(System.Int32,System.Collections.Generic.List{Keen.VRage.Multiplayer.Transport.Messages.MessageToken},Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegister)">
            <summary>
            A container for Data and Tokens. Arrival for this Data has not yet been confirmed on all destinations.
            </summary>
            <param name="PendingDestinationCounter"></param>
            <param name="Tokens"></param>
            <param name="Register"></param>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityTokenEntry.PendingDestinationCounter">
            <summary></summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityTokenEntry.Tokens">
            <summary></summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replications.Remote.Data.ReplicatedDataRegistry.EntityTokenEntry.Register">
            <summary></summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId">
            <summary>
            Pairs objects across remote contexts. 
            Different Contexts hold the same NetworkId for the same paired object.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.Invalid">
            <summary>
            An invalid Id means that the pairing is either invalid or the object is no longer replicated.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId._id">
            <summary>
            A 64-bit integer that holds the same value across contexts for the same object pairing.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.IsValid">
            <summary>
            Tells if this Network Id is valid or not.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.#ctor(System.UInt64)">
            <summary>
            Creates a new Network Id from an internal 64-bit integer.
            </summary>
            <param name="id">The internal 64-bit integer to identify this object across contexts</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.Equals(Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId)">
            <summary>
            Indicates whether this instance is equal to a specified <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>.
            </summary>
            <param name="other">The id to test if it is the same as this instance</param>
            <returns>True if the given Network Id is the same as this instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.Equals(System.Object)">
            <summary>
            Indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to test if it is the same as this instance</param>
            <returns>True if the given object is the same as this instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code from this instance</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.ToString">
            <summary>
            Returns a string representing this <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>.
            </summary>
            <returns>A string that represents this id</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.op_Equality(Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId,Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId)">
            <summary>
            Indicates whether two <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>s are equal to each other.
            </summary>
            <param name="valueA">The first NetworkId to test against the second.</param>
            <param name="valueB">The second NetworkId to test against the first.</param>
            <returns>True if both Network Ids are equal, false if they are different</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId.op_Inequality(Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId,Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId)">
            <summary>
            Indicates whether two <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>s are different from each other.
            </summary>
            <param name="valueA">The first NetworkId to test against the second.</param>
            <param name="valueB">The second NetworkId to test against the first.</param>
            <returns>True if both Network Ids are different, false if they are the same</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkIdProvider">
            <summary>
            Generates <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>s for object pairing in Replication.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkIdProvider._counter">
            <summary>
            A counter that indicates the current id generated, used incrementally.
            It will reset itself after reaching overflow.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkIdProvider.#ctor">
            <summary>
            Creates an object that provides <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkIdProvider.Get">
            <summary>
            Obtains a new <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/> that is ensured not to be repeated.
            </summary>
            <returns>A new <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.Identity.NetworkId"/> to pair objects across contexts</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.IReplicationStrategy">
            <summary>
            Tells a replication context when Entities should start/stop replicating and their priorities.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Replications.Remote.IReplicationStrategy.OnStartsReplicating">
            <summary>
            Event called when an Entity needs to start replicating on a specific context.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Replications.Remote.IReplicationStrategy.OnStopsReplicating">
            <summary>
            Event called when an Entity needs to stop replicating on a specific context.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.IReplicationStrategy.GetPriority(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.DCS.Components.Entity)">
            <summary>
            Classes implementing this method can decide to alter priorities any moment, so this method must be invoked 
            any time Entity-related Data, Properties or Signals need to be sent trought the Transport Layer.
            </summary>
            <param name="context">The context that holds the replicated <see cref="T:Keen.VRage.DCS.Components.Entity"/> to know its priority</param>
            <param name="entity">The <see cref="T:Keen.VRage.DCS.Components.Entity"/> to know its priority</param>
            <returns>An integer representing the priority for this Entity. Priority should decide how important it is
            to replicate its Data and Signals. Lower number means higher priority</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType">
            <summary>
            Identifier for distinct Replication Messages that can be sent through Transport.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.Creation">
            <summary>
            Used for creating objects and begin pairing.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.Deletion">
            <summary>
            Used for deleting objects and stop pairing.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.Signal">
            <summary>
            Used for replicating signals.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.ReplicationRequest">
            <summary>
            Used when a client context needs to create an object again.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.DataOverride">
            <summary>
            Used for Entity Data overriding.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.Messages.ReplicationMessageType.PropertyOverride">
            <summary>
            Used for Component Property overriding.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponentObjectBuilder">
            <summary>
            Constructs a <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponentObjectBuilder.Context">
            <summary>
            The Scene Context to bind to the <see cref="T:Keen.VRage.Core.Game.Systems.Session"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent">
            <summary>
            Makes Replication with Data Overriding to be discoverable by systems inside a <see cref="T:Keen.VRage.Core.Game.Systems.Session"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent._context">
            <summary>
            Handles Replication for a scene.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent.TransportComponent">
            <summary>
            The associated Transport for the context.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent.Init(Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponentObjectBuilder)">
            <summary>
            Initializes the Component.
            </summary>
            <param name="objectBuilder">A builder to add a context to the component</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent.PostInit">
            <summary>
            Effectively binds the Transport after it has been initialized.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent.CreateJobContext(Keen.VRage.Core.Game.Systems.Session)">
            <summary>
            Creates a Job Context for a given session, returning the local replication instance.
            </summary>
            <param name="session">The session to create the Job Contexts to</param>
            <returns>A session component</returns>
            <exception cref="T:System.Exception">Throws if the session component is not a <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.ReplicationSessionComponent"/></exception>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext">
            <summary>
            Manages replication for a <see cref="T:Keen.VRage.DCS.Scenes.Scene"/> in a specific context.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext._context">
            <summary>
            The context that this object belongs to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext._objectIndex">
            <summary>
            Holds pairing to tell the identifier given a replicated object.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext._indexToObject">
            <summary>
            Holds pairing to tell the replicated object given a pairing identifier.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext._transport">
            <summary>
            Reference to the Transport Layer to send replication Messages.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext._scene">
            <summary>
            Reference to the scene this object handles replication for.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext.Transport">
            <summary>
            Gets or sets the Transport Layer.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext.#ctor(Keen.VRage.Multiplayer.ReplicationContext)">
            <summary>
            Constructs a <see cref="T:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext"/>, given a context.
            </summary>
            <param name="context">The context this object belongs to</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext.IsReplicated(System.Object)">
            <summary>
            Tells if an object is replicated across contexts. 
            This does not mean that the object already reached remote contexts, but that is addressed for replication on this side.
            </summary>
            <param name="element">The object to test if it is being replicated</param>
            <returns>True if the given object is replicated, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext.OnTransportAttached">
            <summary>
            Informs that the Transport Layer has been attached to contexts that implement this class.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.SceneReplicationContext.AddToSession(Keen.VRage.DCS.Builders.SceneBuilder,Keen.VRage.DCS.Builders.EntityBuilder@)">
            <summary>
            Adds this object to a specific session for it to handle replication.
            </summary>
            <param name="sceneBuilder">A <see cref="T:Keen.VRage.DCS.Builders.SceneBuilder"/> to pass Session Components</param>
            <param name="sessionComponents">An <see cref="T:Keen.VRage.DCS.Builders.EntityBuilder"/> to create Session Components</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext">
            <summary>
            Manages replication for a Server <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._signalChannel">
            <summary>
            A channel to send Signals.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._entityCreationChannel">
            <summary>
            A channel to send Entity Creation Messages that are relatively small.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._entityCreationStreamingChannel">
            <summary>
            A channel to send Entity Creation Messages that are considered big.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._strategy">
            <summary>
            A strategy to decide when to replicate Entities and their priorities.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._contextsByEntity">
            <summary>
            A collection of remote contexts that Entities are be replicated to.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._idProvider">
            <summary>
            A provider for Entity pairings.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext._replicatedDataRegistry">
            <summary>
            A registry for Entity Data.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext.#ctor(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.Multiplayer.Replications.Remote.IReplicationStrategy)">
            <summary>
            Creates a server replication context.
            </summary>
            <param name="context">The context this belongs to</param>
            <param name="strategy">The strategy used to replicate Entities and decide its priorities</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext.OnStartsReplicating(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.DCS.Components.Entity)">
            <summary>
            Starts replicating an <see cref="T:Keen.VRage.DCS.Components.Entity"/> on a specific context.
            </summary>
            <param name="context">The remote destination to replicate the <see cref="T:Keen.VRage.DCS.Components.Entity"/></param>
            <param name="entity">The <see cref="T:Keen.VRage.DCS.Components.Entity"/> to start replicating</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Replications.Remote.ServerSceneReplicationContext.OnStopsReplicating(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.DCS.Components.Entity)">
            <summary>
            Stops replicating an <see cref="T:Keen.VRage.DCS.Components.Entity"/> on a specific context.
            </summary>
            <param name="context">The remote destination to stop replicating the <see cref="T:Keen.VRage.DCS.Components.Entity"/></param>
            <param name="entity">The <see cref="T:Keen.VRage.DCS.Components.Entity"/> to stop replicating</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ReplicationCommandBufferIndexer">
            <summary>
            Collects replication command buffer commands and stores them in <see cref="F:Keen.VRage.Multiplayer.Replications.ReplicationCommandBufferIndexer.Table"/> field
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ReplicationCommandBufferIndexer.CommandBufferCommand">
            <summary>
            Represents reader and writer for a specific signal type
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ReplicationCommandBufferModule">
            <summary>
            Marks an assembly that contains writers and readers for command buffer and points to a type that stores them
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Replications.ReplicationTableBuilder">
            <summary>
            Builds writer and reader tables. See <see cref="M:Keen.VRage.Multiplayer.Replications.ReplicationTableBuilder.BuildTables(System.Collections.Generic.Dictionary{System.Type,System.IntPtr})"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.SecureIds.EntityId">
            <summary>
            Wrapper for entity pairing that is given to the client.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds">
            <summary>
            Provides a secure <see cref="T:Keen.VRage.Multiplayer.SecureIds.EntityId"/> for <see cref="T:Keen.VRage.DCS.Components.Entity"/> that can be shared with the client.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.BindContextToClient(System.Object,Keen.VRage.Multiplayer.ClientId)">
            <summary>
            Binds the given context to the client ID from the <see cref="T:Keen.VRage.Multiplayer.ReplicationEventContext"/>.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.TryGetContextForEntityId(Keen.VRage.Multiplayer.SecureIds.EntityId)">
            <summary>
            Obtains context for the given entity.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.GetIdForEntity(Keen.VRage.DCS.Components.Entity,System.Object)">
            <summary>
            Gets or creates the <see cref="T:Keen.VRage.Multiplayer.SecureIds.EntityId"/> for a given pairing.
            </summary>
            <param name="entity">The <see cref="T:Keen.VRage.DCS.Components.Entity"/> for which the <see cref="T:Keen.VRage.Multiplayer.SecureIds.EntityId"/> should be provided.</param>
            <param name="context">The object to whose lifetime this EntityId is bound to.</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.TryGetEntity(Keen.VRage.Multiplayer.SecureIds.EntityId,System.Object,System.Nullable{Keen.VRage.Multiplayer.ClientId})">
            <summary>
            Gets the <see cref="T:Keen.VRage.DCS.Components.Entity"/> for a given pairing.
            </summary>
            <param name="id">The <see cref="T:Keen.VRage.Multiplayer.SecureIds.EntityId"/> of the required <see cref="T:Keen.VRage.DCS.Components.Entity"/>.</param>
            <param name="context">The object to which lifetime this EntityId is bound to.</param>
            <param name="clientId">Null when validation of client access does not need to be validated</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.RemoveContext(System.Object)">
            <summary>
            Removes all mapping for the given context. Called automatically by replication.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.TypedContext``1(Keen.VRage.Multiplayer.ClientId)">
            <summary>
            Get or make secure context that is local for given client and current instance of <see cref="T:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds"/> but shared/keyed by the TType
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIdsFunctions">
            <summary>
            <see cref="T:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds"/>
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIdsFunctions.GetIdForEntity``1(Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds,Keen.VRage.DCS.Components.Entity,Keen.VRage.Multiplayer.ClientId)">
            <inheritdoc cref="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.GetIdForEntity(Keen.VRage.DCS.Components.Entity,System.Object)"/>
        </member>
        <member name="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIdsFunctions.TryGetEntity``1(Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds,Keen.VRage.Multiplayer.SecureIds.EntityId,Keen.VRage.Multiplayer.ClientId)">
            <inheritdoc cref="M:Keen.VRage.Multiplayer.SecureIds.ISecureEntityIds.TryGetEntity(Keen.VRage.Multiplayer.SecureIds.EntityId,System.Object,System.Nullable{Keen.VRage.Multiplayer.ClientId})"/>
        </member>
        <member name="T:Keen.VRage.Multiplayer.SecureIds.SinglePlayerSecureEntityIdsSessionComponent">
            <summary>
            Secure <see cref="T:Keen.VRage.Multiplayer.SecureIds.EntityId"/>s provider optimized for single player.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.IDataReplication">
            <summary>
            Used to replicate Data between remote <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>s
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IDataReplication.Override``1(Keen.VRage.DCS.Components.Entity,``0@)">
            <summary>
            Data will be sent to remote scene, validated according to the <see cref="T:Keen.VRage.Multiplayer.Annotations.SyncFromClients"/> and overriden in target Scene
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IDataReplication.Remove``1(Keen.VRage.DCS.Components.Entity)">
            <summary>
            Data will be removed from remote scene and validated according to the <see cref="T:Keen.VRage.Multiplayer.Annotations.SyncFromClients"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.IEntityReplication">
            <summary>
            Public for getting info about replicated Entities
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IEntityReplication.AwaitReplication(Keen.VRage.Multiplayer.SecureIds.EntityId,System.Object)">
            <summary>
            Await till Entity is replicated from server, or waiting is cancelled, whichever comes first
            </summary>
            <returns>Local Entity for successful await, null if Entity doesn't exist locally</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IEntityReplication.RequestEntityReplication(Keen.VRage.Multiplayer.SecureIds.EntityId,System.Object)">
            <summary>
            Request replication of entity from server.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.IObservableReplication">
            <summary>
            Used to replicate <see cref="T:Keen.VRage.Library.UI.ObservableObject"/>s between remote <see cref="T:Keen.VRage.DCS.Scenes.Scene"/>s
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IObservableReplication.RegisterObservable(Keen.VRage.Library.UI.ObservableObject)">
            <summary>
            Registers given <see cref="T:Keen.VRage.Library.UI.ObservableObject"/> for replication and synchronization with remote copies.
            Submitted instance is probed for <see cref="T:Keen.VRage.Multiplayer.Annotations.SyncFromClients"/> and follows standard rules
            The instance object and its parents must be probed for <see cref="T:Keen.VRage.Multiplayer.Annotations.ReplicateAttribute"/> and only the object
            with this attribute should get replicated.
            </summary>
            <returns>Token to be disposed when replication should stop caring about the object</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IObservableReplication.AwaitAllPendingChangesReplicated">
            <summary>
            Waits until all pending changes are replicated. Can be used for systems that need to do a cleanup after replication is done.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.IReplicationMapping">
            <summary>
            Interface used to provide access to clients making requests for object builders from the server.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IReplicationMapping.HasPairing(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder)">
            <summary>
            Test whether EOB can be converted
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IReplicationMapping.GetClientObjectBuilder(Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder,System.Collections.Generic.Dictionary{Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder,Keen.VRage.DCS.ObjectBuilders.EntityObjectBuilder})">
            <summary>
            Pass in the object builder of the server entity and get the equivalent client builder assuming a pairing exists.?
            Optionally collects pairs of server and client EntityObjectBuilders
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IReplicationMapping.GetClientPrefab(Keen.VRage.Core.Game.Definitions.PrefabDefinition)">
            <summary>
            Pass in the prefab of the server entity and get the equivalent client builder assuming a pairing exists.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.IReplicationMapping.GetServerComposite(Keen.VRage.DCS.Definitions.EntityCompositeDefinition)">
            <summary>
            Pass in the Composite of the Client Entity and get the equivalent Server Composite assuming a pairing exists.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer">
            <summary>
            Common storage for recording in-scene signals which can be later processed by replication
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer.Stub">
            <summary>
            
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer.ReplayTable">
            <summary />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer.Replay(System.Object,Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer.ReplayTable)">
            <summary>
            Replays signals
            </summary>
            <param name="context">Any object that read callbacks are aware of</param>
            <param name="replayTable">Table of readers. Look at <see cref="T:Keen.VRage.Multiplayer.Replications.ReplicationTableBuilder"/> </param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.CommandBufferState">
            <summary>
            Command buffer's reading state
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBufferSessionComponent">
            <summary>
            Holds <see cref="T:Keen.VRage.Multiplayer.Sessions.ReplicationCommandBuffer"/>
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.ContextMetrics">
            <summary>
            Holds information about remote contexts performance metrics.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.ContextMetrics.CPUTime">
            <summary>
            An average of the CPU tick time in seconds.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.ContextMetrics.AvailableMemory">
            <summary>
            Available memory left in the context in bytes.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.ContextMetrics.Bandwidth">
            <summary>
            Context receiving performance in bytes per second.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.DisconnectReason">
            <summary>
            Represents various reasons for which a remote context could disconnect.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.DisconnectReason.Timeout">
            <summary>
            The remote context failed to reply in the time window dedicated for timeout, and has been disconnected.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.DisconnectReason.Manual">
            <summary>
            The remote context manually disconnected.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport">
            <summary>
            Provides the Transport Layer services to systems within the same process.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport._localContext">
            <summary>
            The local context this Transport belongs to, helps identifying Messages and verifying endpoints.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport._traceChannel">
            <summary>
            A channel to log events related to Transport.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport._tokens">
            <summary>
            A collection of tokens for acknowledging messages.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport._receivers">
            <summary>
            A collection of receivers per Message Header type.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport._messageId">
            <summary>
            The current Message Id to create tokens with.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.Remote">
            <summary>
            The In-Process Transport counterpart to this instance.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.#ctor(Keen.VRage.Multiplayer.ReplicationContext)">
            <summary>
            Creates an In-Process Transport.
            </summary>
            <param name="local">The local context this Transport belongs to</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.System#IDisposable#Dispose">
            <summary>
            Disposes this object, flushing all <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/> that have not been acknowledged.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.ReceiveReliable``2(Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{``0,``1}@,Keen.VRage.Multiplayer.Transport.TransportChannel)">
            <summary>
            Receives a Reliable Message from the opposite Transport.
            </summary>
            <typeparam name="THeader">The type for the Message Header</typeparam>
            <typeparam name="TContent">The type for the Message Content</typeparam>
            <param name="message">The message to be received by this instance</param>
            <param name="channel">The <see cref="T:Keen.VRage.Multiplayer.Transport.TransportChannel"/> for the Message.
            Messages with the same Channel share ordering, and do not wait for Messages on different Channels.</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.ReceiveUnreliable``2(Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{``0,``1}@)">
            <summary>
            Receives an Unreliable Message from the opposite Transport.
            </summary>
            <typeparam name="THeader">The type for the Message Header</typeparam>
            <typeparam name="TContent">The type for the Message Content</typeparam>
            <param name="message">The message to be received by this instance</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.Bind(Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport)">
            <summary>
            Binds this Transport to its In-Process counterpart, enabling communication.
            Once this method is called, Messages can be sent.
            </summary>
            <param name="transportCounterpart">The in-process counterpart to this Transport</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.Unbind">
            <summary>
            Unbinds this Transport from an In-Process counterpart, disabling communcation.
            Messages should not be sent if another Context is not bind.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.Flush">
            <summary>
            Flushes Messages and informs their arrival on remote contexts
            (as with in-process Transport, all Messages are assumed to arrive at the destination)
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.InProcess.InProcessTransport.AcquireToken">
            <summary>
            Gets a <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/> to be used when sending a Message.
            </summary>
            <returns>A new token for Message confirmation</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.IRemoteTransport">
            <summary>
            Defines the Transport Layer services to higher layers and systems.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Transport.IRemoteTransport.OnEndpointConnected">
            <summary>
            Called when an endpoint has connected, referencing the Remote Context.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Transport.IRemoteTransport.OnEndpointDisconnected">
            <summary>
            Called when an endpoint has disconnected, referencing the Remote Context and the reason.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Transport.IRemoteTransport.OnMessagesAcknowledged">
            <summary>
            Called when a group of Messages have been delivered and acknowledged by a remote context.
            </summary>
        </member>
        <member name="E:Keen.VRage.Multiplayer.Transport.IRemoteTransport.OnMessagesFailed">
            <summary>
            Called when a group of Messages could not be sent to a destination.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.IRemoteTransport.AddReceiver``1(Keen.VRage.Multiplayer.Transport.Messages.ITransportMessageReceiver{``0})">
            <summary>
            Adds a Message receiver, which is able to listen to Messages arriving to this Transport.
            </summary>
            <typeparam name="THeader">The Header Type the receiver listens to</typeparam>
            <param name="receiver">The receiver to inform when Messages with certain header arrive</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.IRemoteTransport.SendMessageUnreliable``2(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{``0,``1}@)">
            <summary>
            Sends an Unreliable Message. Its delivery is not guaranteed.
            </summary>
            <param name="destination">The destination of the message, pointing to the endpoint that will receive it</param>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.IRemoteTransport.SendMessageUnreliableAcknowledged``2(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{``0,``1}@)">
            <summary>
            Sends an acknowledged Unreliable Message. Its delivery is not guaranteed.
            </summary>
            <param name="destination">The destination of the message, pointing to the endpoint that will receive it</param>
            <param name="message">The message to be sent</param>
            <returns>A <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/> to identify the message scheduling</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.IRemoteTransport.SendMessageReliable``2(Keen.VRage.Multiplayer.ReplicationContext,Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{``0,``1}@,Keen.VRage.Multiplayer.Transport.TransportChannel)">
            <summary>
            Sends a Reliable Message. It is acknowledged and guaranteed to be delivered in order.
            </summary>
            <param name="destination">The destination of the message, pointing to the endpoint that will receive it</param>
            <param name="message">The message to be sent</param>
            <param name="channel">The <see cref="T:Keen.VRage.Multiplayer.Transport.TransportChannel"/> for the Message. 
            Messages with the same Channel share ordering, and do not wait for Messages on different Channels.</param>
            <returns>A <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/> to identify the message scheduling</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.Messages.ITransportMessageReceiver`1">
            <summary>
            Listens to Transport Messages arriving on the local Transport.
            </summary>
            <typeparam name="THeader">The Header type for the Messages to listen to</typeparam>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.ITransportMessageReceiver`1.ReceiveUnreliableMessage``1(Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{`0,``0}@)">
            <summary>
            Receives an Unreliable Transport Message. 
            These come form a Remote Context and have a matched Header with the Type of this interface.
            </summary>
            <typeparam name="TContent">The type of the content of the Unreliable Transport Message</typeparam>
            <param name="message">The received Unreliable Message</param>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.ITransportMessageReceiver`1.ReceiveReliableMessage``1(Keen.VRage.Multiplayer.Transport.Messages.TransportMessage{`0,``0}@)">
            <summary>
            Receives an Reliable Transport Message.
            These come form a Remote Context and have a matched Header with the Type of this interface.
            </summary>
            <typeparam name="TContent">The type of the content of the Reliable Transport Message</typeparam>
            <param name="message">The received Reliable Message</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken">
            <summary>
            Identifies an acknowledged Message being sent through the Transport Layer, to know if it was received or not.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.MessageId">
            <summary>
            A unique ID to identify acknowledged Messages.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.Equals(Keen.VRage.Multiplayer.Transport.Messages.MessageToken)">
            <summary>
            Indicates whether this instance is equal to a specified <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/>.
            </summary>
            <param name="other">The token to test if it is the same as this instance</param>
            <returns>True if the given token is the same as this instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.Equals(System.Object)">
            <summary>
            Indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to test if it is the same as this instance</param>
            <returns>True if the given object is the same as this instance, false otherwise</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code from this instance</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.ToString">
            <summary>
            Returns a string representing this <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/>.
            </summary>
            <returns>A string that represents this token</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.op_Equality(Keen.VRage.Multiplayer.Transport.Messages.MessageToken,Keen.VRage.Multiplayer.Transport.Messages.MessageToken)">
            <summary>
            Indicates whether two <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/>s are equal to each other.
            </summary>
            <param name="valueA">The first MessageToken to test against the second.</param>
            <param name="valueB">The second MessageToken to test against the first.</param>
            <returns>True if both MessageTokens are equal, false if they are different</returns>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.Messages.MessageToken.op_Inequality(Keen.VRage.Multiplayer.Transport.Messages.MessageToken,Keen.VRage.Multiplayer.Transport.Messages.MessageToken)">
            <summary>
            Indicates whether two <see cref="T:Keen.VRage.Multiplayer.Transport.Messages.MessageToken"/>s are different from each other.
            </summary>
            <param name="valueA">The first MessageToken to test against the second.</param>
            <param name="valueB">The second MessageToken to test against the first.</param>
            <returns>True if both MessageTokens are different, false if they are the same</returns>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.Messages.TransportMessage`2">
            <summary>
            Represents a Message that travels through the Transport Layer. 
            Has a Header to filter Messages by it and let specific receivers listen to them, allowing to interpret the Content.
            Content holds the actual data that needs to be transferred.
            </summary>
            <typeparam name="THeader">The type of the Header of the Message</typeparam>
            <typeparam name="TContent">The type of the Content of the Message</typeparam>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.Messages.TransportMessage`2.Header">
            <summary>
            A Message Header to identify its contents.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.Messages.TransportMessage`2.Content">
            <summary>
            The content for this Message, can hold different types depending on
            the agreements between sending and receiving endpoints.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.Messages.TransportMessage`2.Priority">
            <summary>
            A priority for this Message. Lower number means higher priority.
            Messages with higher priority will be sent before Messages with lower priority.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponentObjectBuilder">
            <summary>
            Constructs a <see cref="T:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponent"/>.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponentObjectBuilder.Transport">
            <summary>
            The associated Transport to bind to a <see cref="T:Keen.VRage.Core.Game.Systems.Session"/>.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponent">
            <summary>
            Binds the Transport to be discoverable by systems inside a <see cref="T:Keen.VRage.Core.Game.Systems.Session"/>.
            </summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponent.Transport">
            <summary>
            The attached Transport to be used by systems living inside the <see cref="T:Keen.VRage.Core.Game.Systems.Session"/>. 
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponent.Init(Keen.VRage.Multiplayer.Transport.RemoteTransportSessionComponentObjectBuilder)">
            <summary>
            Initializes this Component.
            </summary>
            <param name="objectBuilder">A builder to initialize this component and bind the Transport</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Transport.TransportChannel">
            <summary>
            A Channel in which Reliable Messages travel.
            Messages from the same Channel are ordered and wait for previous Reliable Messages with the same Channel to arrive
            before delivering to listeners.
            </summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Transport.TransportChannel.ChannelId">
            <summary>
            A unique identifier for the channel.
            </summary>
        </member>
        <member name="M:Keen.VRage.Multiplayer.Transport.TransportChannel.#ctor(System.UInt16)">
            <summary>
            Creates a Transport Channel.
            </summary>
            <param name="id">The unique identifier for the Channel</param>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Utils.ISkipReplicate">
            <summary>
            Interface for entities that should skip replication.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Utils.SharedInProcess`1">
            <summary>
            Used for wrapping shared in-process data to be sent from server to client in initialization.
            </summary>
        </member>
        <member name="T:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Deserialize(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Serialize(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Json.JsonSerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeMembers(Keen.VRage.Library.Serialization.Json.JsonDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeIntoSlow(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Deserialize(Keen.VRage.Library.Serialization.Binary.BinaryDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Serialize(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,System.Object,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.SerializeMembers(Keen.VRage.Library.Serialization.Binary.BinarySerializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,System.Object@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.DeserializeInto(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Deserialize(Keen.VRage.Library.Serialization.Generic.GenericObjectDeserializationContext@,Keen.VRage.Library.Serialization.SerializerFlags)">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Instance">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Serializer.Bundles">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.GetStreamSerializer(Keen.VRage.Library.Serialization.SerializerFormat)">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.Keen#VRage#Library#Serialization#ISerializable{Keen#VRage#Multiplayer#Utils#SharedInProcess{T}}#Serializer">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.GetTypeInfo">
            <inheritdoc />
        </member>
        <member name="T:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder">
            <inheritdoc />
        </member>
        <member name="F:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.Value">
            <summary>Singleton instance</summary>
        </member>
        <member name="F:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.RawAccessors">
            <summary>Accessors for this instance and parent types.</summary>
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Name">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.SerializedName">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.CanAccessByRef">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.AccessibleTypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Serializers">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Member">
            <inheritdoc />
        </member>
        <member name="P:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.MemberType">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Set(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#Set(System.Byte@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor#GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{T}#Set(System.Object,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{T}#Get(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{T}#Get(System.Byte@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Keen#VRage#Library#Serialization#IMemberAccessor{T}#Set(System.Byte@,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.GetReference(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Set(Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Keen.VRage.Multiplayer.Utils.SharedInProcess`1.TypeInfoHolder.ValueAccessor.Get(Keen.VRage.Multiplayer.Utils.SharedInProcess{`0}@)">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Method builder for AsyncVoid methods.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
            Create the method builder.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
            Start the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Set the boxed state machine, unused.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>
            Notify about an exception while executing the state machine.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>
            Signal that the state machine has completed.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Await on another task.
            </summary>
        </member>
    </members>
</doc>
